{"ast":null,"code":"import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\n\nexport class ToneAudioBuffers extends Tone {\n  constructor() {\n    super();\n    this.name = \"ToneAudioBuffers\";\n    /**\n     * All of the buffers\n     */\n\n    this._buffers = new Map();\n    /**\n     * Keep track of the number of loaded buffers\n     */\n\n    this._loadingCount = 0;\n    const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n    this.baseUrl = options.baseUrl; // add each one\n\n    Object.keys(options.urls).forEach(name => {\n      this._loadingCount++;\n      const url = options.urls[name];\n      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n    });\n  }\n\n  static getDefaults() {\n    return {\n      baseUrl: \"\",\n      onerror: noOp,\n      onload: noOp,\n      urls: {}\n    };\n  }\n  /**\n   * True if the buffers object has a buffer by that name.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  has(name) {\n    return this._buffers.has(name.toString());\n  }\n  /**\n   * Get a buffer by name. If an array was loaded,\n   * then use the array index.\n   * @param  name  The key or index of the buffer.\n   */\n\n\n  get(name) {\n    assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n    return this._buffers.get(name.toString());\n  }\n  /**\n   * A buffer was loaded. decrement the counter.\n   */\n\n\n  _bufferLoaded(callback) {\n    this._loadingCount--;\n\n    if (this._loadingCount === 0 && callback) {\n      callback();\n    }\n  }\n  /**\n   * If the buffers are loaded or not\n   */\n\n\n  get loaded() {\n    return Array.from(this._buffers).every(_ref => {\n      let [_, buffer] = _ref;\n      return buffer.loaded;\n    });\n  }\n  /**\n   * Add a buffer by name and url to the Buffers\n   * @param  name      A unique name to give the buffer\n   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n   * @param  callback  The callback to invoke when the url is loaded.\n   * @param  onerror  Invoked if the buffer can't be loaded\n   */\n\n\n  add(name, url) {\n    let callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noOp;\n    let onerror = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noOp;\n\n    if (isString(url)) {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n    } else {\n      this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n    }\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffers.forEach(buffer => buffer.dispose());\n\n    this._buffers.clear();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,SAArB;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,MAAT,QAAuB,eAAvB;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,MAAOC,gBAAP,SAAgCN,IAAhC,CAAoC;EA8BzCO;IAEC;IA9BQ,YAAe,kBAAf;IAET;;;;IAGQ,gBAAyC,IAAIC,GAAJ,EAAzC;IAOR;;;;IAGQ,qBAAgB,CAAhB;IAgBP,MAAMC,OAAO,GAAGR,oBAAoB,CACnCK,gBAAgB,CAACI,WAAjB,EADmC,EACHC,SADG,EACQ,CAAC,MAAD,EAAS,QAAT,EAAmB,SAAnB,CADR,EACuC,MADvC,CAApC;IAIA,KAAKC,OAAL,GAAeH,OAAO,CAACG,OAAvB,CAPD,CAQC;;IACAC,MAAM,CAACC,IAAP,CAAYL,OAAO,CAACM,IAApB,EAA0BC,OAA1B,CAAkCC,IAAI,IAAG;MACxC,KAAKC,aAAL;MACA,MAAMC,GAAG,GAAGV,OAAO,CAACM,IAAR,CAAaE,IAAb,CAAZ;MACA,KAAKG,GAAL,CAASH,IAAT,EAAeE,GAAf,EAAoB,KAAKE,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,EAA8Bb,OAAO,CAACc,MAAtC,CAApB,EAAmEd,OAAO,CAACe,OAA3E;IACA,CAJD;EAMA;;EAEiB,OAAXd,WAAW;IACjB,OAAO;MACNE,OAAO,EAAE,EADH;MAENY,OAAO,EAAEtB,IAFH;MAGNqB,MAAM,EAAErB,IAHF;MAINa,IAAI,EAAE;IAJA,CAAP;EAMA;EAED;;;;;;EAIAU,GAAG,CAACR,IAAD,EAAsB;IACxB,OAAO,KAAKS,QAAL,CAAcD,GAAd,CAAkBR,IAAI,CAACU,QAAL,EAAlB,CAAP;EACA;EAED;;;;;;;EAKAC,GAAG,CAACX,IAAD,EAAsB;IACxBZ,MAAM,CAAC,KAAKoB,GAAL,CAASR,IAAT,CAAD,EAAiB,yCAAyCA,IAAI,EAA9D,CAAN;IACA,OAAO,KAAKS,QAAL,CAAcE,GAAd,CAAkBX,IAAI,CAACU,QAAL,EAAlB,CAAP;EACA;EAED;;;;;EAGQN,aAAa,CAACQ,QAAD,EAAqB;IACzC,KAAKX,aAAL;;IACA,IAAI,KAAKA,aAAL,KAAuB,CAAvB,IAA4BW,QAAhC,EAA0C;MACzCA,QAAQ;IACR;EACD;EAED;;;;;EAGU,IAANC,MAAM;IACT,OAAOC,KAAK,CAACC,IAAN,CAAW,KAAKN,QAAhB,EAA0BO,KAA1B,CAAgC;MAAA,IAAC,CAACC,CAAD,EAAIC,MAAJ,CAAD;MAAA,OAAiBA,MAAM,CAACL,MAAxB;IAAA,CAAhC,CAAP;EACA;EAED;;;;;;;;;EAOAV,GAAG,CACFH,IADE,EAEFE,GAFE,EAIgC;IAAA,IADlCU,QACkC,uEADX3B,IACW;IAAA,IAAlCsB,OAAkC,uEAAJtB,IAAI;;IAElC,IAAIC,QAAQ,CAACgB,GAAD,CAAZ,EAAmB;MAClB,KAAKO,QAAL,CAAcU,GAAd,CAAkBnB,IAAI,CAACU,QAAL,EAAlB,EAAmC,IAAIvB,eAAJ,CAAoB,KAAKQ,OAAL,GAAeO,GAAnC,EAAwCU,QAAxC,EAAkDL,OAAlD,CAAnC;IACA,CAFD,MAEO;MACN,KAAKE,QAAL,CAAcU,GAAd,CAAkBnB,IAAI,CAACU,QAAL,EAAlB,EAAmC,IAAIvB,eAAJ,CAAoBe,GAApB,EAAyBU,QAAzB,EAAmCL,OAAnC,CAAnC;IACA;;IACD,OAAO,IAAP;EACA;;EAEDa,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKX,QAAL,CAAcV,OAAd,CAAsBmB,MAAM,IAAIA,MAAM,CAACE,OAAP,EAAhC;;IACA,KAAKX,QAAL,CAAcY,KAAd;;IACA,OAAO,IAAP;EACA;;AArHwC","names":["Tone","optionsFromArguments","noOp","isString","ToneAudioBuffer","assert","ToneAudioBuffers","constructor","Map","options","getDefaults","arguments","baseUrl","Object","keys","urls","forEach","name","_loadingCount","url","add","_bufferLoaded","bind","onload","onerror","has","_buffers","toString","get","callback","loaded","Array","from","every","_","buffer","set","dispose","clear"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/ToneAudioBuffers.ts"],"sourcesContent":["import { Tone } from \"../Tone\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { noOp } from \"../util/Interface\";\nimport { isString } from \"../util/TypeCheck\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\nimport { assert } from \"../util/Debug\";\n\nexport interface ToneAudioBuffersUrlMap {\n\t[name: string]: string | AudioBuffer | ToneAudioBuffer;\n\t[name: number]: string | AudioBuffer | ToneAudioBuffer;\n}\n\ninterface ToneAudioBuffersOptions {\n\turls: ToneAudioBuffersUrlMap;\n\tonload: () => void;\n\tonerror?: (error: Error) => void;\n\tbaseUrl: string;\n}\n\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n\n\treadonly name: string = \"ToneAudioBuffers\";\n\n\t/**\n\t * All of the buffers\n\t */\n\tprivate _buffers: Map<string, ToneAudioBuffer> = new Map();\n\n\t/**\n\t * A path which is prefixed before every url.\n\t */\n\tbaseUrl: string;\n\n\t/**\n\t * Keep track of the number of loaded buffers\n\t */\n\tprivate _loadingCount = 0;\n\n\t/**\n\t * @param  urls  An object literal or array of urls to load.\n\t * @param onload  The callback to invoke when the buffers are loaded.\n\t * @param baseUrl A prefix url to add before all the urls\n\t */\n\tconstructor(\n\t\turls?: ToneAudioBuffersUrlMap,\n\t\tonload?: () => void,\n\t\tbaseUrl?: string,\n\t);\n\tconstructor(options?: Partial<ToneAudioBuffersOptions>);\n\tconstructor() {\n\n\t\tsuper();\n\t\tconst options = optionsFromArguments(\n\t\t\tToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\",\n\t\t);\n\n\t\tthis.baseUrl = options.baseUrl;\n\t\t// add each one\n\t\tObject.keys(options.urls).forEach(name => {\n\t\t\tthis._loadingCount++;\n\t\t\tconst url = options.urls[name];\n\t\t\tthis.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n\t\t});\n\n\t}\n\n\tstatic getDefaults(): ToneAudioBuffersOptions {\n\t\treturn {\n\t\t\tbaseUrl: \"\",\n\t\t\tonerror: noOp,\n\t\t\tonload: noOp,\n\t\t\turls: {},\n\t\t};\n\t}\n\n\t/**\n\t * True if the buffers object has a buffer by that name.\n\t * @param  name  The key or index of the buffer.\n\t */\n\thas(name: string | number): boolean {\n\t\treturn this._buffers.has(name.toString());\n\t}\n\n\t/**\n\t * Get a buffer by name. If an array was loaded,\n\t * then use the array index.\n\t * @param  name  The key or index of the buffer.\n\t */\n\tget(name: string | number): ToneAudioBuffer {\n\t\tassert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n\t\treturn this._buffers.get(name.toString()) as ToneAudioBuffer;\n\t}\n\n\t/**\n\t * A buffer was loaded. decrement the counter.\n\t */\n\tprivate _bufferLoaded(callback: () => void): void {\n\t\tthis._loadingCount--;\n\t\tif (this._loadingCount === 0 && callback) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t/**\n\t * If the buffers are loaded or not\n\t */\n\tget loaded(): boolean {\n\t\treturn Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n\t}\n\n\t/**\n\t * Add a buffer by name and url to the Buffers\n\t * @param  name      A unique name to give the buffer\n\t * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n\t * @param  callback  The callback to invoke when the url is loaded.\n\t * @param  onerror  Invoked if the buffer can't be loaded\n\t */\n\tadd(\n\t\tname: string | number,\n\t\turl: string | AudioBuffer | ToneAudioBuffer,\n\t\tcallback: () => void = noOp,\n\t\tonerror: (e: Error) => void = noOp,\n\t): this {\n\t\tif (isString(url)) {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n\t\t} else {\n\t\t\tthis._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n\t\t}\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffers.forEach(buffer => buffer.dispose());\n\t\tthis._buffers.clear();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}