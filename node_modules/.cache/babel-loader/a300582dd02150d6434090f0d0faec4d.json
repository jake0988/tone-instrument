{"ast":null,"code":"import { FeedbackEffect } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\n\nexport class PitchShift extends FeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n    this.name = \"PitchShift\";\n    const options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n    this._frequency = new Signal({\n      context: this.context\n    });\n    this._delayA = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoA = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\"\n    }).connect(this._delayA.delayTime);\n    this._delayB = new Delay({\n      maxDelay: 1,\n      context: this.context\n    });\n    this._lfoB = new LFO({\n      context: this.context,\n      min: 0,\n      max: 0.1,\n      type: \"sawtooth\",\n      phase: 180\n    }).connect(this._delayB.delayTime);\n    this._crossFade = new CrossFade({\n      context: this.context\n    });\n    this._crossFadeLFO = new LFO({\n      context: this.context,\n      min: 0,\n      max: 1,\n      type: \"triangle\",\n      phase: 90\n    }).connect(this._crossFade.fade);\n    this._feedbackDelay = new Delay({\n      delayTime: options.delayTime,\n      context: this.context\n    });\n    this.delayTime = this._feedbackDelay.delayTime;\n    readOnly(this, \"delayTime\");\n    this._pitch = options.pitch;\n    this._windowSize = options.windowSize; // connect the two delay lines up\n\n    this._delayA.connect(this._crossFade.a);\n\n    this._delayB.connect(this._crossFade.b); // connect the frequency\n\n\n    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency); // route the input\n\n\n    this.effectSend.fan(this._delayA, this._delayB);\n\n    this._crossFade.chain(this._feedbackDelay, this.effectReturn); // start the LFOs at the same time\n\n\n    const now = this.now();\n\n    this._lfoA.start(now);\n\n    this._lfoB.start(now);\n\n    this._crossFadeLFO.start(now); // set the initial value\n\n\n    this.windowSize = this._windowSize;\n  }\n\n  static getDefaults() {\n    return Object.assign(FeedbackEffect.getDefaults(), {\n      pitch: 0,\n      windowSize: 0.1,\n      delayTime: 0,\n      feedback: 0\n    });\n  }\n  /**\n   * Repitch the incoming signal by some interval (measured in semi-tones).\n   * @example\n   * const pitchShift = new Tone.PitchShift().toDestination();\n   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n   * pitchShift.pitch = -12; // down one octave\n   * pitchShift.pitch = 7; // up a fifth\n   */\n\n\n  get pitch() {\n    return this._pitch;\n  }\n\n  set pitch(interval) {\n    this._pitch = interval;\n    let factor = 0;\n\n    if (interval < 0) {\n      this._lfoA.min = 0;\n      this._lfoA.max = this._windowSize;\n      this._lfoB.min = 0;\n      this._lfoB.max = this._windowSize;\n      factor = intervalToFrequencyRatio(interval - 1) + 1;\n    } else {\n      this._lfoA.min = this._windowSize;\n      this._lfoA.max = 0;\n      this._lfoB.min = this._windowSize;\n      this._lfoB.max = 0;\n      factor = intervalToFrequencyRatio(interval) - 1;\n    }\n\n    this._frequency.value = factor * (1.2 / this._windowSize);\n  }\n  /**\n   * The window size corresponds roughly to the sample length in a looping sampler.\n   * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n   * signal, but larger values will result in smoother pitch shifting for larger intervals.\n   * A nominal range of 0.03 to 0.1 is recommended.\n   */\n\n\n  get windowSize() {\n    return this._windowSize;\n  }\n\n  set windowSize(size) {\n    this._windowSize = this.toSeconds(size);\n    this.pitch = this._pitch;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._frequency.dispose();\n\n    this._delayA.dispose();\n\n    this._delayB.dispose();\n\n    this._lfoA.dispose();\n\n    this._lfoB.dispose();\n\n    this._crossFade.dispose();\n\n    this._crossFadeLFO.dispose();\n\n    this._feedbackDelay.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["FeedbackEffect","optionsFromArguments","LFO","Delay","CrossFade","Signal","readOnly","intervalToFrequencyRatio","PitchShift","constructor","getDefaults","arguments","options","_frequency","context","_delayA","maxDelay","_lfoA","min","max","type","connect","delayTime","_delayB","_lfoB","phase","_crossFade","_crossFadeLFO","fade","_feedbackDelay","_pitch","pitch","_windowSize","windowSize","a","b","fan","frequency","effectSend","chain","effectReturn","now","start","Object","assign","feedback","interval","factor","value","size","toSeconds","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/PitchShift.ts"],"sourcesContent":["import { Interval, Seconds, Time } from \"../core/type/Units\";\nimport { FeedbackEffect, FeedbackEffectOptions } from \"./FeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Delay } from \"../core/context/Delay\";\nimport { CrossFade } from \"../component/channel/CrossFade\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\nimport { intervalToFrequencyRatio } from \"../core/type/Conversions\";\n\nexport interface PitchShiftOptions extends FeedbackEffectOptions {\n\tpitch: Interval;\n\twindowSize: Seconds;\n\tdelayTime: Time;\n}\n\n/**\n * PitchShift does near-realtime pitch shifting to the incoming signal.\n * The effect is achieved by speeding up or slowing down the delayTime\n * of a DelayNode using a sawtooth wave.\n * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n * @category Effect\n */\nexport class PitchShift extends FeedbackEffect<PitchShiftOptions> {\n\n\treadonly name: string = \"PitchShift\";\n\n\t/**\n\t * The pitch signal\n\t */\n\tprivate _frequency: Signal<\"frequency\">;\n\n\t/**\n\t * Uses two DelayNodes to cover up the jump in the sawtooth wave.\n\t */\n\tprivate _delayA: Delay;\n\n\t/**\n\t * The first LFO.\n\t */\n\tprivate _lfoA: LFO;\n\n\t/**\n\t * The second DelayNode\n\t */\n\tprivate _delayB: Delay;\n\n\t/**\n\t * The second LFO.\n\t */\n\tprivate _lfoB: LFO;\n\n\t/**\n\t * Cross fade quickly between the two delay lines to cover up the jump in the sawtooth wave\n\t */\n\tprivate _crossFade: CrossFade;\n\n\t/**\n\t * LFO which alternates between the two delay lines to cover up the disparity in the\n\t * sawtooth wave.\n\t */\n\tprivate _crossFadeLFO: LFO;\n\n\t/**\n\t * The delay node\n\t */\n\tprivate _feedbackDelay: Delay;\n\n\t/**\n\t * The amount of delay on the input signal\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Hold the current pitch\n\t */\n\tprivate _pitch: Interval;\n\n\t/**\n\t * Hold the current windowSize\n\t */\n\tprivate _windowSize;\n\n\t/**\n\t * @param pitch The interval to transpose the incoming signal by.\n\t */\n\tconstructor(pitch?: Interval);\n\tconstructor(options?: Partial<PitchShiftOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]));\n\t\tconst options = optionsFromArguments(PitchShift.getDefaults(), arguments, [\"pitch\"]);\n\n\t\tthis._frequency = new Signal({ context: this.context });\n\t\tthis._delayA = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoA = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\"\n\t\t}).connect(this._delayA.delayTime);\n\t\tthis._delayB = new Delay({\n\t\t\tmaxDelay: 1,\n\t\t\tcontext: this.context\n\t\t});\n\t\tthis._lfoB = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 0.1,\n\t\t\ttype: \"sawtooth\",\n\t\t\tphase: 180\n\t\t}).connect(this._delayB.delayTime);\n\t\tthis._crossFade = new CrossFade({ context: this.context });\n\t\tthis._crossFadeLFO = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\ttype: \"triangle\",\n\t\t\tphase: 90\n\t\t}).connect(this._crossFade.fade);\n\t\tthis._feedbackDelay = new Delay({\n\t\t\tdelayTime: options.delayTime,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis.delayTime = this._feedbackDelay.delayTime;\n\t\treadOnly(this, \"delayTime\");\n\t\tthis._pitch = options.pitch;\n\n\t\tthis._windowSize = options.windowSize;\n\n\t\t// connect the two delay lines up\n\t\tthis._delayA.connect(this._crossFade.a);\n\t\tthis._delayB.connect(this._crossFade.b);\n\t\t// connect the frequency\n\t\tthis._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t\t// route the input\n\t\tthis.effectSend.fan(this._delayA, this._delayB);\n\t\tthis._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t\t// start the LFOs at the same time\n\t\tconst now = this.now();\n\t\tthis._lfoA.start(now);\n\t\tthis._lfoB.start(now);\n\t\tthis._crossFadeLFO.start(now);\n\t\t// set the initial value\n\t\tthis.windowSize = this._windowSize;\n\t}\n\n\tstatic getDefaults(): PitchShiftOptions {\n\t\treturn Object.assign(FeedbackEffect.getDefaults(), {\n\t\t\tpitch: 0,\n\t\t\twindowSize: 0.1,\n\t\t\tdelayTime: 0,\n\t\t\tfeedback: 0\n\t\t});\n\t}\n\n\t/**\n\t * Repitch the incoming signal by some interval (measured in semi-tones).\n\t * @example\n\t * const pitchShift = new Tone.PitchShift().toDestination();\n\t * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();\n\t * pitchShift.pitch = -12; // down one octave\n\t * pitchShift.pitch = 7; // up a fifth\n\t */\n\tget pitch() {\n\t\treturn this._pitch;\n\t}\n\tset pitch(interval) {\n\t\tthis._pitch = interval;\n\t\tlet factor = 0;\n\t\tif (interval < 0) {\n\t\t\tthis._lfoA.min = 0;\n\t\t\tthis._lfoA.max = this._windowSize;\n\t\t\tthis._lfoB.min = 0;\n\t\t\tthis._lfoB.max = this._windowSize;\n\t\t\tfactor = intervalToFrequencyRatio(interval - 1) + 1;\n\t\t} else {\n\t\t\tthis._lfoA.min = this._windowSize;\n\t\t\tthis._lfoA.max = 0;\n\t\t\tthis._lfoB.min = this._windowSize;\n\t\t\tthis._lfoB.max = 0;\n\t\t\tfactor = intervalToFrequencyRatio(interval) - 1;\n\t\t}\n\t\tthis._frequency.value = factor * (1.2 / this._windowSize);\n\t}\n\n\t/**\n\t * The window size corresponds roughly to the sample length in a looping sampler.\n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals.\n\t * A nominal range of 0.03 to 0.1 is recommended.\n\t */\n\tget windowSize(): Seconds {\n\t\treturn this._windowSize;\n\t}\n\tset windowSize(size) {\n\t\tthis._windowSize = this.toSeconds(size);\n\t\tthis.pitch = this._pitch;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._frequency.dispose();\n\t\tthis._delayA.dispose();\n\t\tthis._delayB.dispose();\n\t\tthis._lfoA.dispose();\n\t\tthis._lfoB.dispose();\n\t\tthis._crossFade.dispose();\n\t\tthis._crossFadeLFO.dispose();\n\t\tthis._feedbackDelay.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}