{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n/**\n * The base class for Metering classes.\n */\n\nexport class MeterBase extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MeterBase.getDefaults(), arguments));\n    this.name = \"MeterBase\";\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\"\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._analyser.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAgCA,aAAhC,QAA2E,kCAA3E;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,YAAzB;AAIA;;;;AAGA,OAAM,MAAOC,SAAP,SAA2DH,aAA3D,CAAiF;EAoBtFI;IACC,MAAMH,oBAAoB,CAACE,SAAS,CAACE,WAAV,EAAD,EAA0BC,SAA1B,CAA1B;IAnBQ,YAAe,WAAf;IAqBR,KAAKC,KAAL,GAAa,KAAKC,MAAL,GAAc,KAAKC,SAAL,GAAiB,IAAIP,QAAJ,CAAa;MACxDQ,OAAO,EAAE,KAAKA,OAD0C;MAExDC,IAAI,EAAE,GAFkD;MAGxDC,IAAI,EAAE;IAHkD,CAAb,CAA5C;EAKA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKJ,SAAL,CAAeI,OAAf;;IACA,OAAO,IAAP;EACA;;AAlCqF","names":["ToneAudioNode","optionsFromArguments","Analyser","MeterBase","constructor","getDefaults","arguments","input","output","_analyser","context","size","type","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/analysis/MeterBase.ts"],"sourcesContent":["import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Analyser } from \"./Analyser\";\n\nexport type MeterBaseOptions = ToneAudioNodeOptions;\n\n/**\n * The base class for Metering classes.\n */\nexport class MeterBase<Options extends MeterBaseOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"MeterBase\";\n\n\t/**\n\t * The signal to be analysed\n\t */\n\tinput: InputNode;\n\n\t/**\n\t * The output is just a pass through of the input\n\t */\n\toutput: OutputNode;\n\n\t/**\n\t * The analyser node for the incoming signal\n\t */\n\tprotected _analyser: Analyser;\n\n\tconstructor(options?: Partial<MeterBaseOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MeterBase.getDefaults(), arguments));\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}