{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\n\nexport class Player extends Source {\n  constructor() {\n    super(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Player\";\n    /**\n     * All of the active buffer source nodes\n     */\n\n    this._activeSources = new Set();\n    const options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer({\n      onload: this._onload.bind(this, options.onload),\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    this.autostart = options.autostart;\n    this._loop = options.loop;\n    this._loopStart = options.loopStart;\n    this._loopEnd = options.loopEnd;\n    this._playbackRate = options.playbackRate;\n    this.fadeIn = options.fadeIn;\n    this.fadeOut = options.fadeOut;\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      autostart: false,\n      fadeIn: 0,\n      fadeOut: 0,\n      loop: false,\n      loopEnd: 0,\n      loopStart: 0,\n      onload: noOp,\n      onerror: noOp,\n      playbackRate: 1,\n      reverse: false\n    });\n  }\n  /**\n   * Load the audio file as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * Note: this does not need to be called if a url\n   * was passed in to the constructor. Only use this\n   * if you want to manually load a new url.\n   * @param url The url of the buffer to load. Filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._buffer.load(url);\n\n      this._onload();\n\n      return this;\n    });\n  }\n  /**\n   * Internal callback when the buffer is loaded.\n   */\n\n\n  _onload() {\n    let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : noOp;\n    callback();\n\n    if (this.autostart) {\n      this.start();\n    }\n  }\n  /**\n   * Internal callback when the buffer is done playing.\n   */\n\n\n  _onSourceEnd(source) {\n    // invoke the onstop function\n    this.onstop(this); // delete the source from the active sources\n\n    this._activeSources.delete(source);\n\n    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === \"started\") {\n      // remove the 'implicitEnd' event and replace with an explicit end\n      this._state.cancel(this.now());\n\n      this._state.setStateAtTime(\"stopped\", this.now());\n    }\n  }\n  /**\n   * Play the buffer at the given startTime. Optionally add an offset\n   * and/or duration which will play the buffer from a position\n   * within the buffer for the given duration.\n   *\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n   */\n\n\n  start(time, offset, duration) {\n    super.start(time, offset, duration);\n    return this;\n  }\n  /**\n   * Internal start method\n   */\n\n\n  _start(startTime, offset, duration) {\n    // if it's a loop the default offset is the loopStart point\n    if (this._loop) {\n      offset = defaultArg(offset, this._loopStart);\n    } else {\n      // otherwise the default offset is 0\n      offset = defaultArg(offset, 0);\n    } // compute the values in seconds\n\n\n    const computedOffset = this.toSeconds(offset); // compute the duration which is either the passed in duration of the buffer.duration - offset\n\n    const origDuration = duration;\n    duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n    let computedDuration = this.toSeconds(duration); // scale it by the playback rate\n\n    computedDuration = computedDuration / this._playbackRate; // get the start time\n\n    startTime = this.toSeconds(startTime); // make the source\n\n    const source = new ToneBufferSource({\n      url: this._buffer,\n      context: this.context,\n      fadeIn: this.fadeIn,\n      fadeOut: this.fadeOut,\n      loop: this._loop,\n      loopEnd: this._loopEnd,\n      loopStart: this._loopStart,\n      onended: this._onSourceEnd.bind(this),\n      playbackRate: this._playbackRate\n    }).connect(this.output); // set the looping properties\n\n    if (!this._loop && !this._synced) {\n      // cancel the previous stop\n      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample\n\n\n      this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n        implicitEnd: true\n      });\n    } // add it to the array of active sources\n\n\n    this._activeSources.add(source); // start it\n\n\n    if (this._loop && isUndef(origDuration)) {\n      source.start(startTime, computedOffset);\n    } else {\n      // subtract the fade out time\n      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n    }\n  }\n  /**\n   * Stop playback.\n   */\n\n\n  _stop(time) {\n    const computedTime = this.toSeconds(time);\n\n    this._activeSources.forEach(source => source.stop(computedTime));\n  }\n  /**\n   * Stop and then restart the player from the beginning (or offset)\n   * @param  time When the player should start.\n   * @param  offset The offset from the beginning of the sample to start at.\n   * @param  duration How long the sample should play. If no duration is given,\n   * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n   */\n\n\n  restart(time, offset, duration) {\n    super.restart(time, offset, duration);\n    return this;\n  }\n\n  _restart(time, offset, duration) {\n    this._stop(time);\n\n    this._start(time, offset, duration);\n  }\n  /**\n   * Seek to a specific time in the player's buffer. If the\n   * source is no longer playing at that time, it will stop.\n   * @param offset The time to seek to.\n   * @param when The time for the seek event to occur.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n   * \tplayer.start();\n   * \t// seek to the offset in 1 second from now\n   * \tplayer.seek(0.4, \"+1\");\n   * }).toDestination();\n   */\n\n\n  seek(offset, when) {\n    const computedTime = this.toSeconds(when);\n\n    if (this._state.getValueAtTime(computedTime) === \"started\") {\n      const computedOffset = this.toSeconds(offset); // if it's currently playing, stop it\n\n      this._stop(computedTime); // restart it at the given time\n\n\n      this._start(computedTime, computedOffset);\n    }\n\n    return this;\n  }\n  /**\n   * Set the loop start and end. Will only loop if loop is set to true.\n   * @param loopStart The loop start time\n   * @param loopEnd The loop end time\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n   * // loop between the given points\n   * player.setLoopPoints(0.2, 0.3);\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  setLoopPoints(loopStart, loopEnd) {\n    this.loopStart = loopStart;\n    this.loopEnd = loopEnd;\n    return this;\n  }\n  /**\n   * If loop is true, the loop will start at this position.\n   */\n\n\n  get loopStart() {\n    return this._loopStart;\n  }\n\n  set loopStart(loopStart) {\n    this._loopStart = loopStart;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopStart = loopStart;\n    });\n  }\n  /**\n   * If loop is true, the loop will end at this position.\n   */\n\n\n  get loopEnd() {\n    return this._loopEnd;\n  }\n\n  set loopEnd(loopEnd) {\n    this._loopEnd = loopEnd;\n\n    if (this.buffer.loaded) {\n      assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n    } // get the current source\n\n\n    this._activeSources.forEach(source => {\n      source.loopEnd = loopEnd;\n    });\n  }\n  /**\n   * The audio buffer belonging to the player.\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n\n  set buffer(buffer) {\n    this._buffer.set(buffer);\n  }\n  /**\n   * If the buffer should loop once it's over.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n   * player.loop = true;\n   * player.autostart = true;\n   */\n\n\n  get loop() {\n    return this._loop;\n  }\n\n  set loop(loop) {\n    // if no change, do nothing\n    if (this._loop === loop) {\n      return;\n    }\n\n    this._loop = loop; // set the loop of all of the sources\n\n    this._activeSources.forEach(source => {\n      source.loop = loop;\n    });\n\n    if (loop) {\n      // remove the next stopEvent\n      const stopEvent = this._state.getNextState(\"stopped\", this.now());\n\n      if (stopEvent) {\n        this._state.cancel(stopEvent.time);\n      }\n    }\n  }\n  /**\n   * Normal speed is 1. The pitch will change with the playback rate.\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n   * // play at 1/4 speed\n   * player.playbackRate = 0.25;\n   * // play as soon as the buffer is loaded\n   * player.autostart = true;\n   */\n\n\n  get playbackRate() {\n    return this._playbackRate;\n  }\n\n  set playbackRate(rate) {\n    this._playbackRate = rate;\n    const now = this.now(); // cancel the stop event since it's at a different time now\n\n    const stopEvent = this._state.getNextState(\"stopped\", now);\n\n    if (stopEvent && stopEvent.implicitEnd) {\n      this._state.cancel(stopEvent.time);\n\n      this._activeSources.forEach(source => source.cancelStop());\n    } // set all the sources\n\n\n    this._activeSources.forEach(source => {\n      source.playbackRate.setValueAtTime(rate, now);\n    });\n  }\n  /**\n   * If the buffer should be reversed\n   * @example\n   * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n   * player.autostart = true;\n   * player.reverse = true;\n   */\n\n\n  get reverse() {\n    return this._buffer.reverse;\n  }\n\n  set reverse(rev) {\n    this._buffer.reverse = rev;\n  }\n  /**\n   * If the buffer is loaded\n   */\n\n\n  get loaded() {\n    return this._buffer.loaded;\n  }\n\n  dispose() {\n    super.dispose(); // disconnect all of the players\n\n    this._activeSources.forEach(source => source.dispose());\n\n    this._activeSources.clear();\n\n    this._buffer.dispose();\n\n    return this;\n  }\n\n}\n\n__decorate([timeRange(0)], Player.prototype, \"fadeIn\", void 0);\n\n__decorate([timeRange(0)], Player.prototype, \"fadeOut\", void 0);","map":{"version":3,"mappings":"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","names":["ToneAudioBuffer","defaultArg","optionsFromArguments","noOp","isUndef","Source","ToneBufferSource","assertRange","timeRange","Player","constructor","getDefaults","arguments","Set","options","_buffer","onload","_onload","bind","onerror","reverse","url","autostart","_loop","loop","_loopStart","loopStart","_loopEnd","loopEnd","_playbackRate","playbackRate","fadeIn","fadeOut","Object","assign","load","callback","start","_onSourceEnd","source","onstop","_activeSources","delete","size","_synced","_state","getValueAtTime","now","cancel","setStateAtTime","time","offset","duration","_start","startTime","computedOffset","toSeconds","origDuration","Math","max","computedDuration","context","onended","connect","output","implicitEnd","add","_stop","computedTime","forEach","stop","restart","_restart","seek","when","setLoopPoints","buffer","loaded","set","stopEvent","getNextState","rate","cancelStop","setValueAtTime","rev","dispose","clear","__decorate"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/source/buffer/Player.ts"],"sourcesContent":["import { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { Positive, Seconds, Time } from \"../../core/type/Units\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { isUndef } from \"../../core/util/TypeCheck\";\nimport { Source, SourceOptions } from \"../Source\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { assertRange } from \"../../core/util/Debug\";\nimport { timeRange } from \"../../core/util/Decorator\";\n\nexport interface PlayerOptions extends SourceOptions {\n\tonload: () => void;\n\tonerror: (error: Error) => void;\n\tplaybackRate: Positive;\n\tloop: boolean;\n\tautostart: boolean;\n\tloopStart: Time;\n\tloopEnd: Time;\n\treverse: boolean;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\turl?: ToneAudioBuffer | string | AudioBuffer;\n}\n\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source<PlayerOptions> {\n\n\treadonly name: string = \"Player\";\n\n\t/**\n\t * If the file should play as soon\n\t * as the buffer is loaded.\n\t */\n\tautostart: boolean;\n\n\t/**\n\t * The buffer\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\t/**\n\t * if the buffer should loop once it's over\n\t */\n\tprivate _loop: boolean;\n\n\t/**\n\t * if 'loop' is true, the loop will start at this position\n\t */\n\tprivate _loopStart: Time;\n\n\t/**\n\t * if 'loop' is true, the loop will end at this position\n\t */\n\tprivate _loopEnd: Time;\n\n\t/**\n\t * the playback rate\n\t */\n\tprivate _playbackRate: Positive;\n\n\t/**\n\t * All of the active buffer source nodes\n\t */\n\tprivate _activeSources: Set<ToneBufferSource> = new Set();\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\t@timeRange(0)\n\tfadeOut: Time;\n\n\t/**\n\t * @param url Either the AudioBuffer or the url from which to load the AudioBuffer\n\t * @param onload The function to invoke when the buffer is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<PlayerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Player.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer({\n\t\t\tonload: this._onload.bind(this, options.onload),\n\t\t\tonerror: options.onerror,\n\t\t\treverse: options.reverse,\n\t\t\turl: options.url,\n\t\t});\n\t\tthis.autostart = options.autostart;\n\t\tthis._loop = options.loop;\n\t\tthis._loopStart = options.loopStart;\n\t\tthis._loopEnd = options.loopEnd;\n\t\tthis._playbackRate = options.playbackRate;\n\t\tthis.fadeIn = options.fadeIn;\n\t\tthis.fadeOut = options.fadeOut;\n\t}\n\n\tstatic getDefaults(): PlayerOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tautostart: false,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tloop: false,\n\t\t\tloopEnd: 0,\n\t\t\tloopStart: 0,\n\t\t\tonload: noOp,\n\t\t\tonerror: noOp,\n\t\t\tplaybackRate: 1,\n\t\t\treverse: false,\n\t\t});\n\t}\n\n\t/**\n\t * Load the audio file as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * Note: this does not need to be called if a url\n\t * was passed in to the constructor. Only use this\n\t * if you want to manually load a new url.\n\t * @param url The url of the buffer to load. Filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<this> {\n\t\tawait this._buffer.load(url);\n\t\tthis._onload();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal callback when the buffer is loaded.\n\t */\n\tprivate _onload(callback: () => void = noOp): void {\n\t\tcallback();\n\t\tif (this.autostart) {\n\t\t\tthis.start();\n\t\t}\n\t}\n\n\t/**\n\t * Internal callback when the buffer is done playing.\n\t */\n\tprivate _onSourceEnd(source: ToneBufferSource): void {\n\t\t// invoke the onstop function\n\t\tthis.onstop(this);\n\n\t\t// delete the source from the active sources\n\t\tthis._activeSources.delete(source);\n\t\tif (this._activeSources.size === 0 && !this._synced &&\n\t\t\tthis._state.getValueAtTime(this.now()) === \"started\") {\n\t\t\t// remove the 'implicitEnd' event and replace with an explicit end\n\t\t\tthis._state.cancel(this.now());\n\t\t\tthis._state.setStateAtTime(\"stopped\", this.now());\n\t\t}\n\t}\n\n\t/**\n\t * Play the buffer at the given startTime. Optionally add an offset\n\t * and/or duration which will play the buffer from a position\n\t * within the buffer for the given duration.\n\t *\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n\t */\n\tstart(time?: Time, offset?: Time, duration?: Time): this {\n\t\tsuper.start(time, offset, duration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Internal start method\n\t */\n\tprotected _start(startTime?: Time, offset?: Time, duration?: Time): void {\n\t\t// if it's a loop the default offset is the loopStart point\n\t\tif (this._loop) {\n\t\t\toffset = defaultArg(offset, this._loopStart);\n\t\t} else {\n\t\t\t// otherwise the default offset is 0\n\t\t\toffset = defaultArg(offset, 0);\n\t\t}\n\n\t\t// compute the values in seconds\n\t\tconst computedOffset = this.toSeconds(offset);\n\n\t\t// compute the duration which is either the passed in duration of the buffer.duration - offset\n\t\tconst origDuration = duration;\n\t\tduration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n\t\tlet computedDuration = this.toSeconds(duration);\n\n\t\t// scale it by the playback rate\n\t\tcomputedDuration = computedDuration / this._playbackRate;\n\n\t\t// get the start time\n\t\tstartTime = this.toSeconds(startTime);\n\n\t\t// make the source\n\t\tconst source = new ToneBufferSource({\n\t\t\turl: this._buffer,\n\t\t\tcontext: this.context,\n\t\t\tfadeIn: this.fadeIn,\n\t\t\tfadeOut: this.fadeOut,\n\t\t\tloop: this._loop,\n\t\t\tloopEnd: this._loopEnd,\n\t\t\tloopStart: this._loopStart,\n\t\t\tonended: this._onSourceEnd.bind(this),\n\t\t\tplaybackRate: this._playbackRate,\n\t\t}).connect(this.output);\n\n\t\t// set the looping properties\n\t\tif (!this._loop && !this._synced) {\n\t\t\t// cancel the previous stop\n\t\t\tthis._state.cancel(startTime + computedDuration);\n\t\t\t// if it's not looping, set the state change at the end of the sample\n\t\t\tthis._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n\t\t\t\timplicitEnd: true,\n\t\t\t});\n\t\t}\n\n\t\t// add it to the array of active sources\n\t\tthis._activeSources.add(source);\n\n\t\t// start it\n\t\tif (this._loop && isUndef(origDuration)) {\n\t\t\tsource.start(startTime, computedOffset);\n\t\t} else {\n\t\t\t// subtract the fade out time\n\t\t\tsource.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n\t\t}\n\t}\n\n\t/**\n\t * Stop playback.\n\t */\n\tprotected _stop(time?: Time): void {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tthis._activeSources.forEach(source => source.stop(computedTime));\n\t}\n\n\t/**\n\t * Stop and then restart the player from the beginning (or offset)\n\t * @param  time When the player should start.\n\t * @param  offset The offset from the beginning of the sample to start at.\n\t * @param  duration How long the sample should play. If no duration is given, \n\t * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n\t */\n\trestart(time?: Seconds, offset?: Time, duration?: Time): this {\n\t\tsuper.restart(time, offset, duration);\n\t\treturn this;\n\t}\n\n\tprotected _restart(time?: Seconds, offset?: Time, duration?: Time): void {\n\t\tthis._stop(time);\n\t\tthis._start(time, offset, duration);\n\t}\n\n\t/**\n\t * Seek to a specific time in the player's buffer. If the\n\t * source is no longer playing at that time, it will stop.\n\t * @param offset The time to seek to.\n\t * @param when The time for the seek event to occur.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n\t * \tplayer.start();\n\t * \t// seek to the offset in 1 second from now\n\t * \tplayer.seek(0.4, \"+1\");\n\t * }).toDestination();\n\t */\n\tseek(offset: Time, when?: Time): this {\n\t\tconst computedTime = this.toSeconds(when);\n\t\tif (this._state.getValueAtTime(computedTime) === \"started\") {\n\t\t\tconst computedOffset = this.toSeconds(offset);\n\t\t\t// if it's currently playing, stop it\n\t\t\tthis._stop(computedTime);\n\t\t\t// restart it at the given time\n\t\t\tthis._start(computedTime, computedOffset);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the loop start and end. Will only loop if loop is set to true.\n\t * @param loopStart The loop start time\n\t * @param loopEnd The loop end time\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n\t * // loop between the given points\n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tsetLoopPoints(loopStart: Time, loopEnd: Time): this {\n\t\tthis.loopStart = loopStart;\n\t\tthis.loopEnd = loopEnd;\n\t\treturn this;\n\t}\n\n\t/**\n\t * If loop is true, the loop will start at this position.\n\t */\n\tget loopStart(): Time {\n\t\treturn this._loopStart;\n\t}\n\tset loopStart(loopStart) {\n\t\tthis._loopStart = loopStart;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopStart = loopStart;\n\t\t});\n\t}\n\n\t/**\n\t * If loop is true, the loop will end at this position.\n\t */\n\tget loopEnd(): Time {\n\t\treturn this._loopEnd;\n\t}\n\tset loopEnd(loopEnd) {\n\t\tthis._loopEnd = loopEnd;\n\t\tif (this.buffer.loaded) {\n\t\t\tassertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n\t\t}\n\t\t// get the current source\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loopEnd = loopEnd;\n\t\t});\n\t}\n\n\t/**\n\t * The audio buffer belonging to the player.\n\t */\n\tget buffer(): ToneAudioBuffer {\n\t\treturn this._buffer;\n\t}\n\tset buffer(buffer) {\n\t\tthis._buffer.set(buffer);\n\t}\n\n\t/**\n\t * If the buffer should loop once it's over.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n\t * player.loop = true;\n\t * player.autostart = true;\n\t */\n\tget loop(): boolean {\n\t\treturn this._loop;\n\t}\n\tset loop(loop) {\n\t\t// if no change, do nothing\n\t\tif (this._loop === loop) {\n\t\t\treturn;\n\t\t}\n\t\tthis._loop = loop;\n\t\t// set the loop of all of the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.loop = loop;\n\t\t});\n\t\tif (loop) {\n\t\t\t// remove the next stopEvent\n\t\t\tconst stopEvent = this._state.getNextState(\"stopped\", this.now());\n\t\t\tif (stopEvent) {\n\t\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Normal speed is 1. The pitch will change with the playback rate.\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n\t * // play at 1/4 speed\n\t * player.playbackRate = 0.25;\n\t * // play as soon as the buffer is loaded\n\t * player.autostart = true;\n\t */\n\tget playbackRate(): Positive {\n\t\treturn this._playbackRate;\n\t}\n\tset playbackRate(rate) {\n\t\tthis._playbackRate = rate;\n\t\tconst now = this.now();\n\n\t\t// cancel the stop event since it's at a different time now\n\t\tconst stopEvent = this._state.getNextState(\"stopped\", now);\n\t\tif (stopEvent && stopEvent.implicitEnd) {\n\t\t\tthis._state.cancel(stopEvent.time);\n\t\t\tthis._activeSources.forEach(source => source.cancelStop());\n\t\t}\n\n\t\t// set all the sources\n\t\tthis._activeSources.forEach(source => {\n\t\t\tsource.playbackRate.setValueAtTime(rate, now);\n\t\t});\n\t}\n\n\t/**\n\t * If the buffer should be reversed\n\t * @example\n\t * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n\t * player.autostart = true;\n\t * player.reverse = true;\n\t */\n\tget reverse(): boolean {\n\t\treturn this._buffer.reverse;\n\t}\n\tset reverse(rev) {\n\t\tthis._buffer.reverse = rev;\n\t}\n\n\t/**\n\t * If the buffer is loaded\n\t */\n\tget loaded(): boolean {\n\t\treturn this._buffer.loaded;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\t// disconnect all of the players\n\t\tthis._activeSources.forEach(source => source.dispose());\n\t\tthis._activeSources.clear();\n\t\tthis._buffer.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}