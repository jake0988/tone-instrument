{"ast":null,"code":"import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\n\nexport class Panner3D extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n    this.name = \"Panner3D\";\n    const options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n    this._panner = this.input = this.output = this.context.createPanner(); // set some values\n\n    this.panningModel = options.panningModel;\n    this.maxDistance = options.maxDistance;\n    this.distanceModel = options.distanceModel;\n    this.coneOuterGain = options.coneOuterGain;\n    this.coneOuterAngle = options.coneOuterAngle;\n    this.coneInnerAngle = options.coneInnerAngle;\n    this.refDistance = options.refDistance;\n    this.rolloffFactor = options.rolloffFactor;\n    this.positionX = new Param({\n      context: this.context,\n      param: this._panner.positionX,\n      value: options.positionX\n    });\n    this.positionY = new Param({\n      context: this.context,\n      param: this._panner.positionY,\n      value: options.positionY\n    });\n    this.positionZ = new Param({\n      context: this.context,\n      param: this._panner.positionZ,\n      value: options.positionZ\n    });\n    this.orientationX = new Param({\n      context: this.context,\n      param: this._panner.orientationX,\n      value: options.orientationX\n    });\n    this.orientationY = new Param({\n      context: this.context,\n      param: this._panner.orientationY,\n      value: options.orientationY\n    });\n    this.orientationZ = new Param({\n      context: this.context,\n      param: this._panner.orientationZ,\n      value: options.orientationZ\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      coneInnerAngle: 360,\n      coneOuterAngle: 360,\n      coneOuterGain: 0,\n      distanceModel: \"inverse\",\n      maxDistance: 10000,\n      orientationX: 0,\n      orientationY: 0,\n      orientationZ: 0,\n      panningModel: \"equalpower\",\n      positionX: 0,\n      positionY: 0,\n      positionZ: 0,\n      refDistance: 1,\n      rolloffFactor: 1\n    });\n  }\n  /**\n   * Sets the position of the source in 3d space.\n   */\n\n\n  setPosition(x, y, z) {\n    this.positionX.value = x;\n    this.positionY.value = y;\n    this.positionZ.value = z;\n    return this;\n  }\n  /**\n   * Sets the orientation of the source in 3d space.\n   */\n\n\n  setOrientation(x, y, z) {\n    this.orientationX.value = x;\n    this.orientationY.value = y;\n    this.orientationZ.value = z;\n    return this;\n  }\n  /**\n   * The panning model. Either \"equalpower\" or \"HRTF\".\n   */\n\n\n  get panningModel() {\n    return this._panner.panningModel;\n  }\n\n  set panningModel(val) {\n    this._panner.panningModel = val;\n  }\n  /**\n   * A reference distance for reducing volume as source move further from the listener\n   */\n\n\n  get refDistance() {\n    return this._panner.refDistance;\n  }\n\n  set refDistance(val) {\n    this._panner.refDistance = val;\n  }\n  /**\n   * Describes how quickly the volume is reduced as source moves away from listener.\n   */\n\n\n  get rolloffFactor() {\n    return this._panner.rolloffFactor;\n  }\n\n  set rolloffFactor(val) {\n    this._panner.rolloffFactor = val;\n  }\n  /**\n   * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n   */\n\n\n  get distanceModel() {\n    return this._panner.distanceModel;\n  }\n\n  set distanceModel(val) {\n    this._panner.distanceModel = val;\n  }\n  /**\n   * The angle, in degrees, inside of which there will be no volume reduction\n   */\n\n\n  get coneInnerAngle() {\n    return this._panner.coneInnerAngle;\n  }\n\n  set coneInnerAngle(val) {\n    this._panner.coneInnerAngle = val;\n  }\n  /**\n   * The angle, in degrees, outside of which the volume will be reduced\n   * to a constant value of coneOuterGain\n   */\n\n\n  get coneOuterAngle() {\n    return this._panner.coneOuterAngle;\n  }\n\n  set coneOuterAngle(val) {\n    this._panner.coneOuterAngle = val;\n  }\n  /**\n   * The gain outside of the coneOuterAngle\n   */\n\n\n  get coneOuterGain() {\n    return this._panner.coneOuterGain;\n  }\n\n  set coneOuterGain(val) {\n    this._panner.coneOuterGain = val;\n  }\n  /**\n   * The maximum distance between source and listener,\n   * after which the volume will not be reduced any further.\n   */\n\n\n  get maxDistance() {\n    return this._panner.maxDistance;\n  }\n\n  set maxDistance(val) {\n    this._panner.maxDistance = val;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.disconnect();\n\n    this.orientationX.dispose();\n    this.orientationY.dispose();\n    this.orientationZ.dispose();\n    this.positionX.dispose();\n    this.positionY.dispose();\n    this.positionZ.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","optionsFromArguments","Panner3D","constructor","getDefaults","arguments","options","_panner","input","output","context","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","positionX","param","value","positionY","positionZ","orientationX","orientationY","orientationZ","Object","assign","setPosition","x","y","z","setOrientation","val","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/Panner3D.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Degrees, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport \"../../core/context/Listener\";\n\nexport interface Panner3DOptions extends ToneAudioNodeOptions {\n\tconeInnerAngle: Degrees;\n\tconeOuterAngle: Degrees;\n\tconeOuterGain: GainFactor;\n\tdistanceModel: DistanceModelType;\n\tmaxDistance: number;\n\torientationX: number;\n\torientationY: number;\n\torientationZ: number;\n\tpanningModel: PanningModelType;\n\tpositionX: number;\n\tpositionY: number;\n\tpositionZ: number;\n\trefDistance: number;\n\trolloffFactor: number;\n}\n\n/**\n * A spatialized panner node which supports equalpower or HRTF panning.\n * @category Component\n */\nexport class Panner3D extends ToneAudioNode<Panner3DOptions> {\n\n\treadonly name: string = \"Panner3D\";\n\n\t/**\n\t * The panning object\n\t */\n\tprivate _panner: PannerNode;\n\treadonly input: PannerNode;\n\treadonly output: PannerNode;\n\n\treadonly positionX: Param<\"number\">;\n\treadonly positionY: Param<\"number\">;\n\treadonly positionZ: Param<\"number\">;\n\n\treadonly orientationX: Param<\"number\">;\n\treadonly orientationY: Param<\"number\">;\n\treadonly orientationZ: Param<\"number\">;\n\n\t/**\n\t * @param positionX The initial x position.\n\t * @param positionY The initial y position.\n\t * @param positionZ The initial z position.\n\t */\n\tconstructor(positionX: number, positionY: number, positionZ: number);\n\tconstructor(options?: Partial<Panner3DOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]));\n\t\tconst options = optionsFromArguments(Panner3D.getDefaults(), arguments, [\"positionX\", \"positionY\", \"positionZ\"]);\n\n\t\tthis._panner = this.input = this.output = this.context.createPanner();\n\t\t// set some values\n\t\tthis.panningModel = options.panningModel;\n\t\tthis.maxDistance = options.maxDistance;\n\t\tthis.distanceModel = options.distanceModel;\n\t\tthis.coneOuterGain = options.coneOuterGain;\n\t\tthis.coneOuterAngle = options.coneOuterAngle;\n\t\tthis.coneInnerAngle = options.coneInnerAngle;\n\t\tthis.refDistance = options.refDistance;\n\t\tthis.rolloffFactor = options.rolloffFactor;\n\n\t\tthis.positionX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionX,\n\t\t\tvalue: options.positionX,\n\t\t});\n\t\tthis.positionY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionY,\n\t\t\tvalue: options.positionY,\n\t\t});\n\t\tthis.positionZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.positionZ,\n\t\t\tvalue: options.positionZ,\n\t\t});\n\t\tthis.orientationX = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationX,\n\t\t\tvalue: options.orientationX,\n\t\t});\n\t\tthis.orientationY = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationY,\n\t\t\tvalue: options.orientationY,\n\t\t});\n\t\tthis.orientationZ = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.orientationZ,\n\t\t\tvalue: options.orientationZ,\n\t\t});\n\t}\n\n\tstatic getDefaults(): Panner3DOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconeInnerAngle: 360,\n\t\t\tconeOuterAngle: 360,\n\t\t\tconeOuterGain: 0,\n\t\t\tdistanceModel: \"inverse\" as DistanceModelType,\n\t\t\tmaxDistance: 10000,\n\t\t\torientationX: 0,\n\t\t\torientationY: 0,\n\t\t\torientationZ: 0,\n\t\t\tpanningModel: \"equalpower\" as PanningModelType,\n\t\t\tpositionX: 0,\n\t\t\tpositionY: 0,\n\t\t\tpositionZ: 0,\n\t\t\trefDistance: 1,\n\t\t\trolloffFactor: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Sets the position of the source in 3d space.\n\t */\n\tsetPosition(x: number, y: number, z: number): this {\n\t\tthis.positionX.value = x;\n\t\tthis.positionY.value = y;\n\t\tthis.positionZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the orientation of the source in 3d space.\n\t */\n\tsetOrientation(x: number, y: number, z: number): this {\n\t\tthis.orientationX.value = x;\n\t\tthis.orientationY.value = y;\n\t\tthis.orientationZ.value = z;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The panning model. Either \"equalpower\" or \"HRTF\".\n\t */\n\tget panningModel(): PanningModelType {\n\t\treturn this._panner.panningModel;\n\t}\n\tset panningModel(val) {\n\t\tthis._panner.panningModel = val;\n\t}\n\n\t/**\n\t * A reference distance for reducing volume as source move further from the listener\n\t */\n\tget refDistance(): number {\n\t\treturn this._panner.refDistance;\n\t}\n\tset refDistance(val) {\n\t\tthis._panner.refDistance = val;\n\t}\n\n\t/**\n\t * Describes how quickly the volume is reduced as source moves away from listener.\n\t */\n\tget rolloffFactor(): number {\n\t\treturn this._panner.rolloffFactor;\n\t}\n\tset rolloffFactor(val) {\n\t\tthis._panner.rolloffFactor = val;\n\t}\n\n\t/**\n\t * The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t */\n\tget distanceModel(): DistanceModelType {\n\t\treturn this._panner.distanceModel;\n\t}\n\tset distanceModel(val) {\n\t\tthis._panner.distanceModel = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, inside of which there will be no volume reduction\n\t */\n\tget coneInnerAngle(): Degrees {\n\t\treturn this._panner.coneInnerAngle;\n\t}\n\tset coneInnerAngle(val) {\n\t\tthis._panner.coneInnerAngle = val;\n\t}\n\n\t/**\n\t * The angle, in degrees, outside of which the volume will be reduced\n\t * to a constant value of coneOuterGain\n\t */\n\tget coneOuterAngle(): Degrees {\n\t\treturn this._panner.coneOuterAngle;\n\t}\n\tset coneOuterAngle(val) {\n\t\tthis._panner.coneOuterAngle = val;\n\t}\n\n\t/**\n\t * The gain outside of the coneOuterAngle\n\t */\n\tget coneOuterGain(): GainFactor {\n\t\treturn this._panner.coneOuterGain;\n\t}\n\tset coneOuterGain(val) {\n\t\tthis._panner.coneOuterGain = val;\n\t}\n\n\t/**\n\t * The maximum distance between source and listener,\n\t * after which the volume will not be reduced any further.\n\t */\n\tget maxDistance(): number {\n\t\treturn this._panner.maxDistance;\n\t}\n\tset maxDistance(val) {\n\t\tthis._panner.maxDistance = val;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.orientationX.dispose();\n\t\tthis.orientationY.dispose();\n\t\tthis.orientationZ.dispose();\n\t\tthis.positionX.dispose();\n\t\tthis.positionY.dispose();\n\t\tthis.positionZ.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}