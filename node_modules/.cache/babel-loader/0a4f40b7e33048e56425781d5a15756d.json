{"ast":null,"code":"import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Noise } from \"../source/Noise\";\nimport { Instrument } from \"./Instrument\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].\n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\n\nexport class NoiseSynth extends Instrument {\n  constructor() {\n    super(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n    this.name = \"NoiseSynth\";\n    const options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n    this.noise = new Noise(Object.assign({\n      context: this.context\n    }, options.noise));\n    this.envelope = new AmplitudeEnvelope(Object.assign({\n      context: this.context\n    }, options.envelope)); // connect the noise to the output\n\n    this.noise.chain(this.envelope, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(Instrument.getDefaults(), {\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        decay: 0.1,\n        sustain: 0.0\n      }),\n      noise: Object.assign(omitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())), {\n        type: \"white\"\n      })\n    });\n  }\n  /**\n   * Start the attack portion of the envelopes. Unlike other\n   * instruments, Tone.NoiseSynth doesn't have a note.\n   * @example\n   * const noiseSynth = new Tone.NoiseSynth().toDestination();\n   * noiseSynth.triggerAttack();\n   */\n\n\n  triggerAttack(time) {\n    let velocity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    time = this.toSeconds(time); // the envelopes\n\n    this.envelope.triggerAttack(time, velocity); // start the noise\n\n    this.noise.start(time);\n\n    if (this.envelope.sustain === 0) {\n      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n    }\n\n    return this;\n  }\n  /**\n   * Start the release portion of the envelopes.\n   */\n\n\n  triggerRelease(time) {\n    time = this.toSeconds(time);\n    this.envelope.triggerRelease(time);\n    this.noise.stop(time + this.toSeconds(this.envelope.release));\n    return this;\n  }\n\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 0);\n\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n\n    return this;\n  }\n\n  triggerAttackRelease(duration, time) {\n    let velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    time = this.toSeconds(time);\n    duration = this.toSeconds(duration);\n    this.triggerAttack(time, velocity);\n    this.triggerRelease(time + duration);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.noise.dispose();\n    this.envelope.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["AmplitudeEnvelope","omitFromObject","optionsFromArguments","Noise","Instrument","ToneAudioNode","Envelope","Source","NoiseSynth","constructor","getDefaults","arguments","options","noise","Object","assign","context","envelope","chain","output","keys","decay","sustain","type","triggerAttack","time","velocity","toSeconds","start","stop","attack","triggerRelease","release","sync","_syncState","_syncMethod","triggerAttackRelease","duration","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/instrument/NoiseSynth.ts"],"sourcesContent":["import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { NormalRange, Time } from \"../core/type/Units\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Noise, NoiseOptions } from \"../source/Noise\";\nimport { Instrument, InstrumentOptions } from \"./Instrument\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { Source } from \"../source/Source\";\n\nexport interface NoiseSynthOptions extends InstrumentOptions {\n\tenvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tnoise: Omit<NoiseOptions, keyof ToneAudioNodeOptions>;\n}\n\n/**\n * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]]. \n * ```\n * +-------+   +-------------------+\n * | Noise +>--> AmplitudeEnvelope +>--> Output\n * +-------+   +-------------------+\n * ```\n * @example\n * const noiseSynth = new Tone.NoiseSynth().toDestination();\n * noiseSynth.triggerAttackRelease(\"8n\", 0.05);\n * @category Instrument\n */\nexport class NoiseSynth extends Instrument<NoiseSynthOptions> {\n\n\treadonly name = \"NoiseSynth\";\n\n\t/**\n\t * The noise source.\n\t */\n\treadonly noise: Noise;\n\n\t/**\n\t * The amplitude envelope.\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\tconstructor(options?: RecursivePartial<NoiseSynthOptions>)\n\tconstructor() {\n\t\tsuper(optionsFromArguments(NoiseSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(NoiseSynth.getDefaults(), arguments);\n\t\tthis.noise = new Noise(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.noise));\n\n\t\tthis.envelope = new AmplitudeEnvelope(Object.assign({\n\t\t\tcontext: this.context,\n\t\t}, options.envelope));\n\n\t\t// connect the noise to the output\n\t\tthis.noise.chain(this.envelope, this.output);\n\t}\n\n\tstatic getDefaults(): NoiseSynthOptions {\n\t\treturn Object.assign(Instrument.getDefaults(), {\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tdecay: 0.1,\n\t\t\t\t\tsustain: 0.0,\n\t\t\t\t},\n\t\t\t),\n\t\t\tnoise: Object.assign(\n\t\t\t\tomitFromObject(Noise.getDefaults(), Object.keys(Source.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\ttype: \"white\",\n\t\t\t\t},\n\t\t\t),\n\t\t});\n\t}\n\n\t/**\n\t * Start the attack portion of the envelopes. Unlike other\n\t * instruments, Tone.NoiseSynth doesn't have a note.\n\t * @example\n\t * const noiseSynth = new Tone.NoiseSynth().toDestination();\n\t * noiseSynth.triggerAttack();\n\t */\n\ttriggerAttack(time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\t// the envelopes\n\t\tthis.envelope.triggerAttack(time, velocity);\n\t\t// start the noise\n\t\tthis.noise.start(time);\n\t\tif (this.envelope.sustain === 0) {\n\t\t\tthis.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the release portion of the envelopes.\n\t */\n\ttriggerRelease(time?: Time): this {\n\t\ttime = this.toSeconds(time);\n\t\tthis.envelope.triggerRelease(time);\n\t\tthis.noise.stop(time + this.toSeconds(this.envelope.release));\n\t\treturn this;\n\t}\n\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 0);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\ttriggerAttackRelease(duration: Time, time?: Time, velocity: NormalRange = 1): this {\n\t\ttime = this.toSeconds(time);\n\t\tduration = this.toSeconds(duration);\n\t\tthis.triggerAttack(time, velocity);\n\t\tthis.triggerRelease(time + duration);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.noise.dispose();\n\t\tthis.envelope.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}