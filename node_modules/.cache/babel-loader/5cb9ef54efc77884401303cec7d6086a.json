{"ast":null,"code":"import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\n\nexport class Panner extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n    this.name = \"Panner\";\n    /**\n     * the panner node\n     */\n\n    this._panner = this.context.createStereoPanner();\n    this.input = this._panner;\n    this.output = this._panner;\n    const options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n    this.pan = new Param({\n      context: this.context,\n      param: this._panner.pan,\n      value: options.pan,\n      minValue: -1,\n      maxValue: 1\n    }); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n    this._panner.channelCount = options.channelCount;\n    this._panner.channelCountMode = \"explicit\"; // initial value\n\n    readOnly(this, \"pan\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.disconnect();\n\n    this.pan.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,0BAAtB;AACA,SAASC,aAAT,QAAoD,kCAApD;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAOA;;;;;;;;;;;;AAWA,OAAM,MAAOC,MAAP,SAAsBH,aAAtB,CAAsD;EA+B3DI;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACE,MAAM,CAACI,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,KAAD,CAAlC,CAAlC,CAAN;IA9BQ,YAAe,QAAf;IAET;;;;IAGQ,eAA4B,KAAKC,OAAL,CAAaC,kBAAb,EAA5B;IACC,aAA0B,KAAKC,OAA/B;IACA,cAA2B,KAAKA,OAAhC;IAwBR,MAAMC,OAAO,GAAGX,oBAAoB,CAACE,MAAM,CAACI,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,KAAD,CAAlC,CAApC;IAEA,KAAKK,GAAL,GAAW,IAAId,KAAJ,CAAU;MACpBU,OAAO,EAAE,KAAKA,OADM;MAEpBK,KAAK,EAAE,KAAKH,OAAL,CAAaE,GAFA;MAGpBE,KAAK,EAAEH,OAAO,CAACC,GAHK;MAIpBG,QAAQ,EAAE,CAAC,CAJS;MAKpBC,QAAQ,EAAE;IALU,CAAV,CAAX,CAJD,CAYC;IACA;IACA;;IACA,KAAKN,OAAL,CAAaO,YAAb,GAA4BN,OAAO,CAACM,YAApC;IACA,KAAKP,OAAL,CAAaQ,gBAAb,GAAgC,UAAhC,CAhBD,CAkBC;;IACAjB,QAAQ,CAAC,IAAD,EAAO,KAAP,CAAR;EACA;;EAEiB,OAAXK,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcN,aAAa,CAACO,WAAd,EAAd,EAA2C;MACjDM,GAAG,EAAE,CAD4C;MAEjDK,YAAY,EAAE;IAFmC,CAA3C,CAAP;EAIA;;EAEDE,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKT,OAAL,CAAaU,UAAb;;IACA,KAAKR,GAAL,CAASO,OAAT;IACA,OAAO,IAAP;EACA;;AAjE0D","names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Panner","constructor","Object","assign","getDefaults","arguments","context","createStereoPanner","_panner","options","pan","param","value","minValue","maxValue","channelCount","channelCountMode","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/Panner.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface TonePannerOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tchannelCount: number;\n}\n\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\nexport class Panner extends ToneAudioNode<TonePannerOptions> {\n\n\treadonly name: string = \"Panner\";\n\n\t/**\n\t * the panner node\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\treadonly input: StereoPannerNode = this._panner;\n\treadonly output: StereoPannerNode = this._panner;\n\n\t/**\n\t * The pan control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \t// pan hard right\n\t * \tconst panner = new Tone.Panner(1).toDestination();\n\t * \t// pan hard left\n\t * \tpanner.pan.setValueAtTime(-1, 0.25);\n\t * \tconst osc = new Tone.Oscillator(50, \"triangle\").connect(panner).start();\n\t * }, 0.5, 2);\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\tconstructor(options?: Partial<TonePannerOptions>);\n\t/**\n\t * @param pan The initial panner value (Defaults to 0 = \"center\").\n\t */\n\tconstructor(pan?: AudioRange);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"])));\n\t\tconst options = optionsFromArguments(Panner.getDefaults(), arguments, [\"pan\"]);\n\n\t\tthis.pan = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._panner.pan,\n\t\t\tvalue: options.pan,\n\t\t\tminValue: -1,\n\t\t\tmaxValue: 1,\n\t\t});\n\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = options.channelCount;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\n\t\t// initial value\n\t\treadOnly(this, \"pan\");\n\t}\n\n\tstatic getDefaults(): TonePannerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis.pan.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}