{"ast":null,"code":"import { Monophonic } from \"./Monophonic\";\nimport { MonoSynth } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\n\nexport class DuoSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n    this.name = \"DuoSynth\";\n    const options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n    this.voice0 = new MonoSynth(Object.assign(options.voice0, {\n      context: this.context,\n      onsilence: () => this.onsilence(this)\n    }));\n    this.voice1 = new MonoSynth(Object.assign(options.voice1, {\n      context: this.context\n    }));\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    });\n    this._vibrato = new LFO({\n      frequency: options.vibratoRate,\n      context: this.context,\n      min: -50,\n      max: 50\n    }); // start the vibrato immediately\n\n    this._vibrato.start();\n\n    this.vibratoRate = this._vibrato.frequency;\n    this._vibratoGain = new Gain({\n      context: this.context,\n      units: \"normalRange\",\n      gain: options.vibratoAmount\n    });\n    this.vibratoAmount = this._vibratoGain.gain;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\",\n      value: 440\n    });\n    this.detune = new Signal({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune\n    }); // control the two voices frequency\n\n    this.frequency.connect(this.voice0.frequency);\n    this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n    this._vibrato.connect(this._vibratoGain);\n\n    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n    this.detune.fan(this.voice0.detune, this.voice1.detune);\n    this.voice0.connect(this.output);\n    this.voice1.connect(this.output);\n    readOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), {\n      vibratoAmount: 0.5,\n      vibratoRate: 5,\n      harmonicity: 1.5,\n      voice0: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      }),\n      voice1: deepMerge(omitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())), {\n        filterEnvelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        },\n        envelope: {\n          attack: 0.01,\n          decay: 0.0,\n          sustain: 1,\n          release: 0.5\n        }\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this.voice1._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this.voice0._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this.voice1._triggerEnvelopeRelease(time);\n\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    this.voice0.dispose();\n    this.voice1.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n\n    this._vibrato.dispose();\n\n    this.vibratoRate.dispose();\n\n    this._vibratoGain.dispose();\n\n    this.harmonicity.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Monophonic","MonoSynth","Signal","readOnly","LFO","Gain","Multiply","deepMerge","omitFromObject","optionsFromArguments","DuoSynth","constructor","getDefaults","arguments","options","voice0","Object","assign","context","onsilence","voice1","harmonicity","units","value","_vibrato","frequency","vibratoRate","min","max","start","_vibratoGain","gain","vibratoAmount","detune","connect","chain","fan","output","getLevelAtTime","time","toSeconds","envelope","getValueAtTime","keys","filterEnvelope","attack","decay","sustain","release","_triggerEnvelopeAttack","velocity","_triggerEnvelopeRelease","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/instrument/DuoSynth.ts"],"sourcesContent":["import { Monophonic, MonophonicOptions } from \"./Monophonic\";\nimport { MonoSynth, MonoSynthOptions } from \"./MonoSynth\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain, } from \"../core/context/Gain\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Frequency, NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { deepMerge, omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface DuoSynthOptions extends MonophonicOptions {\n\tvoice0: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tvoice1: Omit<MonoSynthOptions, keyof MonophonicOptions>;\n\tharmonicity: Positive;\n\tvibratoRate: Frequency;\n\tvibratoAmount: Positive;\n}\n\n/**\n * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the\n * frequency ratio between the two voices and vibrato effect.\n * @example\n * const duoSynth = new Tone.DuoSynth().toDestination();\n * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n * @category Instrument\n */\nexport class DuoSynth extends Monophonic<DuoSynthOptions> {\n\n\treadonly name: string = \"DuoSynth\";\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * the first voice\n\t */\n\treadonly voice0: MonoSynth;\n\n\t/**\n\t * the second voice\n\t */\n\treadonly voice1: MonoSynth;\n\n\t/**\n\t * The amount of vibrato\n\t */\n\tpublic vibratoAmount: Param<\"normalRange\">;\n\n\t/**\n\t * the vibrato frequency\n\t */\n\tpublic vibratoRate: Signal<\"frequency\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const duoSynth = new Tone.DuoSynth().toDestination();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t * // pitch voice1 an octave below voice0\n\t * duoSynth.harmonicity.value = 0.5;\n\t */\n\tpublic harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * The vibrato LFO.\n\t */\n\tprivate _vibrato: LFO;\n\n\t/**\n\t * the vibrato gain\n\t */\n\tprivate _vibratoGain: Gain<\"normalRange\">;\n\n\tconstructor(options?: RecursivePartial<DuoSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(DuoSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(DuoSynth.getDefaults(), arguments);\n\n\t\tthis.voice0 = new MonoSynth(Object.assign(options.voice0, {\n\t\t\tcontext: this.context,\n\t\t\tonsilence: () => this.onsilence(this)\n\t\t}));\n\t\tthis.voice1 = new MonoSynth(Object.assign(options.voice1, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\tthis._vibrato = new LFO({\n\t\t\tfrequency: options.vibratoRate,\n\t\t\tcontext: this.context,\n\t\t\tmin: -50,\n\t\t\tmax: 50\n\t\t});\n\t\t// start the vibrato immediately\n\t\tthis._vibrato.start();\n\t\tthis.vibratoRate = this._vibrato.frequency;\n\t\tthis._vibratoGain = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tgain: options.vibratoAmount\n\t\t});\n\t\tthis.vibratoAmount = this._vibratoGain.gain;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: 440\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this.voice0.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this.voice1.frequency);\n\n\t\tthis._vibrato.connect(this._vibratoGain);\n\t\tthis._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.detune.fan(this.voice0.detune, this.voice1.detune);\n\n\t\tthis.voice0.connect(this.output);\n\t\tthis.voice1.connect(this.output);\n\n\t\treadOnly(this, [\"voice0\", \"voice1\", \"frequency\", \"vibratoAmount\", \"vibratoRate\"]);\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);\n\t}\n\n\tstatic getDefaults(): DuoSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), {\n\t\t\tvibratoAmount: 0.5,\n\t\t\tvibratoRate: 5,\n\t\t\tharmonicity: 1.5,\n\t\t\tvoice0: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\tvoice1: deepMerge(\n\t\t\t\tomitFromObject(MonoSynth.getDefaults(), Object.keys(Monophonic.getDefaults())),\n\t\t\t\t{\n\n\t\t\t\t\tfilterEnvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t},\n\t\t\t\t\tenvelope: {\n\t\t\t\t\t\tattack: 0.01,\n\t\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\t\tsustain: 1,\n\t\t\t\t\t\trelease: 0.5\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t}) as DuoSynthOptions;\n\t}\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis.voice0._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis.voice1._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.voice0.dispose();\n\t\tthis.voice1.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis._vibrato.dispose();\n\t\tthis.vibratoRate.dispose();\n\t\tthis._vibratoGain.dispose();\n\t\tthis.harmonicity.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}