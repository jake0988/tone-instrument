{"ast":null,"code":"import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Envelope } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { Source } from \"../source/Source\";\nimport { Synth } from \"./Synth\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * Base class for both AM and FM synths\n */\n\nexport class ModulationSynth extends Monophonic {\n  constructor() {\n    super(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n    this.name = \"ModulationSynth\";\n    const options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n    this._carrier = new Synth({\n      context: this.context,\n      oscillator: options.oscillator,\n      envelope: options.envelope,\n      onsilence: () => this.onsilence(this),\n      volume: -10\n    });\n    this._modulator = new Synth({\n      context: this.context,\n      oscillator: options.modulation,\n      envelope: options.modulationEnvelope,\n      volume: -10\n    });\n    this.oscillator = this._carrier.oscillator;\n    this.envelope = this._carrier.envelope;\n    this.modulation = this._modulator.oscillator;\n    this.modulationEnvelope = this._modulator.envelope;\n    this.frequency = new Signal({\n      context: this.context,\n      units: \"frequency\"\n    });\n    this.detune = new Signal({\n      context: this.context,\n      value: options.detune,\n      units: \"cents\"\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      value: options.harmonicity,\n      minValue: 0\n    });\n    this._modulationNode = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    readOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Monophonic.getDefaults(), {\n      harmonicity: 3,\n      oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"sine\"\n      }),\n      envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.01,\n        decay: 0.01,\n        sustain: 1,\n        release: 0.5\n      }),\n      modulation: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [...Object.keys(Source.getDefaults()), \"frequency\", \"detune\"]), {\n        type: \"square\"\n      }),\n      modulationEnvelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n        attack: 0.5,\n        decay: 0.0,\n        sustain: 1,\n        release: 0.5\n      })\n    });\n  }\n  /**\n   * Trigger the attack portion of the note\n   */\n\n\n  _triggerEnvelopeAttack(time, velocity) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeAttack(time, velocity);\n  }\n  /**\n   * Trigger the release portion of the note\n   */\n\n\n  _triggerEnvelopeRelease(time) {\n    // @ts-ignore\n    this._carrier._triggerEnvelopeRelease(time); // @ts-ignore\n\n\n    this._modulator._triggerEnvelopeRelease(time);\n\n    return this;\n  }\n\n  getLevelAtTime(time) {\n    time = this.toSeconds(time);\n    return this.envelope.getValueAtTime(time);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._modulationNode.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,IAAT,QAAqB,sBAArB;AAEA,SAASC,QAAT,QAA0C,gCAA1C;AACA,SAASC,aAAT,QAAoD,+BAApD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,cAAT,QAA+B,qCAA/B;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,KAAT,QAAoC,SAApC;AAEA,SAASC,QAAT,QAA2C,wBAA3C;AACA,SAASC,cAAT,EAAyBC,oBAAzB,QAAqD,uBAArD;AAOA;;;;AAGA,OAAM,MAAgBC,eAAhB,SAAgFP,UAAhF,CAAmG;EA8DxGQ;IACC,MAAMF,oBAAoB,CAACC,eAAe,CAACE,WAAhB,EAAD,EAAgCC,SAAhC,CAA1B;IA7DQ,YAAe,iBAAf;IA8DR,MAAMC,OAAO,GAAGL,oBAAoB,CAACC,eAAe,CAACE,WAAhB,EAAD,EAAgCC,SAAhC,CAApC;IAEA,KAAKE,QAAL,GAAgB,IAAIT,KAAJ,CAAU;MACzBU,OAAO,EAAE,KAAKA,OADW;MAEzBC,UAAU,EAAEH,OAAO,CAACG,UAFK;MAGzBC,QAAQ,EAAEJ,OAAO,CAACI,QAHO;MAIzBC,SAAS,EAAE,MAAM,KAAKA,SAAL,CAAe,IAAf,CAJQ;MAKzBC,MAAM,EAAE,CAAC;IALgB,CAAV,CAAhB;IAOA,KAAKC,UAAL,GAAkB,IAAIf,KAAJ,CAAU;MAC3BU,OAAO,EAAE,KAAKA,OADa;MAE3BC,UAAU,EAAEH,OAAO,CAACQ,UAFO;MAG3BJ,QAAQ,EAAEJ,OAAO,CAACS,kBAHS;MAI3BH,MAAM,EAAE,CAAC;IAJkB,CAAV,CAAlB;IAOA,KAAKH,UAAL,GAAkB,KAAKF,QAAL,CAAcE,UAAhC;IACA,KAAKC,QAAL,GAAgB,KAAKH,QAAL,CAAcG,QAA9B;IACA,KAAKI,UAAL,GAAkB,KAAKD,UAAL,CAAgBJ,UAAlC;IACA,KAAKM,kBAAL,GAA0B,KAAKF,UAAL,CAAgBH,QAA1C;IAEA,KAAKM,SAAL,GAAiB,IAAI1B,MAAJ,CAAW;MAC3BkB,OAAO,EAAE,KAAKA,OADa;MAE3BS,KAAK,EAAE;IAFoB,CAAX,CAAjB;IAIA,KAAKC,MAAL,GAAc,IAAI5B,MAAJ,CAAW;MACxBkB,OAAO,EAAE,KAAKA,OADU;MAExBW,KAAK,EAAEb,OAAO,CAACY,MAFS;MAGxBD,KAAK,EAAE;IAHiB,CAAX,CAAd;IAKA,KAAKG,WAAL,GAAmB,IAAI7B,QAAJ,CAAa;MAC/BiB,OAAO,EAAE,KAAKA,OADiB;MAE/BW,KAAK,EAAEb,OAAO,CAACc,WAFgB;MAG/BC,QAAQ,EAAE;IAHqB,CAAb,CAAnB;IAKA,KAAKC,eAAL,GAAuB,IAAI9B,IAAJ,CAAS;MAC/BgB,OAAO,EAAE,KAAKA,OADiB;MAE/Be,IAAI,EAAE;IAFyB,CAAT,CAAvB;IAKAxB,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,aAAd,EAA6B,YAA7B,EAA2C,UAA3C,EAAuD,YAAvD,EAAqE,oBAArE,EAA2F,QAA3F,CAAP,CAAR;EACA;;EAEiB,OAAXK,WAAW;IACjB,OAAOoB,MAAM,CAACC,MAAP,CAAc9B,UAAU,CAACS,WAAX,EAAd,EAAwC;MAC9CgB,WAAW,EAAE,CADiC;MAE9CX,UAAU,EAAEe,MAAM,CAACC,MAAP,CACXzB,cAAc,CAACJ,cAAc,CAACQ,WAAf,EAAD,EAA+B,CAC5C,GAAGoB,MAAM,CAACE,IAAP,CAAY7B,MAAM,CAACO,WAAP,EAAZ,CADyC,EAE5C,WAF4C,EAG5C,QAH4C,CAA/B,CADH,EAMX;QACCuB,IAAI,EAAE;MADP,CANW,CAFkC;MAY9CjB,QAAQ,EAAEc,MAAM,CAACC,MAAP,CACTzB,cAAc,CACbP,QAAQ,CAACW,WAAT,EADa,EAEboB,MAAM,CAACE,IAAP,CAAYhC,aAAa,CAACU,WAAd,EAAZ,CAFa,CADL,EAKT;QACCwB,MAAM,EAAE,IADT;QAECC,KAAK,EAAE,IAFR;QAGCC,OAAO,EAAE,CAHV;QAICC,OAAO,EAAE;MAJV,CALS,CAZoC;MAwB9CjB,UAAU,EAAEU,MAAM,CAACC,MAAP,CACXzB,cAAc,CAACJ,cAAc,CAACQ,WAAf,EAAD,EAA+B,CAC5C,GAAGoB,MAAM,CAACE,IAAP,CAAY7B,MAAM,CAACO,WAAP,EAAZ,CADyC,EAE5C,WAF4C,EAG5C,QAH4C,CAA/B,CADH,EAMX;QACCuB,IAAI,EAAE;MADP,CANW,CAxBkC;MAkC9CZ,kBAAkB,EAAES,MAAM,CAACC,MAAP,CACnBzB,cAAc,CACbP,QAAQ,CAACW,WAAT,EADa,EAEboB,MAAM,CAACE,IAAP,CAAYhC,aAAa,CAACU,WAAd,EAAZ,CAFa,CADK,EAKnB;QACCwB,MAAM,EAAE,GADT;QAECC,KAAK,EAAE,GAFR;QAGCC,OAAO,EAAE,CAHV;QAICC,OAAO,EAAE;MAJV,CALmB;IAlC0B,CAAxC,CAAP;EA+CA;EAED;;;;;EAGUC,sBAAsB,CAACC,IAAD,EAAgBC,QAAhB,EAAgC;IAC/D;IACA,KAAK3B,QAAL,CAAcyB,sBAAd,CAAqCC,IAArC,EAA2CC,QAA3C,EAF+D,CAG/D;;;IACA,KAAKrB,UAAL,CAAgBmB,sBAAhB,CAAuCC,IAAvC,EAA6CC,QAA7C;EACA;EAED;;;;;EAGUC,uBAAuB,CAACF,IAAD,EAAc;IAC9C;IACA,KAAK1B,QAAL,CAAc4B,uBAAd,CAAsCF,IAAtC,EAF8C,CAG9C;;;IACA,KAAKpB,UAAL,CAAgBsB,uBAAhB,CAAwCF,IAAxC;;IACA,OAAO,IAAP;EACA;;EAEDG,cAAc,CAACH,IAAD,EAAW;IACxBA,IAAI,GAAG,KAAKI,SAAL,CAAeJ,IAAf,CAAP;IACA,OAAO,KAAKvB,QAAL,CAAc4B,cAAd,CAA6BL,IAA7B,CAAP;EACA;;EAEDM,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKhC,QAAL,CAAcgC,OAAd;;IACA,KAAK1B,UAAL,CAAgB0B,OAAhB;;IACA,KAAKvB,SAAL,CAAeuB,OAAf;IACA,KAAKrB,MAAL,CAAYqB,OAAZ;IACA,KAAKnB,WAAL,CAAiBmB,OAAjB;;IACA,KAAKjB,eAAL,CAAqBiB,OAArB;;IACA,OAAO,IAAP;EACA;;AAhMuG","names":["Signal","Multiply","Gain","Envelope","ToneAudioNode","Monophonic","OmniOscillator","Source","Synth","readOnly","omitFromObject","optionsFromArguments","ModulationSynth","constructor","getDefaults","arguments","options","_carrier","context","oscillator","envelope","onsilence","volume","_modulator","modulation","modulationEnvelope","frequency","units","detune","value","harmonicity","minValue","_modulationNode","gain","Object","assign","keys","type","attack","decay","sustain","release","_triggerEnvelopeAttack","time","velocity","_triggerEnvelopeRelease","getLevelAtTime","toSeconds","getValueAtTime","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/instrument/ModulationSynth.ts"],"sourcesContent":["import { Signal } from \"../signal/Signal\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Gain } from \"../core/context/Gain\";\nimport { NormalRange, Positive, Seconds, Time } from \"../core/type/Units\";\nimport { Envelope, EnvelopeOptions } from \"../component/envelope/Envelope\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Monophonic } from \"./Monophonic\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator\";\nimport { OmniOscillatorSynthOptions } from \"../source/oscillator/OscillatorInterface\";\nimport { Source } from \"../source/Source\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults\";\n\nexport interface ModulationSynthOptions extends SynthOptions {\n\tharmonicity: Positive;\n\tmodulationEnvelope: Omit<EnvelopeOptions, keyof ToneAudioNodeOptions>;\n\tmodulation: OmniOscillatorSynthOptions;\n}\n/**\n * Base class for both AM and FM synths\n */\nexport abstract class ModulationSynth<Options extends ModulationSynthOptions> extends Monophonic<Options> {\n\n\treadonly name: string = \"ModulationSynth\";\n\n\t/**\n\t * The carrier voice.\n\t */\n\tprotected _carrier: Synth;\n\n\t/**\n\t * The modulator voice.\n\t */\n\n\tprotected _modulator: Synth;\n\n\t/**\n\t * The carrier's oscillator\n\t */\n\treadonly oscillator: OmniOscillator<any>;\n\n\t/**\n\t * The carrier's envelope\n\t */\n\treadonly envelope: AmplitudeEnvelope;\n\n\t/**\n\t * The modulator's oscillator which is applied to the amplitude of the oscillator\n\t */\n\treadonly modulation: OmniOscillator<any>;\n\n\t/**\n\t * The modulator's envelope\n\t */\n\treadonly modulationEnvelope: AmplitudeEnvelope;\n\n\t/**\n\t * The frequency control\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Harmonicity is the ratio between the two voices. A harmonicity of\n\t * 1 is no change. Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * // pitch the modulator an octave below oscillator\n\t * amSynth.harmonicity.value = 0.5;\n\t * amSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */\n\treadonly harmonicity: Multiply;\n\n\t/**\n\t * The node where the modulation happens\n\t */\n\tprotected _modulationNode: Gain;\n\n\tconstructor(options?: RecursivePartial<ModulationSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(ModulationSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(ModulationSynth.getDefaults(), arguments);\n\n\t\tthis._carrier = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.oscillator,\n\t\t\tenvelope: options.envelope,\n\t\t\tonsilence: () => this.onsilence(this),\n\t\t\tvolume: -10,\n\t\t});\n\t\tthis._modulator = new Synth({\n\t\t\tcontext: this.context,\n\t\t\toscillator: options.modulation,\n\t\t\tenvelope: options.modulationEnvelope,\n\t\t\tvolume: -10,\n\t\t});\n\n\t\tthis.oscillator = this._carrier.oscillator;\n\t\tthis.envelope = this._carrier.envelope;\n\t\tthis.modulation = this._modulator.oscillator;\n\t\tthis.modulationEnvelope = this._modulator.envelope;\n\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.detune = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.detune,\n\t\t\tunits: \"cents\"\n\t\t});\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.harmonicity,\n\t\t\tminValue: 0,\n\t\t});\n\t\tthis._modulationNode = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: 0,\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"harmonicity\", \"oscillator\", \"envelope\", \"modulation\", \"modulationEnvelope\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): ModulationSynthOptions {\n\t\treturn Object.assign(Monophonic.getDefaults(), {\n\t\t\tharmonicity: 3,\n\t\t\toscillator: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"sine\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tenvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.01,\n\t\t\t\t\tdecay: 0.01,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t),\n\t\t\tmodulation: Object.assign(\n\t\t\t\tomitFromObject(OmniOscillator.getDefaults(), [\n\t\t\t\t\t...Object.keys(Source.getDefaults()),\n\t\t\t\t\t\"frequency\",\n\t\t\t\t\t\"detune\"\n\t\t\t\t]),\n\t\t\t\t{\n\t\t\t\t\ttype: \"square\"\n\t\t\t\t}\n\t\t\t) as OmniOscillatorSynthOptions,\n\t\t\tmodulationEnvelope: Object.assign(\n\t\t\t\tomitFromObject(\n\t\t\t\t\tEnvelope.getDefaults(),\n\t\t\t\t\tObject.keys(ToneAudioNode.getDefaults())\n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tattack: 0.5,\n\t\t\t\t\tdecay: 0.0,\n\t\t\t\t\tsustain: 1,\n\t\t\t\t\trelease: 0.5\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t}\n\n\t/**\n\t * Trigger the attack portion of the note\n\t */\n\tprotected _triggerEnvelopeAttack(time: Seconds, velocity: number): void {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeAttack(time, velocity);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeAttack(time, velocity);\n\t}\n\n\t/**\n\t * Trigger the release portion of the note\n\t */\n\tprotected _triggerEnvelopeRelease(time: Seconds) {\n\t\t// @ts-ignore\n\t\tthis._carrier._triggerEnvelopeRelease(time);\n\t\t// @ts-ignore\n\t\tthis._modulator._triggerEnvelopeRelease(time);\n\t\treturn this;\n\t}\n\n\tgetLevelAtTime(time: Time): NormalRange {\n\t\ttime = this.toSeconds(time);\n\t\treturn this.envelope.getValueAtTime(time);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._modulationNode.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}