{"ast":null,"code":"import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal } from \"./Signal\";\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\n\nexport class Add extends Signal {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n    this.override = false;\n    this.name = \"Add\";\n    /**\n     * the summing node\n     */\n\n    this._sum = new Gain({\n      context: this.context\n    });\n    this.input = this._sum;\n    this.output = this._sum;\n    /**\n     * The value which is added to the input signal\n     */\n\n    this.addend = this._param;\n    connectSeries(this._constantSource, this._sum);\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      value: 0\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._sum.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAA8B,+BAA9B;AACA,SAASC,IAAT,QAAqB,sBAArB;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,MAAT,QAAsC,UAAtC;AAEA;;;;;;;;;;;;;;;;;AAgBA,OAAM,MAAOC,GAAP,SAAmBD,MAAnB,CAAyB;EAuB9BE;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACE,GAAG,CAACI,WAAJ,EAAD,EAAoBC,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAAlC,CAAN;IAtBD,gBAAW,KAAX;IAES,YAAe,KAAf;IAET;;;;IAGQ,YAAa,IAAIR,IAAJ,CAAS;MAAES,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAb;IACC,aAAQ,KAAKC,IAAb;IACA,cAAS,KAAKA,IAAd;IAET;;;;IAGS,cAA0B,KAAKC,MAA/B;IAURZ,aAAa,CAAC,KAAKa,eAAN,EAAuB,KAAKF,IAA5B,CAAb;EACA;;EAEiB,OAAXH,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcJ,MAAM,CAACK,WAAP,EAAd,EAAoC;MAC1CM,KAAK,EAAE;IADmC,CAApC,CAAP;EAGA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKJ,IAAL,CAAUI,OAAV;;IACA,OAAO,IAAP;EACA;;AAvC6B","names":["connectSeries","Gain","optionsFromArguments","Signal","Add","constructor","Object","assign","getDefaults","arguments","context","_sum","_param","_constantSource","value","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/Add.ts"],"sourcesContent":["import { connectSeries } from \"../core/context/ToneAudioNode\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Param } from \"../core/context/Param\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Signal, SignalOptions } from \"./Signal\";\n\n/**\n * Add a signal and a number or two signals. When no value is\n * passed into the constructor, Tone.Add will sum input and `addend`\n * If a value is passed into the constructor, the it will be added to the input.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst add = new Tone.Add(2).toDestination();\n * \tadd.addend.setValueAtTime(1, 0.2);\n * \tconst signal = new Tone.Signal(2);\n * \t// add a signal and a scalar\n * \tsignal.connect(add);\n * \tsignal.setValueAtTime(1, 0.1);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Add extends Signal {\n\n\toverride = false;\n\n\treadonly name: string = \"Add\";\n\n\t/**\n\t * the summing node\n\t */\n\tprivate _sum: Gain = new Gain({ context: this.context });\n\treadonly input = this._sum;\n\treadonly output = this._sum;\n\n\t/**\n\t * The value which is added to the input signal\n\t */\n\treadonly addend: Param<\"number\"> = this._param;\n\n\t/**\n\t * @param value If no value is provided, will sum the input and [[addend]].\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<SignalOptions<\"number\">>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Add.getDefaults(), arguments, [\"value\"])));\n\n\t\tconnectSeries(this._constantSource, this._sum);\n\t}\n\n\tstatic getDefaults(): SignalOptions<\"number\"> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._sum.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}