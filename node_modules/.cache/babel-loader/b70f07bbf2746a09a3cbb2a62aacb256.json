{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\n\nexport class StereoFeedbackEffect extends StereoEffect {\n  constructor(options) {\n    super(options);\n    this.feedback = new Signal({\n      context: this.context,\n      value: options.feedback,\n      units: \"normalRange\"\n    });\n    this._feedbackL = new Gain({\n      context: this.context\n    });\n    this._feedbackR = new Gain({\n      context: this.context\n    });\n    this._feedbackSplit = new Split({\n      context: this.context,\n      channels: 2\n    });\n    this._feedbackMerge = new Merge({\n      context: this.context,\n      channels: 2\n    });\n\n    this._merge.connect(this._feedbackSplit);\n\n    this._feedbackMerge.connect(this._split); // the left output connected to the left input\n\n\n    this._feedbackSplit.connect(this._feedbackL, 0, 0);\n\n    this._feedbackL.connect(this._feedbackMerge, 0, 0); // the right output connected to the right input\n\n\n    this._feedbackSplit.connect(this._feedbackR, 1, 0);\n\n    this._feedbackR.connect(this._feedbackMerge, 0, 1); // the feedback control\n\n\n    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n    readOnly(this, [\"feedback\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      feedback: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.feedback.dispose();\n\n    this._feedbackL.dispose();\n\n    this._feedbackR.dispose();\n\n    this._feedbackSplit.dispose();\n\n    this._feedbackMerge.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAAkD,gBAAlD;AAEA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AAMA;;;;AAGA,OAAM,MAAOC,oBAAP,SAAiFN,YAAjF,CAAsG;EA6B3GO,YAAYC,OAAZ,EAAgD;IAE/C,MAAMA,OAAN;IAEA,KAAKC,QAAL,GAAgB,IAAIR,MAAJ,CAAW;MAC1BS,OAAO,EAAE,KAAKA,OADY;MAE1BC,KAAK,EAAEH,OAAO,CAACC,QAFW;MAG1BG,KAAK,EAAE;IAHmB,CAAX,CAAhB;IAKA,KAAKC,UAAL,GAAkB,IAAIX,IAAJ,CAAS;MAAEQ,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAlB;IACA,KAAKI,UAAL,GAAkB,IAAIZ,IAAJ,CAAS;MAAEQ,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAlB;IAEA,KAAKK,cAAL,GAAsB,IAAIX,KAAJ,CAAU;MAAEM,OAAO,EAAE,KAAKA,OAAhB;MAAyBM,QAAQ,EAAE;IAAnC,CAAV,CAAtB;IACA,KAAKC,cAAL,GAAsB,IAAIZ,KAAJ,CAAU;MAAEK,OAAO,EAAE,KAAKA,OAAhB;MAAyBM,QAAQ,EAAE;IAAnC,CAAV,CAAtB;;IAEA,KAAKE,MAAL,CAAYC,OAAZ,CAAoB,KAAKJ,cAAzB;;IACA,KAAKE,cAAL,CAAoBE,OAApB,CAA4B,KAAKC,MAAjC,EAhB+C,CAkB/C;;;IACA,KAAKL,cAAL,CAAoBI,OAApB,CAA4B,KAAKN,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;IACA,KAAKA,UAAL,CAAgBM,OAAhB,CAAwB,KAAKF,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EApB+C,CAsB/C;;;IACA,KAAKF,cAAL,CAAoBI,OAApB,CAA4B,KAAKL,UAAjC,EAA6C,CAA7C,EAAgD,CAAhD;;IACA,KAAKA,UAAL,CAAgBK,OAAhB,CAAwB,KAAKF,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EAxB+C,CA0B/C;;;IACA,KAAKR,QAAL,CAAcY,GAAd,CAAkB,KAAKR,UAAL,CAAgBS,IAAlC,EAAwC,KAAKR,UAAL,CAAgBQ,IAAxD;IACAnB,QAAQ,CAAC,IAAD,EAAO,CAAC,UAAD,CAAP,CAAR;EACA;;EAEiB,OAAXoB,WAAW;IACjB,OAAOC,MAAM,CAACC,MAAP,CAAczB,YAAY,CAACuB,WAAb,EAAd,EAA0C;MAChDd,QAAQ,EAAE;IADsC,CAA1C,CAAP;EAGA;;EAEDiB,OAAO;IACN,MAAMA,OAAN;IACA,KAAKjB,QAAL,CAAciB,OAAd;;IACA,KAAKb,UAAL,CAAgBa,OAAhB;;IACA,KAAKZ,UAAL,CAAgBY,OAAhB;;IACA,KAAKX,cAAL,CAAoBW,OAApB;;IACA,KAAKT,cAAL,CAAoBS,OAApB;;IACA,OAAO,IAAP;EACA;;AA1E0G","names":["StereoEffect","Signal","Gain","readOnly","Split","Merge","StereoFeedbackEffect","constructor","options","feedback","context","value","units","_feedbackL","_feedbackR","_feedbackSplit","channels","_feedbackMerge","_merge","connect","_split","fan","gain","getDefaults","Object","assign","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/StereoFeedbackEffect.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { Signal } from \"../signal/Signal\";\nimport { Gain } from \"../core/context/Gain\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Split } from \"../component/channel/Split\";\nimport { Merge } from \"../component/channel/Merge\";\n\nexport interface StereoFeedbackEffectOptions extends StereoEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Base class for stereo feedback effects where the effectReturn is fed back into the same channel.\n */\nexport class StereoFeedbackEffect<Options extends StereoFeedbackEffectOptions> extends StereoEffect<Options> {\n\t\n\t/**\n\t * The amount of feedback from the output\n\t * back into the input of the effect (routed\n\t * across left and right channels).\n\t */\n\treadonly feedback: Signal<\"normalRange\">;\n\n\t/**\n\t * the left side feedback\n\t */\n\tprotected _feedbackL: Gain;\n\n\t/**\n\t * the right side feedback\n\t */\n\tprotected _feedbackR: Gain;\n\n\t/**\n\t * Split the channels for feedback\n\t */\n\tprotected _feedbackSplit: Split;\n\n\t/**\n\t * Merge the channels for feedback\n\t */\n\tprotected _feedbackMerge: Merge;\n\n\tconstructor(options: StereoFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis.feedback = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.feedback, \n\t\t\tunits: \"normalRange\"\n\t\t});\n\t\tthis._feedbackL = new Gain({ context: this.context });\n\t\tthis._feedbackR = new Gain({ context: this.context });\n\n\t\tthis._feedbackSplit = new Split({ context: this.context, channels: 2 });\n\t\tthis._feedbackMerge = new Merge({ context: this.context, channels: 2 });\n\n\t\tthis._merge.connect(this._feedbackSplit);\n\t\tthis._feedbackMerge.connect(this._split);\n\t\t\n\t\t// the left output connected to the left input\n\t\tthis._feedbackSplit.connect(this._feedbackL, 0, 0);\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 0);\n\n\t\t// the right output connected to the right input\n\t\tthis._feedbackSplit.connect(this._feedbackR, 1, 0);\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 1);\n\t\t\n\t\t// the feedback control\n\t\tthis.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n\n\tstatic getDefaults(): StereoFeedbackEffectOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfeedback: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.feedback.dispose();\n\t\tthis._feedbackL.dispose();\n\t\tthis._feedbackR.dispose();\n\t\tthis._feedbackSplit.dispose();\n\t\tthis._feedbackMerge.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}