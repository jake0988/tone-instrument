{"ast":null,"code":"import { Param } from \"../core/context/Param\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\n\nexport class Signal extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    this.name = \"Signal\";\n    /**\n     * Indicates if the value should be overridden on connection.\n     */\n\n    this.override = true;\n    const options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    this.output = this._constantSource = new ToneConstantSource({\n      context: this.context,\n      convert: options.convert,\n      offset: options.value,\n      units: options.units,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n\n    this._constantSource.start(0);\n\n    this.input = this._param = this._constantSource.offset;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      units: \"number\",\n      value: 0\n    });\n  }\n\n  connect(destination) {\n    let outputNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let inputNum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    // start it only when connected to something\n    connectSignal(this, destination, outputNum, inputNum);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    this._constantSource.dispose();\n\n    return this;\n  } //-------------------------------------\n  // ABSTRACT PARAM INTERFACE\n  // just a proxy for the ConstantSourceNode's offset AudioParam\n  // all docs are generated from AbstractParam.ts\n  //-------------------------------------\n\n\n  setValueAtTime(value, time) {\n    this._param.setValueAtTime(value, time);\n\n    return this;\n  }\n\n  getValueAtTime(time) {\n    return this._param.getValueAtTime(time);\n  }\n\n  setRampPoint(time) {\n    this._param.setRampPoint(time);\n\n    return this;\n  }\n\n  linearRampToValueAtTime(value, time) {\n    this._param.linearRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampToValueAtTime(value, time) {\n    this._param.exponentialRampToValueAtTime(value, time);\n\n    return this;\n  }\n\n  exponentialRampTo(value, rampTime, startTime) {\n    this._param.exponentialRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  linearRampTo(value, rampTime, startTime) {\n    this._param.linearRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  targetRampTo(value, rampTime, startTime) {\n    this._param.targetRampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  exponentialApproachValueAtTime(value, time, rampTime) {\n    this._param.exponentialApproachValueAtTime(value, time, rampTime);\n\n    return this;\n  }\n\n  setTargetAtTime(value, startTime, timeConstant) {\n    this._param.setTargetAtTime(value, startTime, timeConstant);\n\n    return this;\n  }\n\n  setValueCurveAtTime(values, startTime, duration, scaling) {\n    this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\n    return this;\n  }\n\n  cancelScheduledValues(time) {\n    this._param.cancelScheduledValues(time);\n\n    return this;\n  }\n\n  cancelAndHoldAtTime(time) {\n    this._param.cancelAndHoldAtTime(time);\n\n    return this;\n  }\n\n  rampTo(value, rampTime, startTime) {\n    this._param.rampTo(value, rampTime, startTime);\n\n    return this;\n  }\n\n  get value() {\n    return this._param.value;\n  }\n\n  set value(value) {\n    this._param.value = value;\n  }\n\n  get convert() {\n    return this._param.convert;\n  }\n\n  set convert(convert) {\n    this._param.convert = convert;\n  }\n\n  get units() {\n    return this._param.units;\n  }\n\n  get overridden() {\n    return this._param.overridden;\n  }\n\n  set overridden(overridden) {\n    this._param.overridden = overridden;\n  }\n\n  get maxValue() {\n    return this._param.maxValue;\n  }\n\n  get minValue() {\n    return this._param.minValue;\n  }\n  /**\n   * See [[Param.apply]].\n   */\n\n\n  apply(param) {\n    this._param.apply(param);\n\n    return this;\n  }\n\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\n\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n  if (destination instanceof Param || isAudioParam(destination) || destination instanceof Signal && destination.override) {\n    // cancel changes\n    destination.cancelScheduledValues(0); // reset the value\n\n    destination.setValueAtTime(0, 0); // mark the value as overridden\n\n    if (destination instanceof Signal) {\n      destination.overridden = true;\n    }\n  }\n\n  connect(signal, destination, outputNum, inputNum);\n}","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","connect","isAudioParam","optionsFromArguments","ToneConstantSource","Signal","constructor","getDefaults","arguments","options","output","_constantSource","context","convert","offset","value","units","minValue","maxValue","start","input","_param","Object","assign","destination","outputNum","inputNum","connectSignal","dispose","setValueAtTime","time","getValueAtTime","setRampPoint","linearRampToValueAtTime","exponentialRampToValueAtTime","exponentialRampTo","rampTime","startTime","linearRampTo","targetRampTo","exponentialApproachValueAtTime","setTargetAtTime","timeConstant","setValueCurveAtTime","values","duration","scaling","cancelScheduledValues","cancelAndHoldAtTime","rampTo","overridden","apply","param","signal","override"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/Signal.ts"],"sourcesContent":["import { AbstractParam } from \"../core/context/AbstractParam\";\nimport { Param } from \"../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { connect } from \"../core/context/ToneAudioNode\";\nimport { Time, UnitMap, UnitName } from \"../core/type/Units\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n\nexport interface SignalOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tvalue: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal<TypeName extends UnitName = \"number\"> extends ToneAudioNode<SignalOptions<any>>\n\timplements AbstractParam<TypeName> {\n\n\treadonly name: string = \"Signal\";\n\n\t/**\n\t * Indicates if the value should be overridden on connection.\n\t */\n\treadonly override: boolean = true;\n\n\t/**\n\t * The constant source node which generates the signal\n\t */\n\tprotected _constantSource: ToneConstantSource<TypeName>;\n\treadonly output: OutputNode;\n\tprotected _param: Param<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value Initial value of the signal\n\t * @param units The unit name, e.g. \"frequency\"\n\t */\n\tconstructor(value?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<SignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n\n\t\tconst options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]) as SignalOptions<TypeName>;\n\n\t\tthis.output = this._constantSource = new ToneConstantSource({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\toffset: options.value,\n\t\t\tunits: options.units,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\tthis._constantSource.start(0);\n\t\tthis.input = this._param = this._constantSource.offset;\n\t}\n\n\tstatic getDefaults(): SignalOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tunits: \"number\" as UnitName,\n\t\t\tvalue: 0,\n\t\t});\n\t}\n\n\tconnect(destination: InputNode, outputNum = 0, inputNum = 0): this {\n\t\t// start it only when connected to something\n\t\tconnectSignal(this, destination, outputNum, inputNum);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\tthis._constantSource.dispose();\n\t\treturn this;\n\t}\n\n\t//-------------------------------------\n\t// ABSTRACT PARAM INTERFACE\n\t// just a proxy for the ConstantSourceNode's offset AudioParam\n\t// all docs are generated from AbstractParam.ts\n\t//-------------------------------------\n\n\tsetValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.setValueAtTime(value, time);\n\t\treturn this;\n\t}\n\tgetValueAtTime(time: Time): UnitMap[TypeName] {\n\t\treturn this._param.getValueAtTime(time);\n\t}\n\tsetRampPoint(time: Time): this {\n\t\tthis._param.setRampPoint(time);\n\t\treturn this;\n\t}\n\tlinearRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.linearRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampToValueAtTime(value: UnitMap[TypeName], time: Time): this {\n\t\tthis._param.exponentialRampToValueAtTime(value, time);\n\t\treturn this;\n\t}\n\texponentialRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.exponentialRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\tlinearRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.linearRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\ttargetRampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.targetRampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\texponentialApproachValueAtTime(value: UnitMap[TypeName], time: Time, rampTime: Time): this {\n\t\tthis._param.exponentialApproachValueAtTime(value, time, rampTime);\n\t\treturn this;\n\t}\n\tsetTargetAtTime(value: UnitMap[TypeName], startTime: Time, timeConstant: number): this {\n\t\tthis._param.setTargetAtTime(value, startTime, timeConstant);\n\t\treturn this;\n\t}\n\tsetValueCurveAtTime(values: UnitMap[TypeName][], startTime: Time, duration: Time, scaling?: number): this {\n\t\tthis._param.setValueCurveAtTime(values, startTime, duration, scaling);\n\t\treturn this;\n\t}\n\tcancelScheduledValues(time: Time): this {\n\t\tthis._param.cancelScheduledValues(time);\n\t\treturn this;\n\t}\n\tcancelAndHoldAtTime(time: Time): this {\n\t\tthis._param.cancelAndHoldAtTime(time);\n\t\treturn this;\n\t}\n\trampTo(value: UnitMap[TypeName], rampTime: Time, startTime?: Time): this {\n\t\tthis._param.rampTo(value, rampTime, startTime);\n\t\treturn this;\n\t}\n\n\tget value(): UnitMap[TypeName] {\n\t\treturn this._param.value;\n\t}\n\tset value(value: UnitMap[TypeName]) {\n\t\tthis._param.value = value;\n\t}\n\n\tget convert(): boolean {\n\t\treturn this._param.convert;\n\t}\n\tset convert(convert: boolean) {\n\t\tthis._param.convert = convert;\n\t}\n\n\tget units(): UnitName {\n\t\treturn this._param.units;\n\t}\n\n\tget overridden(): boolean {\n\t\treturn this._param.overridden;\n\t}\n\tset overridden(overridden: boolean) {\n\t\tthis._param.overridden = overridden;\n\t}\n\n\tget maxValue(): number {\n\t\treturn this._param.maxValue;\n\t}\n\tget minValue(): number {\n\t\treturn this._param.minValue;\n\t}\n\n\t/**\n\t * See [[Param.apply]].\n\t */\n\tapply(param: Param | AudioParam): this {\n\t\tthis._param.apply(param);\n\t\treturn this;\n\t}\n}\n\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal: OutputNode, destination: InputNode, outputNum?: number, inputNum?: number): void {\n\tif (destination instanceof Param || isAudioParam(destination) ||\n\t\t(destination instanceof Signal && destination.override)) {\n\t\t// cancel changes\n\t\tdestination.cancelScheduledValues(0);\n\t\t// reset the value\n\t\tdestination.setValueAtTime(0, 0);\n\t\t// mark the value as overridden\n\t\tif (destination instanceof Signal) {\n\t\t\tdestination.overridden = true;\n\t\t}\n\t}\n\tconnect(signal, destination, outputNum, inputNum);\n}\n"]},"metadata":{},"sourceType":"module"}