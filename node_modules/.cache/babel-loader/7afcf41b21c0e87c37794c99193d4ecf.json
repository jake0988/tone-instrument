{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext\";\nexport class DummyContext extends BaseContext {\n  constructor() {\n    super(...arguments);\n    this.lookAhead = 0;\n    this.latencyHint = 0;\n    this.isOffline = false;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return {};\n  }\n\n  createOscillator() {\n    return {};\n  }\n\n  createBufferSource() {\n    return {};\n  }\n\n  createBiquadFilter() {\n    return {};\n  }\n\n  createBuffer(_numberOfChannels, _length, _sampleRate) {\n    return {};\n  }\n\n  createChannelMerger(_numberOfInputs) {\n    return {};\n  }\n\n  createChannelSplitter(_numberOfOutputs) {\n    return {};\n  }\n\n  createConstantSource() {\n    return {};\n  }\n\n  createConvolver() {\n    return {};\n  }\n\n  createDelay(_maxDelayTime) {\n    return {};\n  }\n\n  createDynamicsCompressor() {\n    return {};\n  }\n\n  createGain() {\n    return {};\n  }\n\n  createIIRFilter(_feedForward, _feedback) {\n    return {};\n  }\n\n  createPanner() {\n    return {};\n  }\n\n  createPeriodicWave(_real, _imag, _constraints) {\n    return {};\n  }\n\n  createStereoPanner() {\n    return {};\n  }\n\n  createWaveShaper() {\n    return {};\n  }\n\n  createMediaStreamSource(_stream) {\n    return {};\n  }\n\n  createMediaElementSource(_element) {\n    return {};\n  }\n\n  createMediaStreamDestination() {\n    return {};\n  }\n\n  decodeAudioData(_audioData) {\n    return Promise.resolve({});\n  } //---------------------------\n  // TONE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAudioWorkletNode(_name, _options) {\n    return {};\n  }\n\n  get rawContext() {\n    return {};\n  }\n\n  addAudioWorkletModule(_url, _name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve();\n    });\n  }\n\n  resume() {\n    return Promise.resolve();\n  }\n\n  setTimeout(_fn, _timeout) {\n    return 0;\n  }\n\n  clearTimeout(_id) {\n    return this;\n  }\n\n  setInterval(_fn, _interval) {\n    return 0;\n  }\n\n  clearInterval(_id) {\n    return this;\n  }\n\n  getConstant(_val) {\n    return {};\n  }\n\n  get currentTime() {\n    return 0;\n  }\n\n  get state() {\n    return {};\n  }\n\n  get sampleRate() {\n    return 0;\n  }\n\n  get listener() {\n    return {};\n  }\n\n  get transport() {\n    return {};\n  }\n\n  get draw() {\n    return {};\n  }\n\n  set draw(_d) {}\n\n  get destination() {\n    return {};\n  }\n\n  set destination(_d) {}\n\n  now() {\n    return 0;\n  }\n\n  immediate() {\n    return 0;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["BaseContext","DummyContext","constructor","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","_numberOfChannels","_length","_sampleRate","createChannelMerger","_numberOfInputs","createChannelSplitter","_numberOfOutputs","createConstantSource","createConvolver","createDelay","_maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","_feedForward","_feedback","createPanner","createPeriodicWave","_real","_imag","_constraints","createStereoPanner","createWaveShaper","createMediaStreamSource","_stream","createMediaElementSource","_element","createMediaStreamDestination","decodeAudioData","_audioData","Promise","resolve","createAudioWorkletNode","_name","_options","rawContext","addAudioWorkletModule","_url","resume","setTimeout","_fn","_timeout","clearTimeout","_id","setInterval","_interval","clearInterval","getConstant","_val","currentTime","state","sampleRate","listener","transport","draw","_d","destination","now","immediate"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/DummyContext.ts"],"sourcesContent":["import { BaseContext } from \"./BaseContext\";\nimport { Seconds } from \"../type/Units\";\nimport { AnyAudioContext } from \"./AudioContext\";\n\ntype Draw = import(\"../util/Draw\").Draw;\ntype Destination = import(\"./Destination\").Destination;\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Listener = import(\"./Listener\").Listener;\n\nexport class DummyContext extends BaseContext {\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn {} as AnalyserNode;\n\t}\n\n\tcreateOscillator(): OscillatorNode {\n\t\treturn {} as OscillatorNode;\n\t}\n\n\tcreateBufferSource() {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn {} as BiquadFilterNode;\n\t}\n\n\tcreateBuffer(\n\t\t_numberOfChannels: number,\n\t\t_length: number,\n\t\t_sampleRate: number\n\t): AudioBuffer {\n\t\treturn {} as AudioBuffer;\n\t}\n\n\tcreateChannelMerger(\n\t\t_numberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn {} as ChannelMergerNode;\n\t}\n\n\tcreateChannelSplitter(\n\t\t_numberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn {} as ChannelSplitterNode;\n\t}\n\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn {} as ConstantSourceNode;\n\t}\n\n\tcreateConvolver(): ConvolverNode {\n\t\treturn {} as ConvolverNode;\n\t}\n\n\tcreateDelay(_maxDelayTime?: number | undefined): DelayNode {\n\t\treturn {} as DelayNode;\n\t}\n\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn {} as DynamicsCompressorNode;\n\t}\n\n\tcreateGain(): GainNode {\n\t\treturn {} as GainNode;\n\t}\n\n\tcreateIIRFilter(\n\t\t_feedForward: number[] | Float32Array,\n\t\t_feedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\treturn {} as IIRFilterNode;\n\t}\n\n\tcreatePanner(): PannerNode {\n\t\treturn {} as PannerNode;\n\t}\n\n\tcreatePeriodicWave(\n\t\t_real: number[] | Float32Array,\n\t\t_imag: number[] | Float32Array,\n\t\t_constraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn {} as PeriodicWave;\n\t}\n\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn {} as StereoPannerNode;\n\t}\n\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn {} as WaveShaperNode;\n\t}\n\n\tcreateMediaStreamSource(_stream: MediaStream): MediaStreamAudioSourceNode {\n\t\treturn {} as MediaStreamAudioSourceNode;\n\t}\n\n\tcreateMediaElementSource(\n\t\t_element: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\treturn {} as MediaElementAudioSourceNode;\n\t}\n\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\treturn {} as MediaStreamAudioDestinationNode;\n\t}\n\n\tdecodeAudioData(_audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn Promise.resolve({} as AudioBuffer);\n\t}\n\n\t//---------------------------\n\t// TONE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAudioWorkletNode(\n\t\t_name: string,\n\t\t_options?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn {} as AudioWorkletNode;\n\t}\n\n\tget rawContext(): AnyAudioContext {\n\t\treturn {} as AnyAudioContext;\n\t}\n\n\tasync addAudioWorkletModule(_url: string, _name: string): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tlookAhead = 0;\n\n\tlatencyHint = 0;\n\n\tresume(): Promise<void> {\n\t\treturn Promise.resolve();\n\t}\n\n\tsetTimeout(_fn: (...args: any[]) => void, _timeout: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearTimeout(_id: number): this {\n\t\treturn this;\n\t}\n\n\tsetInterval(_fn: (...args: any[]) => void, _interval: Seconds): number {\n\t\treturn 0;\n\t}\n\n\tclearInterval(_id: number): this {\n\t\treturn this;\n\t}\n\n\tgetConstant(_val: number): AudioBufferSourceNode {\n\t\treturn {} as AudioBufferSourceNode;\n\t}\n\n\tget currentTime(): Seconds {\n\t\treturn 0;\n\t}\n\n\tget state(): AudioContextState {\n\t\treturn {} as AudioContextState;\n\t}\n\n\tget sampleRate(): number {\n\t\treturn 0;\n\t}\n\n\tget listener(): Listener {\n\t\treturn {} as Listener;\n\t}\n\n\tget transport(): Transport {\n\t\treturn {} as Transport;\n\t}\n\n\tget draw(): Draw {\n\t\treturn {} as Draw;\n\t}\n\tset draw(_d) {}\n\n\tget destination(): Destination {\n\t\treturn {} as Destination;\n\t}\n\tset destination(_d: Destination) {}\n\n\tnow() {\n\t\treturn 0;\n\t}\n\n\timmediate() {\n\t\treturn 0;\n\t}\n\n\treadonly isOffline: boolean = false;\n}\n"]},"metadata":{},"sourceType":"module"}