{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { getContext, setContext } from \"../Global\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport.\n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * // render 2 seconds of the oscillator\n * Tone.Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Tone.Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Tone.Offline(({ transport }) => {\n * \tconst osc = new Tone.Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\n\nexport function Offline(callback, duration) {\n  let channels = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n  let sampleRate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : getContext().sampleRate;\n  return __awaiter(this, void 0, void 0, function* () {\n    // set the OfflineAudioContext based on the current context\n    const originalContext = getContext();\n    const context = new OfflineContext(channels, duration, sampleRate);\n    setContext(context); // invoke the callback/scheduling\n\n    yield callback(context); // then render the audio\n\n    const bufferPromise = context.render(); // return the original AudioContext\n\n    setContext(originalContext); // await the rendering\n\n    const buffer = yield bufferPromise; // return the audio\n\n    return new ToneAudioBuffer(buffer);\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,WAAvC;AAEA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA,OAAM,SAAgBC,OAAhB,CACLC,QADK,EAELC,QAFK,EAIuC;EAAA,IAD5CC,QAC4C,uEADjC,CACiC;EAAA,IAA5CC,UAA4C,uEAAvBR,UAAU,GAAGQ,UAAU;;IAE5C;IACA,MAAMC,eAAe,GAAGT,UAAU,EAAlC;IAEA,MAAMU,OAAO,GAAG,IAAIR,cAAJ,CAAmBK,QAAnB,EAA6BD,QAA7B,EAAuCE,UAAvC,CAAhB;IACAP,UAAU,CAACS,OAAD,CAAV,EAEA;;IACA,MAAML,QAAQ,CAACK,OAAD,CAAd,EAEA;;IACA,MAAMC,aAAa,GAAGD,OAAO,CAACE,MAAR,EAAtB,EAEA;;IACAX,UAAU,CAACQ,eAAD,CAAV,EAEA;;IACA,MAAMI,MAAM,GAAG,MAAMF,aAArB,EAEA;;IACA,OAAO,IAAIR,eAAJ,CAAoBU,MAApB,CAAP;EACA;AAAA","names":["getContext","setContext","OfflineContext","ToneAudioBuffer","Offline","callback","duration","channels","sampleRate","originalContext","context","bufferPromise","render","buffer"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/Offline.ts"],"sourcesContent":["import { getContext, setContext } from \"../Global\";\nimport { Seconds } from \"../type/Units\";\nimport { OfflineContext } from \"./OfflineContext\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer\";\n\n/**\n * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\n * The OfflineAudioContext is capable of rendering much faster than real time in many cases.\n * The callback function also passes in an offline instance of [[Context]] which can be used\n * to schedule events along the Transport. \n * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n * @param  duration     the amount of time to record for.\n * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.\n * @example\n * // render 2 seconds of the oscillator\n * Tone.Offline(() => {\n * \t// only nodes created in this callback will be recorded\n * \tconst oscillator = new Tone.Oscillator().toDestination().start(0);\n * }, 2).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @example\n * // can also schedule events along the Transport\n * // using the passed in Offline Transport\n * Tone.Offline(({ transport }) => {\n * \tconst osc = new Tone.Oscillator().toDestination();\n * \ttransport.schedule(time => {\n * \t\tosc.start(time).stop(time + 0.1);\n * \t}, 1);\n * \t// make sure to start the transport\n * \ttransport.start(0.2);\n * }, 4).then((buffer) => {\n * \t// do something with the output buffer\n * \tconsole.log(buffer);\n * });\n * @category Core\n */\nexport async function Offline(\n\tcallback: (context: OfflineContext) => Promise<void> | void,\n\tduration: Seconds,\n\tchannels = 2,\n\tsampleRate: number = getContext().sampleRate,\n): Promise<ToneAudioBuffer> {\n\t// set the OfflineAudioContext based on the current context\n\tconst originalContext = getContext();\n\n\tconst context = new OfflineContext(channels, duration, sampleRate);\n\tsetContext(context);\n\n\t// invoke the callback/scheduling\n\tawait callback(context);\n\n\t// then render the audio\n\tconst bufferPromise = context.render();\n\n\t// return the original AudioContext\n\tsetContext(originalContext);\n\n\t// await the rendering\n\tconst buffer = await bufferPromise;\n\n\t// return the audio\n\treturn new ToneAudioBuffer(buffer);\n}\n"]},"metadata":{},"sourceType":"module"}