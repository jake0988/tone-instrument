{"ast":null,"code":"import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\n\nexport class Delay extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n    this.name = \"Delay\";\n    const options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n    const maxDelayInSeconds = this.toSeconds(options.maxDelay);\n    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n    this.delayTime = new Param({\n      context: this.context,\n      param: this._delayNode.delayTime,\n      units: \"time\",\n      value: options.delayTime,\n      minValue: 0,\n      maxValue: this.maxDelay\n    });\n    readOnly(this, \"delayTime\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      delayTime: 0,\n      maxDelay: 1\n    });\n  }\n  /**\n   * The maximum delay time. This cannot be changed after\n   * the value is passed into the constructor.\n   */\n\n\n  get maxDelay() {\n    return this._maxDelay;\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._delayNode.disconnect();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,kBAAtB;AAEA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,aAAT,QAAoD,iBAApD;AAOA;;;;;;;;;;;;;AAYA,OAAM,MAAOC,KAAP,SAAqBD,aAArB,CAAgD;EAiCrDE;IACC,MAAMJ,oBAAoB,CAACG,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,EAAc,UAAd,CAAjC,CAA1B;IAhCQ,YAAe,OAAf;IAkCR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,EAAc,UAAd,CAAjC,CAApC;IAEA,MAAME,iBAAiB,GAAG,KAAKC,SAAL,CAAeF,OAAO,CAACG,QAAvB,CAA1B;IACA,KAAKC,SAAL,GAAiBC,IAAI,CAACC,GAAL,CAASL,iBAAT,EAA4B,KAAKC,SAAL,CAAeF,OAAO,CAACO,SAAvB,CAA5B,CAAjB;IAEA,KAAKC,UAAL,GAAkB,KAAKC,KAAL,GAAa,KAAKC,MAAL,GAAc,KAAKC,OAAL,CAAaC,WAAb,CAAyBX,iBAAzB,CAA7C;IAEA,KAAKM,SAAL,GAAiB,IAAIf,KAAJ,CAAU;MAC1BmB,OAAO,EAAE,KAAKA,OADY;MAE1BE,KAAK,EAAE,KAAKL,UAAL,CAAgBD,SAFG;MAG1BO,KAAK,EAAE,MAHmB;MAI1BC,KAAK,EAAEf,OAAO,CAACO,SAJW;MAK1BS,QAAQ,EAAE,CALgB;MAM1BC,QAAQ,EAAE,KAAKd;IANW,CAAV,CAAjB;IASAT,QAAQ,CAAC,IAAD,EAAO,WAAP,CAAR;EACA;;EAEiB,OAAXI,WAAW;IACjB,OAAOoB,MAAM,CAACC,MAAP,CAAcxB,aAAa,CAACG,WAAd,EAAd,EAA2C;MACjDS,SAAS,EAAE,CADsC;MAEjDJ,QAAQ,EAAE;IAFuC,CAA3C,CAAP;EAIA;EAED;;;;;;EAIY,IAARA,QAAQ;IACX,OAAO,KAAKC,SAAZ;EACA;EAED;;;;;EAGAgB,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKZ,UAAL,CAAgBa,UAAhB;;IACA,KAAKd,SAAL,CAAea,OAAf;IACA,OAAO,IAAP;EACA;;AA9EoD","names":["Param","optionsFromArguments","readOnly","ToneAudioNode","Delay","constructor","getDefaults","arguments","options","maxDelayInSeconds","toSeconds","maxDelay","_maxDelay","Math","max","delayTime","_delayNode","input","output","context","createDelay","param","units","value","minValue","maxValue","Object","assign","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/Delay.ts"],"sourcesContent":["import { Param } from \"../context/Param\";\nimport { Seconds, Time } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\nexport interface DelayOptions extends ToneAudioNodeOptions {\n\tdelayTime: Time;\n\tmaxDelay: Time;\n}\n\n/**\n * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst delay = new Tone.Delay(0.1).toDestination();\n * \t// connect the signal to both the delay and the destination\n * \tconst pulse = new Tone.PulseOscillator().connect(delay).toDestination();\n * \t// start and stop the pulse\n * \tpulse.start(0).stop(0.01);\n * }, 0.5, 1);\n */\nexport class Delay extends ToneAudioNode<DelayOptions> {\n\n\treadonly name: string = \"Delay\";\n\n\t/**\n\t * Private holder of the max delay time\n\t */\n\tprivate _maxDelay: Seconds;\n\n\t/**\n\t * The amount of time the incoming signal is delayed.\n\t * @example\n\t * const delay = new Tone.Delay().toDestination();\n\t * // modulate the delayTime between 0.1 and 1 seconds\n\t * const delayLFO = new Tone.LFO(0.5, 0.1, 1).start().connect(delay.delayTime);\n\t * const pulse = new Tone.PulseOscillator().connect(delay).start();\n\t * // the change in delayTime causes the pitch to go up and down\n\t */\n\treadonly delayTime: Param<\"time\">;\n\n\t/**\n\t * Private reference to the internal DelayNode\n\t */\n\tprivate _delayNode: DelayNode;\n\treadonly input: DelayNode;\n\treadonly output: DelayNode;\n\n\t/**\n\t * @param delayTime The delay applied to the incoming signal.\n\t * @param maxDelay The maximum delay time.\n\t */\n\tconstructor(delayTime?: Time, maxDelay?: Time);\n\tconstructor(options?: Partial<DelayOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]));\n\n\t\tconst options = optionsFromArguments(Delay.getDefaults(), arguments, [\"delayTime\", \"maxDelay\"]);\n\n\t\tconst maxDelayInSeconds = this.toSeconds(options.maxDelay);\n\t\tthis._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));\n\n\t\tthis._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);\n\n\t\tthis.delayTime = new Param({\n\t\t\tcontext: this.context,\n\t\t\tparam: this._delayNode.delayTime,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t\tminValue: 0,\n\t\t\tmaxValue: this.maxDelay,\n\t\t});\n\n\t\treadOnly(this, \"delayTime\");\n\t}\n\n\tstatic getDefaults(): DelayOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tdelayTime: 0,\n\t\t\tmaxDelay: 1,\n\t\t});\n\t}\n\n\t/**\n\t * The maximum delay time. This cannot be changed after\n\t * the value is passed into the constructor.\n\t */\n\tget maxDelay(): Seconds {\n\t\treturn this._maxDelay;\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._delayNode.disconnect();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}