{"ast":null,"code":"import { Scale } from \"./Scale\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\n\nexport class ScaleExp extends Scale {\n  constructor() {\n    super(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n    this.name = \"ScaleExp\";\n    const options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n    this.input = this._exp = new Pow({\n      context: this.context,\n      value: options.exponent\n    });\n\n    this._exp.connect(this._mult);\n  }\n\n  static getDefaults() {\n    return Object.assign(Scale.getDefaults(), {\n      exponent: 1\n    });\n  }\n  /**\n   * Instead of interpolating linearly between the [[min]] and\n   * [[max]] values, setting the exponent will interpolate between\n   * the two values with an exponential curve.\n   */\n\n\n  get exponent() {\n    return this._exp.value;\n  }\n\n  set exponent(exp) {\n    this._exp.value = exp;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._exp.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAoC,SAApC;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,GAAT,QAAoB,OAApB;AAMA;;;;;;;;;;AASA,OAAM,MAAOC,QAAP,SAAwBH,KAAxB,CAA8C;EAgBnDI;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACE,QAAQ,CAACI,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,CAApC,CAAlC,CAAN;IAfQ,YAAe,UAAf;IAgBR,MAAMC,OAAO,GAAGR,oBAAoB,CAACE,QAAQ,CAACI,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,KAAD,EAAQ,KAAR,EAAe,UAAf,CAApC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,IAAL,GAAY,IAAIT,GAAJ,CAAQ;MAChCU,OAAO,EAAE,KAAKA,OADkB;MAEhCC,KAAK,EAAEJ,OAAO,CAACK;IAFiB,CAAR,CAAzB;;IAIA,KAAKH,IAAL,CAAUI,OAAV,CAAkB,KAAKC,KAAvB;EACA;;EAEiB,OAAXT,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcN,KAAK,CAACO,WAAN,EAAd,EAAmC;MACzCO,QAAQ,EAAE;IAD+B,CAAnC,CAAP;EAGA;EAED;;;;;;;EAKY,IAARA,QAAQ;IACX,OAAO,KAAKH,IAAL,CAAUE,KAAjB;EACA;;EACW,IAARC,QAAQ,CAACG,GAAD,EAAI;IACf,KAAKN,IAAL,CAAUE,KAAV,GAAkBI,GAAlB;EACA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKP,IAAL,CAAUO,OAAV;;IACA,OAAO,IAAP;EACA;;AAjDkD","names":["Scale","optionsFromArguments","Pow","ScaleExp","constructor","Object","assign","getDefaults","arguments","options","input","_exp","context","value","exponent","connect","_mult","exp","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/ScaleExp.ts"],"sourcesContent":["import { Scale, ScaleOptions } from \"./Scale\";\nimport { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Pow } from \"./Pow\";\n\nexport interface ScaleExpOptions extends ScaleOptions {\n\texponent: Positive;\n}\n\n/**\n * Performs an exponential scaling on an input signal.\n * Scales a NormalRange value [0,1] exponentially\n * to the output range of outputMin to outputMax.\n * @example\n * const scaleExp = new Tone.ScaleExp(0, 100, 2);\n * const signal = new Tone.Signal(0.5).connect(scaleExp);\n * @category Signal\n */\nexport class ScaleExp extends Scale<ScaleExpOptions> {\n\n\treadonly name: string = \"ScaleExp\";\n\n\t/**\n\t * The exponent scaler\n\t */\n\tprivate _exp: Pow;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t * @param exponent The exponent which scales the incoming signal.\n\t */\n\tconstructor(min?: number, max?: number, exponent?: number);\n\tconstructor(options?: Partial<ScaleExpOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"])));\n\t\tconst options = optionsFromArguments(ScaleExp.getDefaults(), arguments, [\"min\", \"max\", \"exponent\"]);\n\n\t\tthis.input = this._exp = new Pow({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.exponent,\n\t\t});\n\t\tthis._exp.connect(this._mult);\n\t}\n\n\tstatic getDefaults(): ScaleExpOptions {\n\t\treturn Object.assign(Scale.getDefaults(), {\n\t\t\texponent: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Instead of interpolating linearly between the [[min]] and\n\t * [[max]] values, setting the exponent will interpolate between\n\t * the two values with an exponential curve.\n\t */\n\tget exponent(): Positive {\n\t\treturn this._exp.value;\n\t}\n\tset exponent(exp) {\n\t\tthis._exp.value = exp;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exp.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}