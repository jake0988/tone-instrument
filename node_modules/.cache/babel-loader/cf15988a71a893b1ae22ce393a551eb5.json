{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\n\nexport class Channel extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n    this.name = \"Channel\";\n    const options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n    this._solo = this.input = new Solo({\n      solo: options.solo,\n      context: this.context\n    });\n    this._panVol = this.output = new PanVol({\n      context: this.context,\n      pan: options.pan,\n      volume: options.volume,\n      mute: options.mute,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panVol.pan;\n    this.volume = this._panVol.volume;\n\n    this._solo.connect(this._panVol);\n\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      pan: 0,\n      volume: 0,\n      mute: false,\n      solo: false,\n      channelCount: 1\n    });\n  }\n  /**\n   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n   */\n\n\n  get solo() {\n    return this._solo.solo;\n  }\n\n  set solo(solo) {\n    this._solo.solo = solo;\n  }\n  /**\n   * If the current instance is muted, i.e. another instance is soloed,\n   * or the channel is muted\n   */\n\n\n  get muted() {\n    return this._solo.muted || this.mute;\n  }\n  /**\n   * Mute/unmute the volume\n   */\n\n\n  get mute() {\n    return this._panVol.mute;\n  }\n\n  set mute(mute) {\n    this._panVol.mute = mute;\n  }\n  /**\n   * Get the gain node belonging to the bus name. Create it if\n   * it doesn't exist\n   * @param name The bus name\n   */\n\n\n  _getBus(name) {\n    if (!Channel.buses.has(name)) {\n      Channel.buses.set(name, new Gain({\n        context: this.context\n      }));\n    }\n\n    return Channel.buses.get(name);\n  }\n  /**\n   * Send audio to another channel using a string. `send` is a lot like\n   * [[connect]], except it uses a string instead of an object. This can\n   * be useful in large applications to decouple sections since [[send]]\n   * and [[receive]] can be invoked separately in order to connect an object\n   * @param name The channel name to send the audio\n   * @param volume The amount of the signal to send.\n   * \tDefaults to 0db, i.e. send the entire signal\n   * @returns Returns the gain node of this connection.\n   */\n\n\n  send(name) {\n    let volume = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n    const bus = this._getBus(name);\n\n    const sendKnob = new Gain({\n      context: this.context,\n      units: \"decibels\",\n      gain: volume\n    });\n    this.connect(sendKnob);\n    sendKnob.connect(bus);\n    return sendKnob;\n  }\n  /**\n   * Receive audio from a channel which was connected with [[send]].\n   * @param name The channel name to receive audio from.\n   */\n\n\n  receive(name) {\n    const bus = this._getBus(name);\n\n    bus.connect(this);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panVol.dispose();\n\n    this.pan.dispose();\n    this.volume.dispose();\n\n    this._solo.dispose();\n\n    return this;\n  }\n\n}\n/**\n * Store the send/receive channels by name.\n */\n\nChannel.buses = new Map();","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Solo","PanVol","readOnly","Gain","Channel","constructor","getDefaults","arguments","options","_solo","input","solo","context","_panVol","output","pan","volume","mute","channelCount","connect","Object","assign","muted","_getBus","name","buses","has","set","get","send","bus","sendKnob","units","gain","receive","dispose","Map"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/Channel.ts"],"sourcesContent":["import { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Solo } from \"./Solo\";\nimport { PanVol } from \"./PanVol\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport interface ChannelOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tsolo: boolean;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls. \n * See [[PanVol]] and [[Solo]]\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode<ChannelOptions> {\n\n\treadonly name: string = \"Channel\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The soloing interface\n\t */\n\tprivate _solo: Solo;\n\n\t/**\n\t * The panning and volume node\n\t */\n\tprivate _panVol: PanVol;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume The output volume.\n\t * @param pan the initial pan\n\t */\n\tconstructor(volume?: Decibels, pan?: AudioRange);\n\tconstructor(options?: Partial<ChannelOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]));\n\t\tconst options = optionsFromArguments(Channel.getDefaults(), arguments, [\"volume\", \"pan\"]);\n\n\t\tthis._solo = this.input = new Solo({\n\t\t\tsolo: options.solo,\n\t\t\tcontext: this.context,\n\t\t});\n\t\tthis._panVol = this.output = new PanVol({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tvolume: options.volume,\n\t\t\tmute: options.mute,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\tthis.pan = this._panVol.pan;\n\t\tthis.volume = this._panVol.volume;\n\n\t\tthis._solo.connect(this._panVol);\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): ChannelOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tmute: false,\n\t\t\tsolo: false,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances\n\t */\n\tget solo(): boolean {\n\t\treturn this._solo.solo;\n\t}\n\tset solo(solo) {\n\t\tthis._solo.solo = solo;\n\t}\n\n\t/**\n\t * If the current instance is muted, i.e. another instance is soloed,\n\t * or the channel is muted\n\t */\n\tget muted(): boolean {\n\t\treturn this._solo.muted || this.mute;\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._panVol.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._panVol.mute = mute;\n\t}\n\n\t/**\n\t * Store the send/receive channels by name. \n\t */\n\tprivate static buses: Map<string, Gain> = new Map();\n\n\t/**\n\t * Get the gain node belonging to the bus name. Create it if\n\t * it doesn't exist\n\t * @param name The bus name\n\t */\n\tprivate _getBus(name: string): Gain {\n\t\tif (!Channel.buses.has(name)) {\n\t\t\tChannel.buses.set(name, new Gain({ context: this.context }));\n\t\t}\n\t\treturn Channel.buses.get(name) as Gain;\n\t}\n\n\t/**\n\t * Send audio to another channel using a string. `send` is a lot like\n\t * [[connect]], except it uses a string instead of an object. This can \n\t * be useful in large applications to decouple sections since [[send]]\n\t * and [[receive]] can be invoked separately in order to connect an object\n\t * @param name The channel name to send the audio\n\t * @param volume The amount of the signal to send. \n\t * \tDefaults to 0db, i.e. send the entire signal\n\t * @returns Returns the gain node of this connection.\n\t */\n\tsend(name: string, volume: Decibels = 0): Gain<\"decibels\"> {\n\t\tconst bus = this._getBus(name);\n\t\tconst sendKnob = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tgain: volume,\n\t\t});\n\t\tthis.connect(sendKnob);\n\t\tsendKnob.connect(bus);\n\t\treturn sendKnob;\n\t}\n\n\t/**\n\t * Receive audio from a channel which was connected with [[send]]. \n\t * @param name The channel name to receive audio from.\n\t */\n\treceive(name: string): this {\n\t\tconst bus = this._getBus(name);\n\t\tbus.connect(this);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panVol.dispose();\n\t\tthis.pan.dispose();\n\t\tthis.volume.dispose();\n\t\tthis._solo.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}