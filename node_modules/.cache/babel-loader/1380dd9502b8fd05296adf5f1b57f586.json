{"ast":null,"code":"import { Param } from \"../context/Param\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode } from \"./ToneAudioNode\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\n\nexport class Gain extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n    this.name = \"Gain\";\n    /**\n     * The wrapped GainNode.\n     */\n\n    this._gainNode = this.context.createGain(); // input = output\n\n    this.input = this._gainNode;\n    this.output = this._gainNode;\n    const options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n    this.gain = new Param({\n      context: this.context,\n      convert: options.convert,\n      param: this._gainNode.gain,\n      units: options.units,\n      value: options.gain,\n      minValue: options.minValue,\n      maxValue: options.maxValue\n    });\n    readOnly(this, \"gain\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      convert: true,\n      gain: 1,\n      units: \"gain\"\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    this.gain.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,kBAAtB;AAEA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,aAAT,QAAoD,iBAApD;AAUA;;;;;;;;;;;;;;AAaA,OAAM,MAAOC,IAAP,SAAmFD,aAAnF,CAAuH;EA6B5HE;IACC,MAAMJ,oBAAoB,CAACG,IAAI,CAACE,WAAL,EAAD,EAAqBC,SAArB,EAAgC,CAAC,MAAD,EAAS,OAAT,CAAhC,CAA1B;IA5BQ,YAAe,MAAf;IAYT;;;;IAGQ,iBAAsB,KAAKC,OAAL,CAAaC,UAAb,EAAtB,CAYR,CAVA;;IACS,aAAkB,KAAKC,SAAvB;IACA,cAAmB,KAAKA,SAAxB;IAUR,MAAMC,OAAO,GAAGV,oBAAoB,CAACG,IAAI,CAACE,WAAL,EAAD,EAAqBC,SAArB,EAAgC,CAAC,MAAD,EAAS,OAAT,CAAhC,CAApC;IAEA,KAAKK,IAAL,GAAY,IAAIZ,KAAJ,CAAU;MACrBQ,OAAO,EAAE,KAAKA,OADO;MAErBK,OAAO,EAAEF,OAAO,CAACE,OAFI;MAGrBC,KAAK,EAAE,KAAKJ,SAAL,CAAeE,IAHD;MAIrBG,KAAK,EAAEJ,OAAO,CAACI,KAJM;MAKrBC,KAAK,EAAEL,OAAO,CAACC,IALM;MAMrBK,QAAQ,EAAEN,OAAO,CAACM,QANG;MAOrBC,QAAQ,EAAEP,OAAO,CAACO;IAPG,CAAV,CAAZ;IASAhB,QAAQ,CAAC,IAAD,EAAO,MAAP,CAAR;EACA;;EAEiB,OAAXI,WAAW;IACjB,OAAOa,MAAM,CAACC,MAAP,CAAcjB,aAAa,CAACG,WAAd,EAAd,EAA2C;MACjDO,OAAO,EAAE,IADwC;MAEjDD,IAAI,EAAE,CAF2C;MAGjDG,KAAK,EAAE;IAH0C,CAA3C,CAAP;EAKA;EAED;;;;;EAGAM,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKX,SAAL,CAAeY,UAAf;;IACA,KAAKV,IAAL,CAAUS,OAAV;IACA,OAAO,IAAP;EACA;;AA7D2H","names":["Param","optionsFromArguments","readOnly","ToneAudioNode","Gain","constructor","getDefaults","arguments","context","createGain","_gainNode","options","gain","convert","param","units","value","minValue","maxValue","Object","assign","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/Gain.ts"],"sourcesContent":["import { Param } from \"../context/Param\";\nimport { UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { readOnly } from \"../util/Interface\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"./ToneAudioNode\";\n\ninterface GainOptions<TypeName extends UnitName> extends ToneAudioNodeOptions {\n\tgain: UnitMap[TypeName];\n\tunits: TypeName;\n\tconvert: boolean;\n\tminValue?: number;\n\tmaxValue?: number;\n}\n\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain<TypeName extends \"gain\" | \"decibels\" | \"normalRange\" = \"gain\"> extends ToneAudioNode<GainOptions<TypeName>> {\n\n\treadonly name: string = \"Gain\";\n\n\t/**\n\t * The gain parameter of the gain node.\n\t * @example\n\t * const gainNode = new Tone.Gain(0).toDestination();\n\t * const osc = new Tone.Oscillator().connect(gainNode).start();\n\t * gainNode.gain.rampTo(1, 0.1);\n\t * gainNode.gain.rampTo(0, 2, \"+0.5\");\n\t */\n\treadonly gain: Param<TypeName>;\n\n\t/**\n\t * The wrapped GainNode.\n\t */\n\tprivate _gainNode: GainNode = this.context.createGain();\n\n\t// input = output\n\treadonly input: GainNode = this._gainNode;\n\treadonly output: GainNode = this._gainNode;\n\n\t/**\n\t * @param  gain The initial gain of the GainNode\n\t * @param units The units of the gain parameter.\n\t */\n\tconstructor(gain?: UnitMap[TypeName], units?: TypeName);\n\tconstructor(options?: Partial<GainOptions<TypeName>>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]));\n\t\tconst options = optionsFromArguments(Gain.getDefaults(), arguments, [\"gain\", \"units\"]);\n\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tparam: this._gainNode.gain,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.gain,\n\t\t\tminValue: options.minValue,\n\t\t\tmaxValue: options.maxValue,\n\t\t});\n\t\treadOnly(this, \"gain\");\n\t}\n\n\tstatic getDefaults(): GainOptions<any> {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tconvert: true,\n\t\t\tgain: 1,\n\t\t\tunits: \"gain\",\n\t\t});\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\tthis.gain.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}