{"ast":null,"code":"import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\n\nexport class Effect extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"Effect\";\n    /**\n     * the drywet knob to control the amount of effect\n     */\n\n    this._dryWet = new CrossFade({\n      context: this.context\n    });\n    /**\n     * The wet control is how much of the effected\n     * will pass through to the output. 1 = 100% effected\n     * signal, 0 = 100% dry signal.\n     */\n\n    this.wet = this._dryWet.fade;\n    /**\n     * connect the effectSend to the input of hte effect\n     */\n\n    this.effectSend = new Gain({\n      context: this.context\n    });\n    /**\n     * connect the output of the effect to the effectReturn\n     */\n\n    this.effectReturn = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect input node\n     */\n\n    this.input = new Gain({\n      context: this.context\n    });\n    /**\n     * The effect output\n     */\n\n    this.output = this._dryWet; // connections\n\n    this.input.fan(this._dryWet.a, this.effectSend);\n    this.effectReturn.connect(this._dryWet.b);\n    this.wet.setValueAtTime(options.wet, 0);\n    this._internalChannels = [this.effectReturn, this.effectSend];\n    readOnly(this, \"wet\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      wet: 1\n    });\n  }\n  /**\n   * chains the effect in between the effectSend and effectReturn\n   */\n\n\n  connectEffect(effect) {\n    // add it to the internal channels\n    this._internalChannels.push(effect);\n\n    this.effectSend.chain(effect, this.effectReturn);\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dryWet.dispose();\n\n    this.effectSend.dispose();\n    this.effectReturn.dispose();\n    this.wet.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,gCAA1B;AACA,SAASC,IAAT,QAAqB,sBAArB;AACA,SAASC,aAAT,QAAoD,+BAApD;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AAMA;;;;;;AAKA,OAAM,MAAgBC,MAAhB,SACGF,aADH,CACyB;EAoC9BG,YAAYC,OAAZ,EAAkC;IACjC,MAAMA,OAAN;IAnCQ,YAAe,QAAf;IAET;;;;IAGQ,eAAqB,IAAIN,SAAJ,CAAc;MAAEO,OAAO,EAAE,KAAKA;IAAhB,CAAd,CAArB;IAER;;;;;;IAKA,WAA6B,KAAKC,OAAL,CAAaC,IAA1C;IAEA;;;;IAGU,kBAAmB,IAAIR,IAAJ,CAAS;MAAEM,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAnB;IAEV;;;;IAGU,oBAAqB,IAAIN,IAAJ,CAAS;MAAEM,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAArB;IAEV;;;;IAGA,aAAc,IAAIN,IAAJ,CAAS;MAAEM,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAd;IAEA;;;;IAGA,cAAS,KAAKC,OAAd,CAEkC,CAGjC;;IACA,KAAKE,KAAL,CAAWC,GAAX,CAAe,KAAKH,OAAL,CAAaI,CAA5B,EAA+B,KAAKC,UAApC;IACA,KAAKC,YAAL,CAAkBC,OAAlB,CAA0B,KAAKP,OAAL,CAAaQ,CAAvC;IACA,KAAKC,GAAL,CAASC,cAAT,CAAwBZ,OAAO,CAACW,GAAhC,EAAqC,CAArC;IACA,KAAKE,iBAAL,GAAyB,CAAC,KAAKL,YAAN,EAAoB,KAAKD,UAAzB,CAAzB;IACAV,QAAQ,CAAC,IAAD,EAAO,KAAP,CAAR;EACA;;EAEiB,OAAXiB,WAAW;IACjB,OAAOC,MAAM,CAACC,MAAP,CAAcpB,aAAa,CAACkB,WAAd,EAAd,EAA2C;MACjDH,GAAG,EAAE;IAD4C,CAA3C,CAAP;EAGA;EAED;;;;;EAGUM,aAAa,CAACC,MAAD,EAAkC;IACxD;IACA,KAAKL,iBAAL,CAAuBM,IAAvB,CAA4BD,MAA5B;;IACA,KAAKX,UAAL,CAAgBa,KAAhB,CAAsBF,MAAtB,EAA8B,KAAKV,YAAnC;IACA,OAAO,IAAP;EACA;;EAEDa,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKnB,OAAL,CAAamB,OAAb;;IACA,KAAKd,UAAL,CAAgBc,OAAhB;IACA,KAAKb,YAAL,CAAkBa,OAAlB;IACA,KAAKV,GAAL,CAASU,OAAT;IACA,OAAO,IAAP;EACA;;AAtE6B","names":["CrossFade","Gain","ToneAudioNode","readOnly","Effect","constructor","options","context","_dryWet","fade","input","fan","a","effectSend","effectReturn","connect","b","wet","setValueAtTime","_internalChannels","getDefaults","Object","assign","connectEffect","effect","push","chain","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/Effect.ts"],"sourcesContent":["import { CrossFade } from \"../component/channel/CrossFade\";\nimport { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\n\nexport interface EffectOptions extends ToneAudioNodeOptions {\n\twet: NormalRange;\n}\n/**\n * Effect is the base class for effects. Connect the effect between\n * the effectSend and effectReturn GainNodes, then control the amount of\n * effect which goes to the output using the wet control.\n */\nexport abstract class Effect<Options extends EffectOptions>\n\textends ToneAudioNode<Options> {\n\n\treadonly name: string = \"Effect\";\n\n\t/**\n\t * the drywet knob to control the amount of effect\n\t */\n\tprivate _dryWet: CrossFade = new CrossFade({ context: this.context });\n\n\t/**\n\t * The wet control is how much of the effected\n\t * will pass through to the output. 1 = 100% effected\n\t * signal, 0 = 100% dry signal.\n\t */\n\twet: Signal<\"normalRange\"> = this._dryWet.fade;\n\n\t/**\n\t * connect the effectSend to the input of hte effect\n\t */\n\tprotected effectSend: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * connect the output of the effect to the effectReturn\n\t */\n\tprotected effectReturn: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect input node\n\t */\n\tinput: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * The effect output\n\t */\n\toutput = this._dryWet;\n\n\tconstructor(options: EffectOptions) {\n\t\tsuper(options);\n\n\t\t// connections\n\t\tthis.input.fan(this._dryWet.a, this.effectSend);\n\t\tthis.effectReturn.connect(this._dryWet.b);\n\t\tthis.wet.setValueAtTime(options.wet, 0);\n\t\tthis._internalChannels = [this.effectReturn, this.effectSend];\n\t\treadOnly(this, \"wet\");\n\t}\n\n\tstatic getDefaults(): EffectOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\twet: 1,\n\t\t});\n\t}\n\n\t/**\n\t * chains the effect in between the effectSend and effectReturn\n\t */\n\tprotected connectEffect(effect: ToneAudioNode | AudioNode): this {\n\t\t// add it to the internal channels\n\t\tthis._internalChannels.push(effect);\n\t\tthis.effectSend.chain(effect, this.effectReturn);\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dryWet.dispose();\n\t\tthis.effectSend.dispose();\n\t\tthis.effectReturn.dispose();\n\t\tthis.wet.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}