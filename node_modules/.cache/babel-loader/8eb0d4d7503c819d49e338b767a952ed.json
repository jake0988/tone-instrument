{"ast":null,"code":"import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\n\nexport class Compressor extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n    this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n\n    this._compressor = this.context.createDynamicsCompressor();\n    this.input = this._compressor;\n    this.output = this._compressor;\n    const options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    this.threshold = new Param({\n      minValue: this._compressor.threshold.minValue,\n      maxValue: this._compressor.threshold.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    this.attack = new Param({\n      minValue: this._compressor.attack.minValue,\n      maxValue: this._compressor.attack.maxValue,\n      context: this.context,\n      param: this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    this.release = new Param({\n      minValue: this._compressor.release.minValue,\n      maxValue: this._compressor.release.maxValue,\n      context: this.context,\n      param: this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    this.knee = new Param({\n      minValue: this._compressor.knee.minValue,\n      maxValue: this._compressor.knee.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    this.ratio = new Param({\n      minValue: this._compressor.ratio.minValue,\n      maxValue: this._compressor.ratio.maxValue,\n      context: this.context,\n      convert: false,\n      param: this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    }); // set the defaults\n\n    readOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      attack: 0.003,\n      knee: 30,\n      ratio: 12,\n      release: 0.25,\n      threshold: -24\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n   */\n\n\n  get reduction() {\n    return this._compressor.reduction;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._compressor.disconnect();\n\n    this.attack.dispose();\n    this.release.dispose();\n    this.threshold.dispose();\n    this.ratio.dispose();\n    this.knee.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Param","ToneAudioNode","optionsFromArguments","readOnly","Compressor","constructor","getDefaults","arguments","context","createDynamicsCompressor","_compressor","options","threshold","minValue","maxValue","convert","param","units","value","attack","release","knee","ratio","Object","assign","reduction","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/dynamics/Compressor.ts"],"sourcesContent":["import { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels, Positive, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface CompressorOptions extends ToneAudioNodeOptions {\n\tattack: Time;\n\tknee: Decibels;\n\tratio: Positive;\n\trelease: Time;\n\tthreshold: Decibels;\n}\n\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\nexport class Compressor extends ToneAudioNode<CompressorOptions> {\n\n\treadonly name: string = \"Compressor\";\n\n\t/**\n\t * the compressor node\n\t */\n\tprivate _compressor: DynamicsCompressorNode = this.context.createDynamicsCompressor();\n\treadonly input = this._compressor;\n\treadonly output = this._compressor;\n\n\t/**\n\t * The decibel value above which the compression will start taking effect.\n\t * @min -100\n\t * @max 0\n\t */\n\treadonly threshold: Param<\"decibels\">;\n\n\t/**\n\t * The amount of time (in seconds) to reduce the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly attack: Param<\"time\">;\n\n\t/**\n\t * The amount of time (in seconds) to increase the gain by 10dB.\n\t * @min 0\n\t * @max 1\n\t */\n\treadonly release: Param<\"time\">;\n\n\t/**\n\t * A decibel value representing the range above the threshold where the\n\t * curve smoothly transitions to the \"ratio\" portion.\n\t * @min 0\n\t * @max 40\n\t */\n\treadonly knee: Param<\"decibels\">;\n\n\t/**\n\t * The amount of dB change in input for a 1 dB change in output.\n\t * @min 1\n\t * @max 20\n\t */\n\treadonly ratio: Param<\"positive\">;\n\n\t/**\n\t * @param threshold The value above which the compression starts to be applied.\n\t * @param ratio The gain reduction ratio.\n\t */\n\tconstructor(threshold?: Decibels, ratio?: Positive);\n\tconstructor(options?: Partial<CompressorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n\t\tconst options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n\n\t\tthis.threshold = new Param({\n\t\t\tminValue: this._compressor.threshold.minValue,\n\t\t\tmaxValue: this._compressor.threshold.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.threshold,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.threshold,\n\t\t});\n\n\t\tthis.attack = new Param({\n\t\t\tminValue: this._compressor.attack.minValue,\n\t\t\tmaxValue: this._compressor.attack.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.attack,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.attack,\n\t\t});\n\n\t\tthis.release = new Param({\n\t\t\tminValue: this._compressor.release.minValue,\n\t\t\tmaxValue: this._compressor.release.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tparam: this._compressor.release,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.release,\n\t\t});\n\n\t\tthis.knee = new Param({\n\t\t\tminValue: this._compressor.knee.minValue,\n\t\t\tmaxValue: this._compressor.knee.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.knee,\n\t\t\tunits: \"decibels\",\n\t\t\tvalue: options.knee,\n\t\t});\n\n\t\tthis.ratio = new Param({\n\t\t\tminValue: this._compressor.ratio.minValue,\n\t\t\tmaxValue: this._compressor.ratio.maxValue,\n\t\t\tcontext: this.context,\n\t\t\tconvert: false,\n\t\t\tparam: this._compressor.ratio,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.ratio,\n\t\t});\n\n\t\t// set the defaults\n\t\treadOnly(this, [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n\t}\n\n\tstatic getDefaults(): CompressorOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tattack: 0.003,\n\t\t\tknee: 30,\n\t\t\tratio: 12,\n\t\t\trelease: 0.25,\n\t\t\tthreshold: -24,\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.disconnect();\n\t\tthis.attack.dispose();\n\t\tthis.release.dispose();\n\t\tthis.threshold.dispose();\n\t\tthis.ratio.dispose();\n\t\tthis.knee.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}