{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\n\nexport class PulseOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n    this.name = \"PulseOscillator\";\n    /**\n     * gate the width amount\n     */\n\n    this._widthGate = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * Threshold the signal to turn it into a square\n     */\n\n    this._thresh = new WaveShaper({\n      context: this.context,\n      mapping: val => val <= 0 ? -1 : 1\n    });\n    const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n    this.width = new Signal({\n      context: this.context,\n      units: \"audioRange\",\n      value: options.width\n    });\n    this._triangle = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: \"triangle\"\n    });\n    this.frequency = this._triangle.frequency;\n    this.detune = this._triangle.detune; // connections\n\n    this._triangle.chain(this._thresh, this.output);\n\n    this.width.chain(this._widthGate, this._thresh);\n    readOnly(this, [\"width\", \"frequency\", \"detune\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Source.getDefaults(), {\n      detune: 0,\n      frequency: 440,\n      phase: 0,\n      type: \"pulse\",\n      width: 0.2\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    time = this.toSeconds(time);\n\n    this._triangle.start(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    time = this.toSeconds(time);\n\n    this._triangle.stop(time); // the width is still connected to the output.\n    // that needs to be stopped also\n\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(0, time);\n  }\n\n  _restart(time) {\n    this._triangle.restart(time);\n\n    this._widthGate.gain.cancelScheduledValues(time);\n\n    this._widthGate.gain.setValueAtTime(1, time);\n  }\n  /**\n   * The phase of the oscillator in degrees.\n   */\n\n\n  get phase() {\n    return this._triangle.phase;\n  }\n\n  set phase(phase) {\n    this._triangle.phase = phase;\n  }\n  /**\n   * The type of the oscillator. Always returns \"pulse\".\n   */\n\n\n  get type() {\n    return \"pulse\";\n  }\n  /**\n   * The baseType of the oscillator. Always returns \"pulse\".\n   */\n\n\n  get baseType() {\n    return \"pulse\";\n  }\n  /**\n   * The partials of the waveform. Cannot set partials for this waveform type\n   */\n\n\n  get partials() {\n    return [];\n  }\n  /**\n   * No partials for this waveform type.\n   */\n\n\n  get partialCount() {\n    return 0;\n  }\n  /**\n   * *Internal use* The carrier oscillator type is fed through the\n   * waveshaper node to create the pulse. Using different carrier oscillators\n   * changes oscillator's behavior.\n   */\n\n\n  set carrierType(type) {\n    this._triangle.type = type;\n  }\n\n  asArray() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up method.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._triangle.dispose();\n\n    this.width.dispose();\n\n    this._widthGate.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","Signal","WaveShaper","Source","Oscillator","generateWaveform","PulseOscillator","constructor","getDefaults","arguments","context","gain","mapping","val","options","width","units","value","_triangle","detune","frequency","onstop","phase","type","chain","_thresh","output","_widthGate","Object","assign","_start","time","toSeconds","start","setValueAtTime","_stop","stop","cancelScheduledValues","_restart","restart","baseType","partials","partialCount","carrierType","asArray","length","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/source/oscillator/PulseOscillator.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { AudioRange, Degrees, Frequency, Seconds, Time } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { Signal } from \"../../signal/Signal\";\nimport { WaveShaper } from \"../../signal/WaveShaper\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform, PulseOscillatorOptions, ToneOscillatorInterface } from \"./OscillatorInterface\";\n\nexport { PulseOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source<PulseOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"PulseOscillator\";\n\n\t/**\n\t * The width of the pulse.\n\t * @example\n\t * return Tone.Offline(() => {\n\t * \tconst pulse = new Tone.PulseOscillator(20, 0.8).toDestination().start();\n\t * }, 0.1, 1);\n\t */\n\treadonly width: Signal<\"audioRange\">;\n\n\t/**\n\t * gate the width amount\n\t */\n\tprivate _widthGate: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * the sawtooth oscillator\n\t */\n\tprivate _triangle: Oscillator;\n\n\t/**\n\t * The frequency control.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The detune in cents.\n\t */\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * Threshold the signal to turn it into a square\n\t */\n\tprivate _thresh = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => val <= 0 ? -1 : 1,\n\t});\n\n\t/**\n\t * @param frequency The frequency of the oscillator\n\t * @param width The width of the pulse\n\t */\n\tconstructor(frequency?: Frequency, width?: AudioRange);\n\tconstructor(options?: Partial<PulseOscillatorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]));\n\t\tconst options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n\n\t\tthis.width = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"audioRange\",\n\t\t\tvalue: options.width,\n\t\t});\n\n\t\tthis._triangle = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: \"triangle\",\n\t\t});\n\t\tthis.frequency = this._triangle.frequency;\n\t\tthis.detune = this._triangle.detune;\n\n\t\t// connections\n\t\tthis._triangle.chain(this._thresh, this.output);\n\t\tthis.width.chain(this._widthGate, this._thresh);\n\t\treadOnly(this, [\"width\", \"frequency\", \"detune\"]);\n\t}\n\n\tstatic getDefaults(): PulseOscillatorOptions {\n\t\treturn Object.assign(Source.getDefaults(), {\n\t\t\tdetune: 0,\n\t\t\tfrequency: 440,\n\t\t\tphase: 0,\n\t\t\ttype: \"pulse\" as \"pulse\",\n\t\t\twidth: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.start(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Time): void {\n\t\ttime = this.toSeconds(time);\n\t\tthis._triangle.stop(time);\n\t\t// the width is still connected to the output.\n\t\t// that needs to be stopped also\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(0, time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._triangle.restart(time);\n\t\tthis._widthGate.gain.cancelScheduledValues(time);\n\t\tthis._widthGate.gain.setValueAtTime(1, time);\n\t}\n\n\t/**\n\t * The phase of the oscillator in degrees.\n\t */\n\tget phase(): Degrees {\n\t\treturn this._triangle.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._triangle.phase = phase;\n\t}\n\n\t/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t */\n\tget type(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The baseType of the oscillator. Always returns \"pulse\".\n\t */\n\tget baseType(): \"pulse\" {\n\t\treturn \"pulse\";\n\t}\n\n\t/**\n\t * The partials of the waveform. Cannot set partials for this waveform type\n\t */\n\tget partials(): number[] {\n\t\treturn [];\n\t}\n\n\t/**\n\t * No partials for this waveform type.\n\t */\n\tget partialCount(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * *Internal use* The carrier oscillator type is fed through the \n\t * waveshaper node to create the pulse. Using different carrier oscillators\n\t * changes oscillator's behavior. \n\t */\n\tset carrierType(type: \"triangle\" | \"sine\") {\n\t\tthis._triangle.type = type;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up method.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._triangle.dispose();\n\t\tthis.width.dispose();\n\t\tthis._widthGate.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}