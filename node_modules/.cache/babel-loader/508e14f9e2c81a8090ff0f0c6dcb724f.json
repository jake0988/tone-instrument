{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]].\n * The frequency of the filter, follows the input amplitude curve.\n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n *\n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\n\nexport class AutoWah extends Effect {\n  constructor() {\n    super(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n    this.name = \"AutoWah\";\n    const options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n    this._follower = new Follower({\n      context: this.context,\n      smoothing: options.follower\n    });\n    this._sweepRange = new ScaleExp({\n      context: this.context,\n      min: 0,\n      max: 1,\n      exponent: 0.5\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this._inputBoost = new Gain({\n      context: this.context\n    });\n    this._bandpass = new Filter({\n      context: this.context,\n      rolloff: -48,\n      frequency: 0,\n      Q: options.Q\n    });\n    this._peaking = new Filter({\n      context: this.context,\n      type: \"peaking\"\n    });\n    this._peaking.gain.value = options.gain;\n    this.gain = this._peaking.gain;\n    this.Q = this._bandpass.Q; // the control signal path\n\n    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\n    this._sweepRange.connect(this._bandpass.frequency);\n\n    this._sweepRange.connect(this._peaking.frequency); // the filtered path\n\n\n    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn); // set the initial value\n\n    this._setSweepRange();\n\n    this.sensitivity = options.sensitivity;\n    readOnly(this, [\"gain\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      baseFrequency: 100,\n      octaves: 6,\n      sensitivity: 0,\n      Q: 2,\n      gain: 2,\n      follower: 0.2\n    });\n  }\n  /**\n   * The number of octaves that the filter will sweep above the baseFrequency.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    this._octaves = octaves;\n\n    this._setSweepRange();\n  }\n  /**\n   * The follower's smoothing time\n   */\n\n\n  get follower() {\n    return this._follower.smoothing;\n  }\n\n  set follower(follower) {\n    this._follower.smoothing = follower;\n  }\n  /**\n   * The base frequency from which the sweep will start from.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(baseFreq) {\n    this._baseFrequency = this.toFrequency(baseFreq);\n\n    this._setSweepRange();\n  }\n  /**\n   * The sensitivity to control how responsive to the input signal the filter is.\n   */\n\n\n  get sensitivity() {\n    return gainToDb(1 / this._inputBoost.gain.value);\n  }\n\n  set sensitivity(sensitivity) {\n    this._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n  }\n  /**\n   * sets the sweep range of the scaler\n   */\n\n\n  _setSweepRange() {\n    this._sweepRange.min = this._baseFrequency;\n    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._follower.dispose();\n\n    this._sweepRange.dispose();\n\n    this._bandpass.dispose();\n\n    this._peaking.dispose();\n\n    this._inputBoost.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Effect","Filter","Follower","optionsFromArguments","Gain","dbToGain","gainToDb","ScaleExp","readOnly","AutoWah","constructor","getDefaults","arguments","options","_follower","context","smoothing","follower","_sweepRange","min","max","exponent","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","_inputBoost","_bandpass","rolloff","frequency","Q","_peaking","type","gain","value","effectSend","chain","connect","effectReturn","_setSweepRange","sensitivity","Object","assign","baseFreq","Math","pow","sampleRate","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/AutoWah.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"./Effect\";\nimport { Filter } from \"../component/filter/Filter\";\nimport { Follower } from \"../component/analysis/Follower\";\nimport { Decibels, Frequency, GainFactor, Hertz, Positive, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Gain } from \"../core/context/Gain\";\nimport { dbToGain, gainToDb } from \"../core/type/Conversions\";\nimport { ScaleExp } from \"../signal/ScaleExp\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface AutoWahOptions extends EffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tsensitivity: Decibels;\n\tQ: Positive;\n\tgain: GainFactor;\n\tfollower: Time;\n}\n\n/**\n * AutoWah connects a [[Follower]] to a [[Filter]]. \n * The frequency of the filter, follows the input amplitude curve. \n * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n * \n * @example\n * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();\n * // initialize the synth and connect to autowah\n * const synth = new Tone.Synth().connect(autoWah);\n * // Q value influences the effect of the wah - default is 2\n * autoWah.Q.value = 6;\n * // more audible on higher notes\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Effect\n */\nexport class AutoWah extends Effect<AutoWahOptions> {\n\n\treadonly name: string = \"AutoWah\";\n\n\t/**\n\t * The envelope follower. Set the attack/release\n\t * timing to adjust how the envelope is followed.\n\t */\n\tprivate _follower: Follower;\n\n\t/**\n\t * scales the follower value to the frequency domain\n\t */\n\tprivate _sweepRange: ScaleExp;\n\n\t/**\n\t * Hold the base frequency value\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * Private holder for the octave count\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * the input gain to adjust the sensitivity\n\t */\n\tprivate _inputBoost: Gain;\n\n\t/**\n\t * Private holder for the filter\n\t */\n\tprivate _bandpass: Filter;\n\n\t/**\n\t * The peaking fitler\n\t */\n\tprivate _peaking: Filter;\n\n\t/**\n\t * The gain of the filter.\n\t */\n\treadonly gain: Signal<\"decibels\">;\n\n\t/**\n\t * The quality of the filter.\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * @param baseFrequency The frequency the filter is set to at the low point of the wah\n\t * @param octaves The number of octaves above the baseFrequency the filter will sweep to when fully open. \n\t * @param sensitivity The decibel threshold sensitivity for the incoming signal. Normal range of -40 to 0.\n\t */\n\tconstructor(baseFrequency?: Frequency, octaves?: Positive, sensitivity?: Decibels);\n\tconstructor(options?: Partial<AutoWahOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]));\n\t\tconst options = optionsFromArguments(AutoWah.getDefaults(), arguments, [\"baseFrequency\", \"octaves\", \"sensitivity\"]);\n\n\t\tthis._follower = new Follower({\n\t\t\tcontext: this.context,\n\t\t\tsmoothing: options.follower,\n\t\t});\n\t\tthis._sweepRange = new ScaleExp({\n\t\t\tcontext: this.context,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\texponent: 0.5,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis._inputBoost = new Gain({ context: this.context });\n\t\tthis._bandpass = new Filter({\n\t\t\tcontext: this.context,\n\t\t\trolloff: -48,\n\t\t\tfrequency: 0,\n\t\t\tQ: options.Q,\n\t\t});\n\t\tthis._peaking = new Filter({\n\t\t\tcontext: this.context,\n\t\t\ttype: \"peaking\"\n\t\t});\n\t\tthis._peaking.gain.value = options.gain;\n\t\tthis.gain = this._peaking.gain;\n\t\tthis.Q = this._bandpass.Q;\n\n\t\t// the control signal path\n\t\tthis.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);\n\t\tthis._sweepRange.connect(this._bandpass.frequency);\n\t\tthis._sweepRange.connect(this._peaking.frequency);\n\t\t// the filtered path\n\t\tthis.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t\t// set the initial value\n\t\tthis._setSweepRange();\n\t\tthis.sensitivity = options.sensitivity;\n\n\t\treadOnly(this, [\"gain\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): AutoWahOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tbaseFrequency: 100,\n\t\t\toctaves: 6,\n\t\t\tsensitivity: 0,\n\t\t\tQ: 2,\n\t\t\tgain: 2,\n\t\t\tfollower: 0.2,\n\t\t});\n\t}\n\n\t/**\n\t * The number of octaves that the filter will sweep above the baseFrequency.\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The follower's smoothing time\n\t */\n\tget follower(): Time {\n\t\treturn this._follower.smoothing;\n\t}\n\tset follower(follower) {\n\t\tthis._follower.smoothing = follower;\n\t}\n\n\t/**\n\t * The base frequency from which the sweep will start from.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(baseFreq) {\n\t\tthis._baseFrequency = this.toFrequency(baseFreq);\n\t\tthis._setSweepRange();\n\t}\n\n\t/**\n\t * The sensitivity to control how responsive to the input signal the filter is.\n\t */\n\tget sensitivity(): Decibels {\n\t\treturn gainToDb(1 / this._inputBoost.gain.value);\n\t}\n\tset sensitivity(sensitivity) {\n\t\tthis._inputBoost.gain.value = 1 / dbToGain(sensitivity);\n\t}\n\n\t/**\n\t * sets the sweep range of the scaler\n\t */\n\tprivate _setSweepRange() {\n\t\tthis._sweepRange.min = this._baseFrequency;\n\t\tthis._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._follower.dispose();\n\t\tthis._sweepRange.dispose();\n\t\tthis._bandpass.dispose();\n\t\tthis._peaking.dispose();\n\t\tthis._inputBoost.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}