{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\n\nexport class Split extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n    this.name = \"Split\";\n    const options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n    this._internalChannels = [this._splitter];\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      channels: 2\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._splitter.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAoD,kCAApD;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAMA;;;;;;;;;AAQA,OAAM,MAAOC,KAAP,SAAqBF,aAArB,CAAgD;EAgBrDG;IACC,MAAMF,oBAAoB,CAACC,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAA1B;IAhBQ,YAAe,OAAf;IAiBR,MAAMC,OAAO,GAAGL,oBAAoB,CAACC,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,UAAD,CAAjC,CAApC;IAEA,KAAKE,SAAL,GAAiB,KAAKC,KAAL,GAAa,KAAKC,MAAL,GAAc,KAAKC,OAAL,CAAaC,qBAAb,CAAmCL,OAAO,CAACM,QAA3C,CAA5C;IACA,KAAKC,iBAAL,GAAyB,CAAC,KAAKN,SAAN,CAAzB;EACA;;EAEiB,OAAXH,WAAW;IACjB,OAAOU,MAAM,CAACC,MAAP,CAAcf,aAAa,CAACI,WAAd,EAAd,EAA2C;MACjDQ,QAAQ,EAAE;IADuC,CAA3C,CAAP;EAGA;;EAEDI,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKT,SAAL,CAAeU,UAAf;;IACA,OAAO,IAAP;EACA;;AAlCoD","names":["ToneAudioNode","optionsFromArguments","Split","constructor","getDefaults","arguments","options","_splitter","input","output","context","createChannelSplitter","channels","_internalChannels","Object","assign","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/Split.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\ninterface SplitOptions extends ToneAudioNodeOptions {\n\tchannels: number;\n}\n\n/**\n * Split splits an incoming signal into the number of given channels.\n *\n * @example\n * const split = new Tone.Split();\n * // stereoSignal.connect(split);\n * @category Component\n */\nexport class Split extends ToneAudioNode<SplitOptions> {\n\treadonly name: string = \"Split\";\n\n\t/**\n\t * The splitting node\n\t */\n\tprivate _splitter: ChannelSplitterNode;\n\n\treadonly input: ChannelSplitterNode;\n\treadonly output: ChannelSplitterNode;\n\n\t/**\n\t * @param channels The number of channels to merge.\n\t */\n\tconstructor(channels?: number);\n\tconstructor(options?: Partial<SplitOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]));\n\t\tconst options = optionsFromArguments(Split.getDefaults(), arguments, [\"channels\"]);\n\n\t\tthis._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);\n\t\tthis._internalChannels = [this._splitter];\n\t}\n\n\tstatic getDefaults(): SplitOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tchannels: 2,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._splitter.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}