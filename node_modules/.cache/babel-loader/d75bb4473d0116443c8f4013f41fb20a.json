{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\n\nexport class Convolver extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n    this.name = \"Convolver\";\n    /**\n     * The native ConvolverNode\n     */\n\n    this._convolver = this.context.createConvolver();\n    const options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n    this._buffer = new ToneAudioBuffer(options.url, buffer => {\n      this.buffer = buffer;\n      options.onload();\n    });\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    }); // set if it's already loaded, set it immediately\n\n    if (this._buffer.loaded) {\n      this.buffer = this._buffer;\n    } // initially set normalization\n\n\n    this.normalize = options.normalize; // connect it up\n\n    this.input.chain(this._convolver, this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      normalize: true,\n      onload: noOp\n    });\n  }\n  /**\n   * Load an impulse response url as an audio buffer.\n   * Decodes the audio asynchronously and invokes\n   * the callback once the audio buffer loads.\n   * @param url The url of the buffer to load. filetype support depends on the browser.\n   */\n\n\n  load(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.buffer = yield this._buffer.load(url);\n    });\n  }\n  /**\n   * The convolver's buffer\n   */\n\n\n  get buffer() {\n    if (this._buffer.length) {\n      return this._buffer;\n    } else {\n      return null;\n    }\n  }\n\n  set buffer(buffer) {\n    if (buffer) {\n      this._buffer.set(buffer);\n    } // if it's already got a buffer, create a new one\n\n\n    if (this._convolver.buffer) {\n      // disconnect the old one\n      this.input.disconnect();\n\n      this._convolver.disconnect(); // create and connect a new one\n\n\n      this._convolver = this.context.createConvolver();\n      this.input.chain(this._convolver, this.output);\n    }\n\n    const buff = this._buffer.get();\n\n    this._convolver.buffer = buff ? buff : null;\n  }\n  /**\n   * The normalize property of the ConvolverNode interface is a boolean that\n   * controls whether the impulse response from the buffer will be scaled by\n   * an equal-power normalization when the buffer attribute is set, or not.\n   */\n\n\n  get normalize() {\n    return this._convolver.normalize;\n  }\n\n  set normalize(norm) {\n    this._convolver.normalize = norm;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._buffer.dispose();\n\n    this._convolver.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ToneAudioNode","ToneAudioBuffer","optionsFromArguments","Gain","noOp","Convolver","constructor","getDefaults","arguments","context","createConvolver","options","_buffer","url","buffer","onload","input","output","loaded","normalize","chain","_convolver","Object","assign","load","length","set","disconnect","buff","get","norm","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/filter/Convolver.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { noOp } from \"../../core/util/Interface\";\n\nexport interface ConvolverOptions extends ToneAudioNodeOptions {\n\tonload: () => void;\n\tnormalize: boolean;\n\turl?: string | AudioBuffer | ToneAudioBuffer;\n}\n\n/**\n * Convolver is a wrapper around the Native Web Audio\n * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n *\n * @example\n * // initializing the convolver with an impulse response\n * const convolver = new Tone.Convolver(\"./path/to/ir.wav\").toDestination();\n * @category Component\n */\nexport class Convolver extends ToneAudioNode<ConvolverOptions> {\n\n\treadonly name: string = \"Convolver\";\n\n\t/**\n\t * The native ConvolverNode\n\t */\n\tprivate _convolver: ConvolverNode = this.context.createConvolver();\n\n\t/**\n\t * The Buffer belonging to the convolver\n\t */\n\tprivate _buffer: ToneAudioBuffer;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param url The URL of the impulse response or the ToneAudioBuffer containing the impulse response.\n\t * @param onload The callback to invoke when the url is loaded.\n\t */\n\tconstructor(url?: string | AudioBuffer | ToneAudioBuffer, onload?: () => void);\n\tconstructor(options?: Partial<ConvolverOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]));\n\t\tconst options = optionsFromArguments(Convolver.getDefaults(), arguments, [\"url\", \"onload\"]);\n\n\t\tthis._buffer = new ToneAudioBuffer(options.url, buffer => {\n\t\t\tthis.buffer = buffer;\n\t\t\toptions.onload();\n\t\t});\n\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\n\t\t// set if it's already loaded, set it immediately\n\t\tif (this._buffer.loaded) {\n\t\t\tthis.buffer = this._buffer;\n\t\t}\n\n\t\t// initially set normalization\n\t\tthis.normalize = options.normalize;\n\n\t\t// connect it up\n\t\tthis.input.chain(this._convolver, this.output);\n\t}\n\n\tstatic getDefaults(): ConvolverOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tnormalize: true,\n\t\t\tonload: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Load an impulse response url as an audio buffer.\n\t * Decodes the audio asynchronously and invokes\n\t * the callback once the audio buffer loads.\n\t * @param url The url of the buffer to load. filetype support depends on the browser.\n\t */\n\tasync load(url: string): Promise<void> {\n\t\tthis.buffer = await this._buffer.load(url);\n\t}\n\n\t/**\n\t * The convolver's buffer\n\t */\n\tget buffer(): ToneAudioBuffer | null {\n\t\tif (this._buffer.length) {\n\t\t\treturn this._buffer;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tset buffer(buffer) {\n\t\tif (buffer) {\n\t\t\tthis._buffer.set(buffer);\n\t\t}\n\t\t// if it's already got a buffer, create a new one\n\t\tif (this._convolver.buffer) {\n\t\t\t// disconnect the old one\n\t\t\tthis.input.disconnect();\n\t\t\tthis._convolver.disconnect();\n\t\t\t// create and connect a new one\n\t\t\tthis._convolver = this.context.createConvolver();\n\t\t\tthis.input.chain(this._convolver, this.output);\n\t\t}\n\t\tconst buff = this._buffer.get();\n\t\tthis._convolver.buffer = buff ? buff : null;\n\t}\n\n\t/**\n\t * The normalize property of the ConvolverNode interface is a boolean that\n\t * controls whether the impulse response from the buffer will be scaled by\n\t * an equal-power normalization when the buffer attribute is set, or not.\n\t */\n\tget normalize(): boolean {\n\t\treturn this._convolver.normalize;\n\t}\n\tset normalize(norm) {\n\t\tthis._convolver.normalize = norm;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._buffer.dispose();\n\t\tthis._convolver.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}