{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\n\nexport class Phaser extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n    this.name = \"Phaser\";\n    const options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    this._baseFrequency = this.toFrequency(options.baseFrequency);\n    this._octaves = options.octaves;\n    this.Q = new Signal({\n      context: this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    this._filtersL = this._makeFilters(options.stages, this._lfoL);\n    this._filtersR = this._makeFilters(options.stages, this._lfoR);\n    this.frequency = this._lfoL.frequency;\n    this.frequency.value = options.frequency; // connect them up\n\n    this.connectEffectLeft(...this._filtersL);\n    this.connectEffectRight(...this._filtersR); // control the frequency with one LFO\n\n    this._lfoL.frequency.connect(this._lfoR.frequency); // set the options\n\n\n    this.baseFrequency = options.baseFrequency;\n    this.octaves = options.octaves; // start the lfo\n\n    this._lfoL.start();\n\n    this._lfoR.start();\n\n    readOnly(this, [\"frequency\", \"Q\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 0.5,\n      octaves: 3,\n      stages: 10,\n      Q: 10,\n      baseFrequency: 350\n    });\n  }\n\n  _makeFilters(stages, connectToFreq) {\n    const filters = []; // make all the filters\n\n    for (let i = 0; i < stages; i++) {\n      const filter = this.context.createBiquadFilter();\n      filter.type = \"allpass\";\n      this.Q.connect(filter.Q);\n      connectToFreq.connect(filter.frequency);\n      filters.push(filter);\n    }\n\n    return filters;\n  }\n  /**\n   * The number of octaves the phase goes above the baseFrequency\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(octaves) {\n    this._octaves = octaves;\n    const max = this._baseFrequency * Math.pow(2, octaves);\n    this._lfoL.max = max;\n    this._lfoR.max = max;\n  }\n  /**\n   * The the base frequency of the filters.\n   */\n\n\n  get baseFrequency() {\n    return this._baseFrequency;\n  }\n\n  set baseFrequency(freq) {\n    this._baseFrequency = this.toFrequency(freq);\n    this._lfoL.min = this._baseFrequency;\n    this._lfoR.min = this._baseFrequency;\n    this.octaves = this._octaves;\n  }\n\n  dispose() {\n    super.dispose();\n    this.Q.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._filtersL.forEach(f => f.disconnect());\n\n    this._filtersR.forEach(f => f.disconnect());\n\n    this.frequency.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAAkD,gBAAlD;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAUA;;;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,MAAP,SAAsBL,YAAtB,CAAiD;EAmDtDM;IAEC,MAAML,oBAAoB,CAACI,MAAM,CAACE,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,WAAD,EAAc,SAAd,EAAyB,eAAzB,CAAlC,CAA1B;IAnDQ,YAAe,QAAf;IAoDR,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,MAAM,CAACE,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,WAAD,EAAc,SAAd,EAAyB,eAAzB,CAAlC,CAApC;IAEA,KAAKE,KAAL,GAAa,IAAIR,GAAJ,CAAQ;MACpBS,OAAO,EAAE,KAAKA,OADM;MAEpBC,SAAS,EAAEH,OAAO,CAACG,SAFC;MAGpBC,GAAG,EAAE,CAHe;MAIpBC,GAAG,EAAE;IAJe,CAAR,CAAb;IAMA,KAAKC,KAAL,GAAa,IAAIb,GAAJ,CAAQ;MACpBS,OAAO,EAAE,KAAKA,OADM;MAEpBC,SAAS,EAAEH,OAAO,CAACG,SAFC;MAGpBC,GAAG,EAAE,CAHe;MAIpBC,GAAG,EAAE,CAJe;MAKpBE,KAAK,EAAE;IALa,CAAR,CAAb;IAOA,KAAKC,cAAL,GAAsB,KAAKC,WAAL,CAAiBT,OAAO,CAACU,aAAzB,CAAtB;IACA,KAAKC,QAAL,GAAgBX,OAAO,CAACY,OAAxB;IACA,KAAKC,CAAL,GAAS,IAAInB,MAAJ,CAAW;MACnBQ,OAAO,EAAE,KAAKA,OADK;MAEnBY,KAAK,EAAEd,OAAO,CAACa,CAFI;MAGnBE,KAAK,EAAE;IAHY,CAAX,CAAT;IAKA,KAAKC,SAAL,GAAiB,KAAKC,YAAL,CAAkBjB,OAAO,CAACkB,MAA1B,EAAkC,KAAKjB,KAAvC,CAAjB;IACA,KAAKkB,SAAL,GAAiB,KAAKF,YAAL,CAAkBjB,OAAO,CAACkB,MAA1B,EAAkC,KAAKZ,KAAvC,CAAjB;IAEA,KAAKH,SAAL,GAAiB,KAAKF,KAAL,CAAWE,SAA5B;IACA,KAAKA,SAAL,CAAeW,KAAf,GAAuBd,OAAO,CAACG,SAA/B,CA7BD,CA+BC;;IACA,KAAKiB,iBAAL,CAAuB,GAAG,KAAKJ,SAA/B;IACA,KAAKK,kBAAL,CAAwB,GAAG,KAAKF,SAAhC,EAjCD,CAkCC;;IACA,KAAKlB,KAAL,CAAWE,SAAX,CAAqBmB,OAArB,CAA6B,KAAKhB,KAAL,CAAWH,SAAxC,EAnCD,CAoCC;;;IACA,KAAKO,aAAL,GAAqBV,OAAO,CAACU,aAA7B;IACA,KAAKE,OAAL,GAAeZ,OAAO,CAACY,OAAvB,CAtCD,CAuCC;;IACA,KAAKX,KAAL,CAAWsB,KAAX;;IACA,KAAKjB,KAAL,CAAWiB,KAAX;;IACA5B,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,GAAd,CAAP,CAAR;EACA;;EAEiB,OAAXG,WAAW;IACjB,OAAO0B,MAAM,CAACC,MAAP,CAAclC,YAAY,CAACO,WAAb,EAAd,EAA0C;MAChDK,SAAS,EAAE,GADqC;MAEhDS,OAAO,EAAE,CAFuC;MAGhDM,MAAM,EAAE,EAHwC;MAIhDL,CAAC,EAAE,EAJ6C;MAKhDH,aAAa,EAAE;IALiC,CAA1C,CAAP;EAOA;;EAEOO,YAAY,CAACC,MAAD,EAAiBQ,aAAjB,EAAmC;IACtD,MAAMC,OAAO,GAAuB,EAApC,CADsD,CAEtD;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAApB,EAA4BU,CAAC,EAA7B,EAAiC;MAChC,MAAMC,MAAM,GAAG,KAAK3B,OAAL,CAAa4B,kBAAb,EAAf;MACAD,MAAM,CAACE,IAAP,GAAc,SAAd;MACA,KAAKlB,CAAL,CAAOS,OAAP,CAAeO,MAAM,CAAChB,CAAtB;MACAa,aAAa,CAACJ,OAAd,CAAsBO,MAAM,CAAC1B,SAA7B;MACAwB,OAAO,CAACK,IAAR,CAAaH,MAAb;IACA;;IACD,OAAOF,OAAP;EACA;EAED;;;;;EAGW,IAAPf,OAAO;IACV,OAAO,KAAKD,QAAZ;EACA;;EACU,IAAPC,OAAO,CAACA,OAAD,EAAQ;IAClB,KAAKD,QAAL,GAAgBC,OAAhB;IACA,MAAMP,GAAG,GAAG,KAAKG,cAAL,GAAsByB,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYtB,OAAZ,CAAlC;IACA,KAAKX,KAAL,CAAWI,GAAX,GAAiBA,GAAjB;IACA,KAAKC,KAAL,CAAWD,GAAX,GAAiBA,GAAjB;EACA;EAED;;;;;EAGiB,IAAbK,aAAa;IAChB,OAAO,KAAKF,cAAZ;EACA;;EACgB,IAAbE,aAAa,CAACyB,IAAD,EAAK;IACrB,KAAK3B,cAAL,GAAsB,KAAKC,WAAL,CAAiB0B,IAAjB,CAAtB;IACA,KAAKlC,KAAL,CAAWG,GAAX,GAAiB,KAAKI,cAAtB;IACA,KAAKF,KAAL,CAAWF,GAAX,GAAiB,KAAKI,cAAtB;IACA,KAAKI,OAAL,GAAe,KAAKD,QAApB;EACA;;EAEDyB,OAAO;IACN,MAAMA,OAAN;IACA,KAAKvB,CAAL,CAAOuB,OAAP;;IACA,KAAKnC,KAAL,CAAWmC,OAAX;;IACA,KAAK9B,KAAL,CAAW8B,OAAX;;IACA,KAAKpB,SAAL,CAAeqB,OAAf,CAAuBC,CAAC,IAAIA,CAAC,CAACC,UAAF,EAA5B;;IACA,KAAKpB,SAAL,CAAekB,OAAf,CAAuBC,CAAC,IAAIA,CAAC,CAACC,UAAF,EAA5B;;IACA,KAAKpC,SAAL,CAAeiC,OAAf;IACA,OAAO,IAAP;EACA;;AA1JqD","names":["StereoEffect","optionsFromArguments","LFO","Signal","readOnly","Phaser","constructor","getDefaults","arguments","options","_lfoL","context","frequency","min","max","_lfoR","phase","_baseFrequency","toFrequency","baseFrequency","_octaves","octaves","Q","value","units","_filtersL","_makeFilters","stages","_filtersR","connectEffectLeft","connectEffectRight","connect","start","Object","assign","connectToFreq","filters","i","filter","createBiquadFilter","type","push","Math","pow","freq","dispose","forEach","f","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/Phaser.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, Hertz, Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PhaserOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\toctaves: Positive;\n\tstages: Positive;\n\tQ: Positive;\n\tbaseFrequency: Frequency;\n}\n\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\nexport class Phaser extends StereoEffect<PhaserOptions> {\n\n\treadonly name: string = \"Phaser\";\n\n\t/**\n\t * the lfo which controls the frequency on the left side\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * the lfo which controls the frequency on the right side\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * the base modulation frequency\n\t */\n\tprivate _baseFrequency: Hertz;\n\n\t/**\n\t * the octaves of the phasing\n\t */\n\tprivate _octaves: Positive;\n\n\t/**\n\t * The quality factor of the filters\n\t */\n\treadonly Q: Signal<\"positive\">;\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersL: BiquadFilterNode[];\n\n\t/**\n\t * the array of filters for the left side\n\t */\n\tprivate _filtersR: BiquadFilterNode[];\n\n\t/**\n\t * the frequency of the effect\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * @param frequency The speed of the phasing.\n\t * @param octaves The octaves of the effect.\n\t * @param baseFrequency The base frequency of the filters.\n\t */\n\tconstructor(frequency?: Frequency, octaves?: Positive, baseFrequency?: Frequency);\n\tconstructor(options?: Partial<PhaserOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n\t\tconst options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tmin: 0,\n\t\t\tmax: 1,\n\t\t\tphase: 180,\n\t\t});\n\t\tthis._baseFrequency = this.toFrequency(options.baseFrequency);\n\t\tthis._octaves = options.octaves;\n\t\tthis.Q = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.Q,\n\t\t\tunits: \"positive\",\n\t\t});\n\t\tthis._filtersL = this._makeFilters(options.stages, this._lfoL);\n\t\tthis._filtersR = this._makeFilters(options.stages, this._lfoR);\n\n\t\tthis.frequency = this._lfoL.frequency;\n\t\tthis.frequency.value = options.frequency;\n\n\t\t// connect them up\n\t\tthis.connectEffectLeft(...this._filtersL);\n\t\tthis.connectEffectRight(...this._filtersR);\n\t\t// control the frequency with one LFO\n\t\tthis._lfoL.frequency.connect(this._lfoR.frequency);\n\t\t// set the options\n\t\tthis.baseFrequency = options.baseFrequency;\n\t\tthis.octaves = options.octaves;\n\t\t// start the lfo\n\t\tthis._lfoL.start();\n\t\tthis._lfoR.start();\n\t\treadOnly(this, [\"frequency\", \"Q\"]);\n\t}\n\n\tstatic getDefaults(): PhaserOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 0.5,\n\t\t\toctaves: 3,\n\t\t\tstages: 10,\n\t\t\tQ: 10,\n\t\t\tbaseFrequency: 350,\n\t\t});\n\t}\n\n\tprivate _makeFilters(stages: number, connectToFreq: LFO): BiquadFilterNode[] {\n\t\tconst filters: BiquadFilterNode[] = [];\n\t\t// make all the filters\n\t\tfor (let i = 0; i < stages; i++) {\n\t\t\tconst filter = this.context.createBiquadFilter();\n\t\t\tfilter.type = \"allpass\";\n\t\t\tthis.Q.connect(filter.Q);\n\t\t\tconnectToFreq.connect(filter.frequency);\n\t\t\tfilters.push(filter);\n\t\t}\n\t\treturn filters;\n\t}\n\n\t/**\n\t * The number of octaves the phase goes above the baseFrequency\n\t */\n\tget octaves() {\n\t\treturn this._octaves;\n\t}\n\tset octaves(octaves) {\n\t\tthis._octaves = octaves;\n\t\tconst max = this._baseFrequency * Math.pow(2, octaves);\n\t\tthis._lfoL.max = max;\n\t\tthis._lfoR.max = max;\n\t}\n\n\t/**\n\t * The the base frequency of the filters.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._baseFrequency;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._baseFrequency = this.toFrequency(freq);\n\t\tthis._lfoL.min = this._baseFrequency;\n\t\tthis._lfoR.min = this._baseFrequency;\n\t\tthis.octaves = this._octaves;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.Q.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._filtersL.forEach(f => f.disconnect());\n\t\tthis._filtersR.forEach(f => f.disconnect());\n\t\tthis.frequency.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}