{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport class Tremolo extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    this.name = \"Tremolo\";\n    const options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    this._lfoL = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._lfoR = new LFO({\n      context: this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    this._amplitudeL = new Gain({\n      context: this.context\n    });\n    this._amplitudeR = new Gain({\n      context: this.context\n    });\n    this.frequency = new Signal({\n      context: this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    this.depth = new Signal({\n      context: this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(this, [\"frequency\", \"depth\"]);\n    this.connectEffectLeft(this._amplitudeL);\n    this.connectEffectRight(this._amplitudeR);\n\n    this._lfoL.connect(this._amplitudeL.gain);\n\n    this._lfoR.connect(this._amplitudeR.gain);\n\n    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n    this.spread = options.spread;\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      frequency: 10,\n      type: \"sine\",\n      depth: 0.5,\n      spread: 180\n    });\n  }\n  /**\n   * Start the tremolo.\n   */\n\n\n  start(time) {\n    this._lfoL.start(time);\n\n    this._lfoR.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the tremolo.\n   */\n\n\n  stop(time) {\n    this._lfoL.stop(time);\n\n    this._lfoR.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the effect to the transport.\n   */\n\n\n  sync() {\n    this._lfoL.sync();\n\n    this._lfoR.sync();\n\n    this.context.transport.syncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport\n   */\n\n\n  unsync() {\n    this._lfoL.unsync();\n\n    this._lfoR.unsync();\n\n    this.context.transport.unsyncSignal(this.frequency);\n    return this;\n  }\n  /**\n   * The oscillator type.\n   */\n\n\n  get type() {\n    return this._lfoL.type;\n  }\n\n  set type(type) {\n    this._lfoL.type = type;\n    this._lfoR.type = type;\n  }\n  /**\n   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n   * When set to 180, LFO's will be panned hard left and right respectively.\n   */\n\n\n  get spread() {\n    return this._lfoR.phase - this._lfoL.phase; // 180\n  }\n\n  set spread(spread) {\n    this._lfoL.phase = 90 - spread / 2;\n    this._lfoR.phase = spread / 2 + 90;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfoL.dispose();\n\n    this._lfoR.dispose();\n\n    this._amplitudeL.dispose();\n\n    this._amplitudeR.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["StereoEffect","LFO","Gain","Signal","optionsFromArguments","readOnly","Tremolo","constructor","getDefaults","arguments","options","_lfoL","context","type","min","max","_lfoR","_amplitudeL","_amplitudeR","frequency","value","units","depth","connectEffectLeft","connectEffectRight","connect","gain","fan","amplitude","spread","Object","assign","start","time","stop","sync","transport","syncSignal","unsync","unsyncSignal","phase","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/Tremolo.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { Degrees, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface TremoloOptions extends StereoEffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n\tspread: Degrees;\n}\n\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n * \n * @category Effect\n */\nexport class Tremolo extends StereoEffect<TremoloOptions> {\n\n\treadonly name: string = \"Tremolo\";\n\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoL: LFO;\n\n\t/**\n\t * The tremolo LFO in the left channel\n\t */\n\tprivate _lfoR: LFO;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeL: Gain;\n\n\t/**\n\t * Where the gain is multiplied\n\t */\n\tprivate _amplitudeR: Gain;\n\n\t/**\n\t * The frequency of the tremolo.\n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\t/**\n\t * The depth of the effect. A depth of 0, has no effect\n\t * on the amplitude, and a depth of 1 makes the amplitude\n\t * modulate fully between 0 and 1.\n\t */\n\treadonly depth: Signal<\"normalRange\">;\n\n\t/**\n\t * @param frequency The rate of the effect.\n\t * @param depth The depth of the effect.\n\t */\n\tconstructor(frequency?: Frequency, depth?: NormalRange);\n\tconstructor(options?: Partial<TremoloOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n\t\tconst options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n\n\t\tthis._lfoL = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._lfoR = new LFO({\n\t\t\tcontext: this.context,\n\t\t\ttype: options.type,\n\t\t\tmin: 1,\n\t\t\tmax: 0,\n\t\t});\n\t\tthis._amplitudeL = new Gain({ context: this.context });\n\t\tthis._amplitudeR = new Gain({ context: this.context });\n\t\tthis.frequency = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.frequency,\n\t\t\tunits: \"frequency\",\n\t\t});\n\t\tthis.depth = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.depth,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t\tthis.connectEffectLeft(this._amplitudeL);\n\t\tthis.connectEffectRight(this._amplitudeR);\n\t\tthis._lfoL.connect(this._amplitudeL.gain);\n\t\tthis._lfoR.connect(this._amplitudeR.gain);\n\t\tthis.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t\tthis.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t\tthis.spread = options.spread;\n\t}\n\n\tstatic getDefaults(): TremoloOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\tfrequency: 10,\n\t\t\ttype: \"sine\" as \"sine\",\n\t\t\tdepth: 0.5,\n\t\t\tspread: 180,\n\t\t});\n\t}\n\n\t/**\n\t * Start the tremolo.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfoL.start(time);\n\t\tthis._lfoR.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the tremolo.\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfoL.stop(time);\n\t\tthis._lfoR.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the effect to the transport.\n\t */\n\tsync(): this {\n\t\tthis._lfoL.sync();\n\t\tthis._lfoR.sync();\n\t\tthis.context.transport.syncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport\n\t */\n\tunsync(): this {\n\t\tthis._lfoL.unsync();\n\t\tthis._lfoR.unsync();\n\t\tthis.context.transport.unsyncSignal(this.frequency);\n\t\treturn this;\n\t}\n\n\t/**\n\t * The oscillator type.\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._lfoL.type;\n\t}\n\tset type(type) {\n\t\tthis._lfoL.type = type;\n\t\tthis._lfoR.type = type;\n\t}\n\n\t/**\n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t */\n\tget spread(): Degrees {\n\t\treturn this._lfoR.phase - this._lfoL.phase; // 180\n\t}\n\tset spread(spread) {\n\t\tthis._lfoL.phase = 90 - (spread / 2);\n\t\tthis._lfoR.phase = (spread / 2) + 90;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfoL.dispose();\n\t\tthis._lfoR.dispose();\n\t\tthis._amplitudeL.dispose();\n\t\tthis._amplitudeR.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}