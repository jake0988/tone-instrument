{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\n\nexport class MidSideMerge extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n    this.name = \"MidSideMerge\";\n    this.mid = new Gain({\n      context: this.context\n    });\n    this.side = new Gain({\n      context: this.context\n    });\n    this._left = new Add({\n      context: this.context\n    });\n    this._leftMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._right = new Subtract({\n      context: this.context\n    });\n    this._rightMult = new Multiply({\n      context: this.context,\n      value: Math.SQRT1_2\n    });\n    this._merge = this.output = new Merge({\n      context: this.context\n    });\n    this.mid.fan(this._left);\n    this.side.connect(this._left.addend);\n    this.mid.connect(this._right);\n    this.side.connect(this._right.subtrahend);\n\n    this._left.connect(this._leftMult);\n\n    this._right.connect(this._rightMult);\n\n    this._leftMult.connect(this._merge, 0, 0);\n\n    this._rightMult.connect(this._merge, 0, 1);\n  }\n\n  dispose() {\n    super.dispose();\n    this.mid.dispose();\n    this.side.dispose();\n\n    this._leftMult.dispose();\n\n    this._rightMult.dispose();\n\n    this._left.dispose();\n\n    this._right.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAoD,kCAApD;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,oBAAT,QAAqC,0BAArC;AAIA;;;;;;;;;AAQA,OAAM,MAAOC,YAAP,SAA4BP,aAA5B,CAA8D;EAkDnEQ;IACC,MAAMF,oBAAoB,CAACC,YAAY,CAACE,WAAb,EAAD,EAA6BC,SAA7B,CAA1B;IAjDQ,YAAe,cAAf;IAkDR,KAAKC,GAAL,GAAW,IAAIN,IAAJ,CAAS;MAAEO,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAX;IACA,KAAKC,IAAL,GAAY,IAAIR,IAAJ,CAAS;MAAEO,OAAO,EAAE,KAAKA;IAAhB,CAAT,CAAZ;IACA,KAAKE,KAAL,GAAa,IAAIZ,GAAJ,CAAQ;MAAEU,OAAO,EAAE,KAAKA;IAAhB,CAAR,CAAb;IACA,KAAKG,SAAL,GAAiB,IAAIZ,QAAJ,CAAa;MAC7BS,OAAO,EAAE,KAAKA,OADe;MAE7BI,KAAK,EAAEC,IAAI,CAACC;IAFiB,CAAb,CAAjB;IAIA,KAAKC,MAAL,GAAc,IAAIf,QAAJ,CAAa;MAAEQ,OAAO,EAAE,KAAKA;IAAhB,CAAb,CAAd;IACA,KAAKQ,UAAL,GAAkB,IAAIjB,QAAJ,CAAa;MAC9BS,OAAO,EAAE,KAAKA,OADgB;MAE9BI,KAAK,EAAEC,IAAI,CAACC;IAFkB,CAAb,CAAlB;IAIA,KAAKG,MAAL,GAAc,KAAKC,MAAL,GAAc,IAAIrB,KAAJ,CAAU;MAAEW,OAAO,EAAE,KAAKA;IAAhB,CAAV,CAA5B;IAEA,KAAKD,GAAL,CAASY,GAAT,CAAa,KAAKT,KAAlB;IACA,KAAKD,IAAL,CAAUW,OAAV,CAAkB,KAAKV,KAAL,CAAWW,MAA7B;IACA,KAAKd,GAAL,CAASa,OAAT,CAAiB,KAAKL,MAAtB;IACA,KAAKN,IAAL,CAAUW,OAAV,CAAkB,KAAKL,MAAL,CAAYO,UAA9B;;IACA,KAAKZ,KAAL,CAAWU,OAAX,CAAmB,KAAKT,SAAxB;;IACA,KAAKI,MAAL,CAAYK,OAAZ,CAAoB,KAAKJ,UAAzB;;IACA,KAAKL,SAAL,CAAeS,OAAf,CAAuB,KAAKH,MAA5B,EAAoC,CAApC,EAAuC,CAAvC;;IACA,KAAKD,UAAL,CAAgBI,OAAhB,CAAwB,KAAKH,MAA7B,EAAqC,CAArC,EAAwC,CAAxC;EACA;;EAEDM,OAAO;IACN,MAAMA,OAAN;IACA,KAAKhB,GAAL,CAASgB,OAAT;IACA,KAAKd,IAAL,CAAUc,OAAV;;IACA,KAAKZ,SAAL,CAAeY,OAAf;;IACA,KAAKP,UAAL,CAAgBO,OAAhB;;IACA,KAAKb,KAAL,CAAWa,OAAX;;IACA,KAAKR,MAAL,CAAYQ,OAAZ;;IACA,OAAO,IAAP;EACA;;AArFkE","names":["ToneAudioNode","Merge","Add","Multiply","Subtract","Gain","optionsFromArguments","MidSideMerge","constructor","getDefaults","arguments","mid","context","side","_left","_leftMult","value","Math","SQRT1_2","_right","_rightMult","_merge","output","fan","connect","addend","subtrahend","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/MidSideMerge.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Merge } from \"./Merge\";\nimport { Add } from \"../../signal/Add\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Subtract } from \"../../signal/Subtract\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\n\nexport type MidSideMergeOptions = ToneAudioNodeOptions;\n\n/**\n * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideSplit]]\n * ```\n * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right\n * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right\n * ```\n * @category Component\n */\nexport class MidSideMerge extends ToneAudioNode<MidSideMergeOptions> {\n\t\n\treadonly name: string = \"MidSideMerge\";\n\n\t/**\n\t * There is no input, connect sources to either [[mid]] or [[side]] inputs.\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The merged signal\n\t */\n\treadonly output: Merge;\n\n\t/**\n\t * Merge the incoming signal into left and right channels\n\t */\n\tprivate _merge: Merge;\n\n\t/**\n\t * The \"mid\" input.\n\t */\n\treadonly mid: ToneAudioNode;\n\n\t/**\n\t * The \"side\" input.\n\t */\n\treadonly side: ToneAudioNode;\n\n\t/**\n\t * Recombine the mid/side into Left\n\t */\n\tprivate _left: Add;\n\n\t/**\n\t * Recombine the mid/side into Right\n\t */\n\tprivate _right: Subtract;\n\n\t/**\n\t * Multiply the right by sqrt(1/2)\n\t */\n\tprivate _leftMult: Multiply;\n\n\t/**\n\t * Multiply the left by sqrt(1/2)\n\t */\n\tprivate _rightMult: Multiply;\n\t\n\tconstructor(options?: Partial<MidSideMergeOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(MidSideMerge.getDefaults(), arguments));\n\t\tthis.mid = new Gain({ context: this.context });\n\t\tthis.side = new Gain({ context: this.context });\n\t\tthis._left = new Add({ context: this.context });\n\t\tthis._leftMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._right = new Subtract({ context: this.context });\n\t\tthis._rightMult = new Multiply({\n\t\t\tcontext: this.context, \n\t\t\tvalue: Math.SQRT1_2\n\t\t});\n\t\tthis._merge = this.output = new Merge({ context: this.context });\n\n\t\tthis.mid.fan(this._left);\n\t\tthis.side.connect(this._left.addend);\n\t\tthis.mid.connect(this._right);\n\t\tthis.side.connect(this._right.subtrahend);\n\t\tthis._left.connect(this._leftMult);\n\t\tthis._right.connect(this._rightMult);\n\t\tthis._leftMult.connect(this._merge, 0, 0);\n\t\tthis._rightMult.connect(this._merge, 0, 1);\n\t}\n\t\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.mid.dispose();\n\t\tthis.side.dispose();\n\t\tthis._leftMult.dispose();\n\t\tthis._rightMult.dispose();\n\t\tthis._left.dispose();\n\t\tthis._right.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}