{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\n\nexport class CrossFade extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n    this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n\n    this._panner = this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n\n    this._split = this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n\n    this._g2a = new GainToAudio({\n      context: this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n\n    this.a = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n\n    this.b = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n\n    this.output = new Gain({\n      context: this.context\n    });\n    this._internalChannels = [this.a, this.b];\n    const options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    this.fade = new Signal({\n      context: this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(this, \"fade\");\n    this.context.getConstant(1).connect(this._panner);\n\n    this._panner.connect(this._split); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n\n    this._panner.channelCount = 1;\n    this._panner.channelCountMode = \"explicit\";\n    connect(this._split, this.a.gain, 0);\n    connect(this._split, this.b.gain, 1);\n    this.fade.chain(this._g2a, this._panner.pan);\n    this.a.connect(this.output);\n    this.b.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      fade: 0.5\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.a.dispose();\n    this.b.dispose();\n    this.output.dispose();\n    this.fade.dispose();\n\n    this._g2a.dispose();\n\n    this._panner.disconnect();\n\n    this._split.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Gain","connect","ToneAudioNode","optionsFromArguments","readOnly","GainToAudio","Signal","CrossFade","constructor","Object","assign","getDefaults","arguments","context","createStereoPanner","createChannelSplitter","gain","a","b","options","fade","units","value","getConstant","_panner","_split","channelCount","channelCountMode","chain","_g2a","pan","output","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/CrossFade.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n\ninterface CrossFadeOptions extends ToneAudioNodeOptions {\n\tfade: NormalRange;\n}\n\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\nexport class CrossFade extends ToneAudioNode<CrossFadeOptions> {\n\n\treadonly name: string = \"CrossFade\";\n\n\t/**\n\t * The crossfading is done by a StereoPannerNode\n\t */\n\tprivate _panner: StereoPannerNode = this.context.createStereoPanner();\n\n\t/**\n\t * Split the output of the panner node into two values used to control the gains.\n\t */\n\tprivate _split: ChannelSplitterNode = this.context.createChannelSplitter(2);\n\n\t/**\n\t * Convert the fade value into an audio range value so it can be connected\n\t * to the panner.pan AudioParam\n\t */\n\tprivate _g2a: GainToAudio = new GainToAudio({ context: this.context });\n\n\t/**\n\t * The input which is at full level when fade = 0\n\t */\n\treadonly a: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The input which is at full level when fade = 1\n\t */\n\treadonly b: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output is a mix between `a` and `b` at the ratio of `fade`\n\t */\n\treadonly output: Gain = new Gain({ context: this.context });\n\n\t/**\n\t * CrossFade has no input, you must choose either `a` or `b`\n\t */\n\treadonly input: undefined;\n\n\t/**\n\t * The mix between the two inputs. A fade value of 0\n\t * will output 100% crossFade.a and\n\t * a value of 1 will output 100% crossFade.b.\n\t */\n\treadonly fade: Signal<\"normalRange\">;\n\n\tprotected _internalChannels = [this.a, this.b];\n\n\t/**\n\t * @param fade The initial fade value [0, 1].\n\t */\n\tconstructor(fade?: NormalRange);\n\tconstructor(options?: Partial<CrossFadeOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n\t\tconst options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n\n\t\tthis.fade = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"normalRange\",\n\t\t\tvalue: options.fade,\n\t\t});\n\t\treadOnly(this, \"fade\");\n\n\t\tthis.context.getConstant(1).connect(this._panner);\n\t\tthis._panner.connect(this._split);\n\t\t// this is necessary for standardized-audio-context\n\t\t// doesn't make any difference for the native AudioContext\n\t\t// https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\t\tthis._panner.channelCount = 1;\n\t\tthis._panner.channelCountMode = \"explicit\";\n\t\tconnect(this._split, this.a.gain, 0);\n\t\tconnect(this._split, this.b.gain, 1);\n\n\t\tthis.fade.chain(this._g2a, this._panner.pan);\n\n\t\tthis.a.connect(this.output);\n\t\tthis.b.connect(this.output);\n\t}\n\n\tstatic getDefaults(): CrossFadeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfade: 0.5,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.a.dispose();\n\t\tthis.b.dispose();\n\t\tthis.output.dispose();\n\t\tthis.fade.dispose();\n\t\tthis._g2a.dispose();\n\t\tthis._panner.disconnect();\n\t\tthis._split.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}