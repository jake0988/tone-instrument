{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).\n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value.\n * @category Component\n */\n\nexport class BiquadFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"BiquadFilter\";\n    const options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this._filter = this.context.createBiquadFilter();\n    this.input = this.output = this._filter;\n    this.Q = new Param({\n      context: this.context,\n      units: \"number\",\n      value: options.Q,\n      param: this._filter.Q\n    });\n    this.frequency = new Param({\n      context: this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      param: this._filter.frequency\n    });\n    this.detune = new Param({\n      context: this.context,\n      units: \"cents\",\n      value: options.detune,\n      param: this._filter.detune\n    });\n    this.gain = new Param({\n      context: this.context,\n      units: \"decibels\",\n      convert: false,\n      value: options.gain,\n      param: this._filter.gain\n    });\n    this.type = options.type;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      Q: 1,\n      type: \"lowpass\",\n      frequency: 350,\n      detune: 0,\n      gain: 0\n    });\n  }\n  /**\n   * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n   * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n   */\n\n\n  get type() {\n    return this._filter.type;\n  }\n\n  set type(type) {\n    const types = [\"lowpass\", \"highpass\", \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n    assert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n    this._filter.type = type;\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n\n  getFrequencyResponse() {\n    let len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    // start with all 1s\n    const freqValues = new Float32Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len); // clone the filter to remove any connections which may be changing the value\n\n    const filterClone = this.context.createBiquadFilter();\n    filterClone.type = this.type;\n    filterClone.Q.value = this.Q.value;\n    filterClone.frequency.value = this.frequency.value;\n    filterClone.gain.value = this.gain.value;\n    filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n    return magValues;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._filter.disconnect();\n\n    this.Q.dispose();\n    this.frequency.dispose();\n    this.gain.dispose();\n    this.detune.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Param","assert","BiquadFilter","constructor","getDefaults","arguments","options","_filter","context","createBiquadFilter","input","output","Q","units","value","param","frequency","detune","gain","convert","type","Object","assign","types","indexOf","getFrequencyResponse","len","freqValues","Float32Array","i","norm","Math","pow","freq","magValues","phaseValues","filterClone","dispose","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/filter/BiquadFilter.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Cents, Frequency, GainFactor } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Param } from \"../../core/context/Param\";\nimport { assert } from \"../../core/util/Debug\";\n\nexport interface BiquadFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\tdetune: Cents;\n\tQ: number;\n\ttype: BiquadFilterType;\n\tgain: GainFactor;\n}\n\n/**\n * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode). \n * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the \"rolloff\" value. \n * @category Component\n */\nexport class BiquadFilter extends ToneAudioNode<BiquadFilterOptions> {\n\treadonly name: string = \"BiquadFilter\";\n\n\treadonly input: BiquadFilterNode;\n\treadonly output: BiquadFilterNode;\n\n\t/**\n\t * The frequency of the filter\n\t */\n\treadonly frequency: Param<\"frequency\">;\n\n\t/**\n\t * A detune value, in cents, for the frequency.\n\t */\n\treadonly detune: Param<\"cents\">;\n\t\n\t/**\n\t * The Q factor of the filter.\n\t * For lowpass and highpass filters the Q value is interpreted to be in dB. \n\t * For these filters the nominal range is [−𝑄𝑙𝑖𝑚,𝑄𝑙𝑖𝑚] where 𝑄𝑙𝑖𝑚 is the largest value for which 10𝑄/20 does not overflow. This is approximately 770.63678.\n\t * For the bandpass, notch, allpass, and peaking filters, this value is a linear value. \n\t * The value is related to the bandwidth of the filter and hence should be a positive value. The nominal range is \n\t * [0,3.4028235𝑒38], the upper limit being the most-positive-single-float.\n\t * This is not used for the lowshelf and highshelf filters.\n\t */\n\treadonly Q: Param<\"number\">;\n\n\t/**\n\t * The gain of the filter. Its value is in dB units. The gain is only used for lowshelf, highshelf, and peaking filters.\n\t */\n\treadonly gain: Param<\"decibels\">;\n\n\tprivate readonly _filter: BiquadFilterNode;\n\n\t/**\n\t * @param frequency The cutoff frequency of the filter.\n\t * @param type The type of filter.\n\t */\n\tconstructor(frequency?: Frequency, type?: BiquadFilterType);\n\tconstructor(options?: Partial<BiquadFilterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(BiquadFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._filter = this.context.createBiquadFilter();\n\t\tthis.input = this.output = this._filter;\n\n\t\tthis.Q = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"number\",\n\t\t\tvalue: options.Q,\n\t\t\tparam: this._filter.Q,\n\t\t});\n\t\t\n\t\tthis.frequency = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"frequency\",\n\t\t\tvalue: options.frequency,\n\t\t\tparam: this._filter.frequency,\n\t\t});\n\t\t\n\t\tthis.detune = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"cents\",\n\t\t\tvalue: options.detune,\n\t\t\tparam: this._filter.detune,\n\t\t});\n\t\t\n\t\tthis.gain = new Param({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"decibels\",\n\t\t\tconvert: false,\n\t\t\tvalue: options.gain,\n\t\t\tparam: this._filter.gain,\n\t\t});\n\n\t\tthis.type = options.type;\n\t}\n\n\tstatic getDefaults(): BiquadFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tQ: 1,\n\t\t\ttype: \"lowpass\" as const,\n\t\t\tfrequency: 350,\n\t\t\tdetune: 0,\n\t\t\tgain: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the\n\t * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)\n\t */\n\tget type(): BiquadFilterType {\n\t\treturn this._filter.type;\n\t}\n\tset type(type) {\n\t\tconst types: BiquadFilterType[] = [\"lowpass\", \"highpass\", \"bandpass\",\n\t\t\t\"lowshelf\", \"highshelf\", \"notch\", \"allpass\", \"peaking\"];\n\t\tassert(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);\n\t\tthis._filter.type = type;\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\t// start with all 1s\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\t// clone the filter to remove any connections which may be changing the value\n\t\tconst filterClone = this.context.createBiquadFilter();\n\t\tfilterClone.type = this.type;\n\t\tfilterClone.Q.value = this.Q.value;\n\t\tfilterClone.frequency.value = this.frequency.value as number;\n\t\tfilterClone.gain.value = this.gain.value as number;\n\t\tfilterClone.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._filter.disconnect();\n\t\tthis.Q.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.gain.dispose();\n\t\tthis.detune.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}