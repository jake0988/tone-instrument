{"ast":null,"code":"import { StereoFeedbackEffect } from \"./StereoFeedbackEffect\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\n\nexport class StereoXFeedbackEffect extends StereoFeedbackEffect {\n  constructor(options) {\n    super(options); // the left output connected to the right input\n\n    this._feedbackL.disconnect();\n\n    this._feedbackL.connect(this._feedbackMerge, 0, 1); // the left output connected to the right input\n\n\n    this._feedbackR.disconnect();\n\n    this._feedbackR.connect(this._feedbackMerge, 0, 0);\n\n    readOnly(this, [\"feedback\"]);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,oBAAT,QAAkE,wBAAlE;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AAMA;;;;;;;;;;;;;;AAaA,OAAM,MAAOC,qBAAP,SAAmFF,oBAAnF,CAAgH;EAErHG,YAAYC,OAAZ,EAAiD;IAEhD,MAAMA,OAAN,EAFgD,CAGhD;;IACA,KAAKC,UAAL,CAAgBC,UAAhB;;IACA,KAAKD,UAAL,CAAgBE,OAAhB,CAAwB,KAAKC,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD,EALgD,CAOhD;;;IACA,KAAKC,UAAL,CAAgBH,UAAhB;;IACA,KAAKG,UAAL,CAAgBF,OAAhB,CAAwB,KAAKC,cAA7B,EAA6C,CAA7C,EAAgD,CAAhD;;IAEAP,QAAQ,CAAC,IAAD,EAAO,CAAC,UAAD,CAAP,CAAR;EACA;;AAdoH","names":["StereoFeedbackEffect","readOnly","StereoXFeedbackEffect","constructor","options","_feedbackL","disconnect","connect","_feedbackMerge","_feedbackR"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/StereoXFeedbackEffect.ts"],"sourcesContent":["import { StereoFeedbackEffect, StereoFeedbackEffectOptions } from \"./StereoFeedbackEffect\";\nimport { NormalRange } from \"../core/type/Units\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface StereoXFeedbackEffectOptions extends StereoFeedbackEffectOptions {\n\tfeedback: NormalRange;\n}\n\n/**\n * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right\n * and right to left instead of on the same channel.\n * ```\n * +--------------------------------+ feedbackL <-----------------------------------+\n * |                                                                                |\n * +-->                          +----->        +---->                          +-----+\n *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |\n * +-->                          +----->        +---->                          +---+ |\n * |                                                                                  |\n * +--------------------------------+ feedbackR <-------------------------------------+\n * ```\n */\nexport class StereoXFeedbackEffect<Options extends StereoXFeedbackEffectOptions> extends StereoFeedbackEffect<Options> {\n\t\n\tconstructor(options: StereoXFeedbackEffectOptions) {\n\n\t\tsuper(options);\n\t\t// the left output connected to the right input\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._feedbackMerge, 0, 1);\n\n\t\t// the left output connected to the right input\n\t\tthis._feedbackR.disconnect();\n\t\tthis._feedbackR.connect(this._feedbackMerge, 0, 0);\n\t\t\n\t\treadOnly(this, [\"feedback\"]);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}