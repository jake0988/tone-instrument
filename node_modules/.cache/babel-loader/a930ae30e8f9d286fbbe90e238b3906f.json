{"ast":null,"code":"import { Gain } from \"../core/context/Gain\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\n/**\n * Base class for fire-and-forget nodes\n */\n\nexport class OneShotSource extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    /**\n     * The callback to invoke after the\n     * source is done playing.\n     */\n\n    this.onended = noOp;\n    /**\n     * The start time\n     */\n\n    this._startTime = -1;\n    /**\n     * The stop time\n     */\n\n    this._stopTime = -1;\n    /**\n     * The id of the timeout\n     */\n\n    this._timeout = -1;\n    /**\n     * The public output node\n     */\n\n    this.output = new Gain({\n      context: this.context,\n      gain: 0\n    });\n    /**\n     * The output gain node.\n     */\n\n    this._gainNode = this.output;\n    /**\n     * Get the playback state at the given time\n     */\n\n    this.getStateAtTime = function (time) {\n      const computedTime = this.toSeconds(time);\n\n      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {\n        return \"started\";\n      } else {\n        return \"stopped\";\n      }\n    };\n\n    this._fadeIn = options.fadeIn;\n    this._fadeOut = options.fadeOut;\n    this._curve = options.curve;\n    this.onended = options.onended;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      curve: \"linear\",\n      fadeIn: 0,\n      fadeOut: 0,\n      onended: noOp\n    });\n  }\n  /**\n   * Start the source at the given time\n   * @param  time When to start the source\n   */\n\n\n  _startGain(time) {\n    let gain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    assert(this._startTime === -1, \"Source cannot be started more than once\"); // apply a fade in envelope\n\n    const fadeInTime = this.toSeconds(this._fadeIn); // record the start time\n\n    this._startTime = time + fadeInTime;\n    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope\n\n    if (fadeInTime > 0) {\n      this._gainNode.gain.setValueAtTime(0, time);\n\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n      } else {\n        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n      }\n    } else {\n      this._gainNode.gain.setValueAtTime(gain, time);\n    }\n\n    return this;\n  }\n  /**\n   * Stop the source node at the given time.\n   * @param time When to stop the source\n   */\n\n\n  stop(time) {\n    this.log(\"stop\", time);\n\n    this._stopGain(this.toSeconds(time));\n\n    return this;\n  }\n  /**\n   * Stop the source at the given time\n   * @param  time When to stop the source\n   */\n\n\n  _stopGain(time) {\n    assert(this._startTime !== -1, \"'start' must be called before 'stop'\"); // cancel the previous stop\n\n    this.cancelStop(); // the fadeOut time\n\n    const fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback\n\n    this._stopTime = this.toSeconds(time) + fadeOutTime;\n    this._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\n    if (fadeOutTime > 0) {\n      // start the fade out curve at the given time\n      if (this._curve === \"linear\") {\n        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n      } else {\n        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n      }\n    } else {\n      // stop any ongoing ramps, and set the value to 0\n      this._gainNode.gain.cancelAndHoldAtTime(time);\n\n      this._gainNode.gain.setValueAtTime(0, time);\n    }\n\n    this.context.clearTimeout(this._timeout);\n    this._timeout = this.context.setTimeout(() => {\n      // allow additional time for the exponential curve to fully decay\n      const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\n      this._stopSource(this.now() + additionalTail);\n\n      this._onended();\n    }, this._stopTime - this.context.currentTime);\n    return this;\n  }\n  /**\n   * Invoke the onended callback\n   */\n\n\n  _onended() {\n    if (this.onended !== noOp) {\n      this.onended(this); // overwrite onended to make sure it only is called once\n\n      this.onended = noOp; // dispose when it's ended to free up for garbage collection only in the online context\n\n      if (!this.context.isOffline) {\n        const disposeCallback = () => this.dispose(); // @ts-ignore\n\n\n        if (typeof window.requestIdleCallback !== \"undefined\") {\n          // @ts-ignore\n          window.requestIdleCallback(disposeCallback);\n        } else {\n          setTimeout(disposeCallback, 1000);\n        }\n      }\n    }\n  }\n  /**\n   * Get the playback state at the current time\n   */\n\n\n  get state() {\n    return this.getStateAtTime(this.now());\n  }\n  /**\n   * Cancel a scheduled stop event\n   */\n\n\n  cancelStop() {\n    this.log(\"cancelStop\");\n    assert(this._startTime !== -1, \"Source is not started\"); // cancel the stop envelope\n\n    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\n    this.context.clearTimeout(this._timeout);\n    this._stopTime = -1;\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._gainNode.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Gain","ToneAudioNode","noOp","assert","OneShotSource","constructor","options","context","gain","output","time","computedTime","toSeconds","_startTime","_stopTime","_fadeIn","fadeIn","_fadeOut","fadeOut","_curve","curve","onended","getDefaults","Object","assign","_startGain","fadeInTime","Math","max","currentTime","_gainNode","setValueAtTime","linearRampToValueAtTime","exponentialApproachValueAtTime","stop","log","_stopGain","cancelStop","fadeOutTime","linearRampTo","targetRampTo","cancelAndHoldAtTime","clearTimeout","_timeout","setTimeout","additionalTail","_stopSource","now","_onended","isOffline","disposeCallback","dispose","window","requestIdleCallback","state","getStateAtTime","cancelScheduledValues","sampleTime","disconnect"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/source/OneShotSource.ts"],"sourcesContent":["import { Gain } from \"../core/context/Gain\";\nimport {\n\tToneAudioNode,\n\tToneAudioNodeOptions,\n} from \"../core/context/ToneAudioNode\";\nimport { GainFactor, Seconds, Time } from \"../core/type/Units\";\nimport { noOp } from \"../core/util/Interface\";\nimport { assert } from \"../core/util/Debug\";\nimport { BasicPlaybackState } from \"../core/util/StateTimeline\";\n\nexport type OneShotSourceCurve = \"linear\" | \"exponential\";\n\ntype onEndedCallback = (source: OneShotSource<any>) => void;\n\nexport interface OneShotSourceOptions extends ToneAudioNodeOptions {\n\tonended: onEndedCallback;\n\tfadeIn: Time;\n\tfadeOut: Time;\n\tcurve: OneShotSourceCurve;\n}\n\n/**\n * Base class for fire-and-forget nodes\n */\nexport abstract class OneShotSource<\n\tOptions extends ToneAudioNodeOptions\n> extends ToneAudioNode<Options> {\n\t/**\n\t * The callback to invoke after the\n\t * source is done playing.\n\t */\n\tonended: onEndedCallback = noOp;\n\n\t/**\n\t * Sources do not have input nodes\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The start time\n\t */\n\tprotected _startTime = -1;\n\n\t/**\n\t * The stop time\n\t */\n\tprotected _stopTime = -1;\n\n\t/**\n\t * The id of the timeout\n\t */\n\tprivate _timeout = -1;\n\n\t/**\n\t * The public output node\n\t */\n\toutput: Gain = new Gain({\n\t\tcontext: this.context,\n\t\tgain: 0,\n\t});\n\n\t/**\n\t * The output gain node.\n\t */\n\tprotected _gainNode = this.output;\n\n\t/**\n\t * The fadeIn time of the amplitude envelope.\n\t */\n\tprotected _fadeIn: Time;\n\n\t/**\n\t * The fadeOut time of the amplitude envelope.\n\t */\n\tprotected _fadeOut: Time;\n\n\t/**\n\t * The curve applied to the fades, either \"linear\" or \"exponential\"\n\t */\n\tprotected _curve: OneShotSourceCurve;\n\n\tconstructor(options: OneShotSourceOptions) {\n\t\tsuper(options);\n\n\t\tthis._fadeIn = options.fadeIn;\n\t\tthis._fadeOut = options.fadeOut;\n\t\tthis._curve = options.curve;\n\t\tthis.onended = options.onended;\n\t}\n\n\tstatic getDefaults(): OneShotSourceOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tcurve: \"linear\" as OneShotSourceCurve,\n\t\t\tfadeIn: 0,\n\t\t\tfadeOut: 0,\n\t\t\tonended: noOp,\n\t\t});\n\t}\n\n\t/**\n\t * Stop the source node\n\t */\n\tprotected abstract _stopSource(time: Seconds): void;\n\n\t/**\n\t * Start the source node at the given time\n\t * @param  time When to start the node\n\t */\n\tprotected abstract start(time?: Time): this;\n\t/**\n\t * Start the source at the given time\n\t * @param  time When to start the source\n\t */\n\tprotected _startGain(time: Seconds, gain: GainFactor = 1): this {\n\t\tassert(\n\t\t\tthis._startTime === -1,\n\t\t\t\"Source cannot be started more than once\"\n\t\t);\n\t\t// apply a fade in envelope\n\t\tconst fadeInTime = this.toSeconds(this._fadeIn);\n\n\t\t// record the start time\n\t\tthis._startTime = time + fadeInTime;\n\t\tthis._startTime = Math.max(this._startTime, this.context.currentTime);\n\n\t\t// schedule the envelope\n\t\tif (fadeInTime > 0) {\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampToValueAtTime(\n\t\t\t\t\tgain,\n\t\t\t\t\ttime + fadeInTime\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.exponentialApproachValueAtTime(\n\t\t\t\t\tgain,\n\t\t\t\t\ttime,\n\t\t\t\t\tfadeInTime\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._gainNode.gain.setValueAtTime(gain, time);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source node at the given time.\n\t * @param time When to stop the source\n\t */\n\tstop(time?: Time): this {\n\t\tthis.log(\"stop\", time);\n\t\tthis._stopGain(this.toSeconds(time));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the source at the given time\n\t * @param  time When to stop the source\n\t */\n\tprotected _stopGain(time: Seconds): this {\n\t\tassert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n\t\t// cancel the previous stop\n\t\tthis.cancelStop();\n\n\t\t// the fadeOut time\n\t\tconst fadeOutTime = this.toSeconds(this._fadeOut);\n\n\t\t// schedule the stop callback\n\t\tthis._stopTime = this.toSeconds(time) + fadeOutTime;\n\t\tthis._stopTime = Math.max(this._stopTime, this.context.currentTime);\n\t\tif (fadeOutTime > 0) {\n\t\t\t// start the fade out curve at the given time\n\t\t\tif (this._curve === \"linear\") {\n\t\t\t\tthis._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n\t\t\t} else {\n\t\t\t\tthis._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n\t\t\t}\n\t\t} else {\n\t\t\t// stop any ongoing ramps, and set the value to 0\n\t\t\tthis._gainNode.gain.cancelAndHoldAtTime(time);\n\t\t\tthis._gainNode.gain.setValueAtTime(0, time);\n\t\t}\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._timeout = this.context.setTimeout(() => {\n\t\t\t// allow additional time for the exponential curve to fully decay\n\t\t\tconst additionalTail =\n\t\t\t\tthis._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n\t\t\tthis._stopSource(this.now() + additionalTail);\n\t\t\tthis._onended();\n\t\t}, this._stopTime - this.context.currentTime);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Invoke the onended callback\n\t */\n\tprotected _onended(): void {\n\t\tif (this.onended !== noOp) {\n\t\t\tthis.onended(this);\n\t\t\t// overwrite onended to make sure it only is called once\n\t\t\tthis.onended = noOp;\n\t\t\t// dispose when it's ended to free up for garbage collection only in the online context\n\t\t\tif (!this.context.isOffline) {\n\t\t\t\tconst disposeCallback = () => this.dispose();\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (typeof window.requestIdleCallback !== \"undefined\") {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\twindow.requestIdleCallback(disposeCallback);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(disposeCallback, 1000);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the playback state at the given time\n\t */\n\tgetStateAtTime = function(time: Time): BasicPlaybackState {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tif (\n\t\t\tthis._startTime !== -1 &&\n\t\t\tcomputedTime >= this._startTime &&\n\t\t\t(this._stopTime === -1 || computedTime <= this._stopTime)\n\t\t) {\n\t\t\treturn \"started\";\n\t\t} else {\n\t\t\treturn \"stopped\";\n\t\t}\n\t};\n\n\t/**\n\t * Get the playback state at the current time\n\t */\n\tget state(): BasicPlaybackState {\n\t\treturn this.getStateAtTime(this.now());\n\t}\n\n\t/**\n\t * Cancel a scheduled stop event\n\t */\n\tcancelStop(): this {\n\t\tthis.log(\"cancelStop\");\n\t\tassert(this._startTime !== -1, \"Source is not started\");\n\t\t// cancel the stop envelope\n\t\tthis._gainNode.gain.cancelScheduledValues(\n\t\t\tthis._startTime + this.sampleTime\n\t\t);\n\t\tthis.context.clearTimeout(this._timeout);\n\t\tthis._stopTime = -1;\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._gainNode.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}