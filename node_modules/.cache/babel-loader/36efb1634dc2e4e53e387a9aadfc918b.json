{"ast":null,"code":"import { gainToDb } from \"../../core/type/Conversions\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\n\nexport class Meter extends MeterBase {\n  constructor() {\n    super(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Meter\";\n    /**\n     * The previous frame's value\n     */\n\n    this._rms = 0;\n    const options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n    this.input = this.output = this._analyser = new Analyser({\n      context: this.context,\n      size: 256,\n      type: \"waveform\",\n      channels: options.channels\n    });\n    this.smoothing = options.smoothing, this.normalRange = options.normalRange;\n  }\n\n  static getDefaults() {\n    return Object.assign(MeterBase.getDefaults(), {\n      smoothing: 0.8,\n      normalRange: false,\n      channels: 1\n    });\n  }\n  /**\n   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n   * @deprecated\n   */\n\n\n  getLevel() {\n    warn(\"'getLevel' has been changed to 'getValue'\");\n    return this.getValue();\n  }\n  /**\n   * Get the current value of the incoming signal.\n   * Output is in decibels when [[normalRange]] is `false`.\n   * If [[channels]] = 1, then the output is a single number\n   * representing the value of the input signal. When [[channels]] > 1,\n   * then each channel is returned as a value in a number array.\n   */\n\n\n  getValue() {\n    const aValues = this._analyser.getValue();\n\n    const channelValues = this.channels === 1 ? [aValues] : aValues;\n    const vals = channelValues.map(values => {\n      const totalSquared = values.reduce((total, current) => total + current * current, 0);\n      const rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing\n      // but can jump up instantly\n\n      this._rms = Math.max(rms, this._rms * this.smoothing);\n      return this.normalRange ? this._rms : gainToDb(this._rms);\n    });\n\n    if (this.channels === 1) {\n      return vals[0];\n    } else {\n      return vals;\n    }\n  }\n  /**\n   * The number of channels of analysis.\n   */\n\n\n  get channels() {\n    return this._analyser.channels;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._analyser.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,6BAAzB;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AACA,SAASC,IAAT,QAAqB,uBAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AAQA;;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,KAAP,SAAqBH,SAArB,CAA4C;EA0BjDI;IACC,MAAML,oBAAoB,CAACI,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAA1B;IAzBQ,YAAe,OAAf;IAcT;;;;IAGQ,YAAO,CAAP;IASP,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,KAAK,CAACE,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,WAAD,CAAjC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,MAAL,GAAc,KAAKC,SAAL,GAAiB,IAAIR,QAAJ,CAAa;MACxDS,OAAO,EAAE,KAAKA,OAD0C;MAExDC,IAAI,EAAE,GAFkD;MAGxDC,IAAI,EAAE,UAHkD;MAIxDC,QAAQ,EAAEP,OAAO,CAACO;IAJsC,CAAb,CAA5C;IAOA,KAAKC,SAAL,GAAiBR,OAAO,CAACQ,SAAzB,EACA,KAAKC,WAAL,GAAmBT,OAAO,CAACS,WAD3B;EAEA;;EAEiB,OAAXX,WAAW;IACjB,OAAOY,MAAM,CAACC,MAAP,CAAclB,SAAS,CAACK,WAAV,EAAd,EAAuC;MAC7CU,SAAS,EAAE,GADkC;MAE7CC,WAAW,EAAE,KAFgC;MAG7CF,QAAQ,EAAE;IAHmC,CAAvC,CAAP;EAKA;EAED;;;;;;EAIAK,QAAQ;IACPlB,IAAI,CAAC,2CAAD,CAAJ;IACA,OAAO,KAAKmB,QAAL,EAAP;EACA;EAED;;;;;;;;;EAOAA,QAAQ;IACP,MAAMC,OAAO,GAAG,KAAKX,SAAL,CAAeU,QAAf,EAAhB;;IACA,MAAME,aAAa,GAAG,KAAKR,QAAL,KAAkB,CAAlB,GAAsB,CAACO,OAAD,CAAtB,GAAkDA,OAAxE;IACA,MAAME,IAAI,GAAGD,aAAa,CAACE,GAAd,CAAkBC,MAAM,IAAG;MACvC,MAAMC,YAAY,GAAGD,MAAM,CAACE,MAAP,CAAc,CAACC,KAAD,EAAQC,OAAR,KAAoBD,KAAK,GAAGC,OAAO,GAAGA,OAApD,EAA6D,CAA7D,CAArB;MACA,MAAMC,GAAG,GAAGC,IAAI,CAACC,IAAL,CAAUN,YAAY,GAAGD,MAAM,CAACQ,MAAhC,CAAZ,CAFuC,CAGvC;MACA;;MACA,KAAKC,IAAL,GAAYH,IAAI,CAACI,GAAL,CAASL,GAAT,EAAc,KAAKI,IAAL,GAAY,KAAKnB,SAA/B,CAAZ;MACA,OAAO,KAAKC,WAAL,GAAmB,KAAKkB,IAAxB,GAA+BpC,QAAQ,CAAC,KAAKoC,IAAN,CAA9C;IACA,CAPY,CAAb;;IAQA,IAAI,KAAKpB,QAAL,KAAkB,CAAtB,EAAyB;MACxB,OAAOS,IAAI,CAAC,CAAD,CAAX;IACA,CAFD,MAEO;MACN,OAAOA,IAAP;IACA;EACD;EAED;;;;;EAGY,IAART,QAAQ;IACX,OAAO,KAAKJ,SAAL,CAAeI,QAAtB;EACA;;EAEDsB,OAAO;IACN,MAAMA,OAAN;;IACA,KAAK1B,SAAL,CAAe0B,OAAf;;IACA,OAAO,IAAP;EACA;;AA9FgD","names":["gainToDb","optionsFromArguments","MeterBase","warn","Analyser","Meter","constructor","getDefaults","arguments","options","input","output","_analyser","context","size","type","channels","smoothing","normalRange","Object","assign","getLevel","getValue","aValues","channelValues","vals","map","values","totalSquared","reduce","total","current","rms","Math","sqrt","length","_rms","max","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/analysis/Meter.ts"],"sourcesContent":["import { gainToDb } from \"../../core/type/Conversions\";\nimport { NormalRange } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { MeterBase, MeterBaseOptions } from \"./MeterBase\";\nimport { warn } from \"../../core/util/Debug\";\nimport { Analyser } from \"./Analyser\";\n\nexport interface MeterOptions extends MeterBaseOptions {\n\tsmoothing: NormalRange;\n\tnormalRange: boolean;\n\tchannels: number;\n}\n\n/**\n * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n * of an input signal. It can also get the raw value of the input signal.\n *\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia();\n * mic.open();\n * // connect mic to the meter\n * mic.connect(meter);\n * // the current level of the mic\n * setInterval(() => console.log(meter.getValue()), 100);\n * @category Component\n */\nexport class Meter extends MeterBase<MeterOptions> {\n\n\treadonly name: string = \"Meter\";\n\n\t/**\n\t * If the output should be in decibels or normal range between 0-1. If `normalRange` is false,\n\t * the output range will be the measured decibel value, otherwise the decibel value will be converted to\n\t * the range of 0-1\n\t */\n\tnormalRange: boolean;\n\n\t/**\n\t * A value from between 0 and 1 where 0 represents no time averaging with the last analysis frame.\n\t */\n\tsmoothing: number;\n\n\t/**\n\t * The previous frame's value\n\t */\n\tprivate _rms = 0;\n\n\t/**\n\t * @param smoothing The amount of smoothing applied between frames.\n\t */\n\tconstructor(smoothing?: NormalRange);\n\tconstructor(options?: Partial<MeterOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Meter.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis.input = this.output = this._analyser = new Analyser({\n\t\t\tcontext: this.context,\n\t\t\tsize: 256,\n\t\t\ttype: \"waveform\",\n\t\t\tchannels: options.channels,\n\t\t});\n\n\t\tthis.smoothing = options.smoothing,\n\t\tthis.normalRange = options.normalRange;\n\t}\n\n\tstatic getDefaults(): MeterOptions {\n\t\treturn Object.assign(MeterBase.getDefaults(), {\n\t\t\tsmoothing: 0.8,\n\t\t\tnormalRange: false,\n\t\t\tchannels: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.\n\t * @deprecated\n\t */\n\tgetLevel(): number | number[] {\n\t\twarn(\"'getLevel' has been changed to 'getValue'\");\n\t\treturn this.getValue();\n\t}\n\n\t/**\n\t * Get the current value of the incoming signal. \n\t * Output is in decibels when [[normalRange]] is `false`.\n\t * If [[channels]] = 1, then the output is a single number\n\t * representing the value of the input signal. When [[channels]] > 1,\n\t * then each channel is returned as a value in a number array. \n\t */\n\tgetValue(): number | number[] {\n\t\tconst aValues = this._analyser.getValue();\n\t\tconst channelValues = this.channels === 1 ? [aValues as Float32Array] : aValues as Float32Array[];\n\t\tconst vals = channelValues.map(values => {\n\t\t\tconst totalSquared = values.reduce((total, current) => total + current * current, 0);\n\t\t\tconst rms = Math.sqrt(totalSquared / values.length);\n\t\t\t// the rms can only fall at the rate of the smoothing\n\t\t\t// but can jump up instantly\n\t\t\tthis._rms = Math.max(rms, this._rms * this.smoothing);\n\t\t\treturn this.normalRange ? this._rms : gainToDb(this._rms);\n\t\t});\n\t\tif (this.channels === 1) {\n\t\t\treturn vals[0];\n\t\t} else {\n\t\t\treturn vals;\n\t\t}\n\t}\n\n\t/**\n\t * The number of channels of analysis.\n\t */\n\tget channels(): number {\n\t\treturn this._analyser.channels;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._analyser.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}