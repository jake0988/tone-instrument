{"ast":null,"code":"import { ToneAudioNode } from \"../context/ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope\";\nexport class ToneAudioWorklet extends ToneAudioNode {\n  constructor(options) {\n    super(options);\n    this.name = \"ToneAudioWorklet\";\n    /**\n     * The constructor options for the node\n     */\n\n    this.workletOptions = {};\n    /**\n     * Callback which is invoked when there is an error in the processing\n     */\n\n    this.onprocessorerror = noOp;\n    const blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], {\n      type: \"text/javascript\"\n    }));\n\n    const name = this._audioWorkletName();\n\n    this._dummyGain = this.context.createGain();\n    this._dummyParam = this._dummyGain.gain; // Register the processor\n\n    this.context.addAudioWorkletModule(blobUrl, name).then(() => {\n      // create the worklet when it's read\n      if (!this.disposed) {\n        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n        this.onReady(this._worklet);\n      }\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._dummyGain.disconnect();\n\n    if (this._worklet) {\n      this._worklet.port.postMessage(\"dispose\");\n\n      this._worklet.disconnect();\n    }\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,aAAT,QAAoD,0BAApD;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,qBAAT,QAAsC,sBAAtC;AAIA,OAAM,MAAgBC,gBAAhB,SAAkFH,aAAlF,CAAwG;EAuC7GI,YAAYC,OAAZ,EAA4B;IAC3B,MAAMA,OAAN;IAtCQ,YAAe,kBAAf;IAiBT;;;;IAGU,sBAAmD,EAAnD;IAYV;;;;IAGA,wBAAwCJ,IAAxC;IAKC,MAAMK,OAAO,GAAGC,GAAG,CAACC,eAAJ,CAAoB,IAAIC,IAAJ,CAAS,CAACP,qBAAqB,EAAtB,CAAT,EAAoC;MAAEQ,IAAI,EAAE;IAAR,CAApC,CAApB,CAAhB;;IACA,MAAMC,IAAI,GAAG,KAAKC,iBAAL,EAAb;;IAEA,KAAKC,UAAL,GAAkB,KAAKC,OAAL,CAAaC,UAAb,EAAlB;IACA,KAAKC,WAAL,GAAmB,KAAKH,UAAL,CAAgBI,IAAnC,CAP2B,CAS3B;;IACA,KAAKH,OAAL,CAAaI,qBAAb,CAAmCZ,OAAnC,EAA4CK,IAA5C,EAAkDQ,IAAlD,CAAuD,MAAK;MAC3D;MACA,IAAI,CAAC,KAAKC,QAAV,EAAoB;QACnB,KAAKC,QAAL,GAAgB,KAAKP,OAAL,CAAaQ,sBAAb,CAAoCX,IAApC,EAA0C,KAAKY,cAA/C,CAAhB;QACA,KAAKF,QAAL,CAAcG,gBAAd,GAAiC,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAjC;QACA,KAAKC,OAAL,CAAa,KAAKL,QAAlB;MACA;IACD,CAPD;EAQA;;EAEDM,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKd,UAAL,CAAgBe,UAAhB;;IACA,IAAI,KAAKP,QAAT,EAAmB;MAClB,KAAKA,QAAL,CAAcQ,IAAd,CAAmBC,WAAnB,CAA+B,SAA/B;;MACA,KAAKT,QAAL,CAAcO,UAAd;IACA;;IACD,OAAO,IAAP;EACA;;AAnE4G","names":["ToneAudioNode","noOp","getWorkletGlobalScope","ToneAudioWorklet","constructor","options","blobUrl","URL","createObjectURL","Blob","type","name","_audioWorkletName","_dummyGain","context","createGain","_dummyParam","gain","addAudioWorkletModule","then","disposed","_worklet","createAudioWorkletNode","workletOptions","onprocessorerror","bind","onReady","dispose","disconnect","port","postMessage"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/worklet/ToneAudioWorklet.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../context/ToneAudioNode\";\nimport { noOp } from \"../util/Interface\";\nimport { getWorkletGlobalScope } from \"./WorkletGlobalScope\";\n\nexport type ToneAudioWorkletOptions = ToneAudioNodeOptions;\n\nexport abstract class ToneAudioWorklet<Options extends ToneAudioWorkletOptions> extends ToneAudioNode<Options> {\n\n\treadonly name: string = \"ToneAudioWorklet\";\n\n\t/**\n\t * The processing node\n\t */\n\tprotected _worklet!: AudioWorkletNode;\n\n\t/**\n\t * A dummy gain node to create a dummy audio param from\n\t */\n\tprivate _dummyGain: GainNode;\n\n\t/**\n\t * A dummy audio param to use when creating Params\n\t */\n\tprotected _dummyParam: AudioParam;\n\n\t/**\n\t * The constructor options for the node\n\t */\n\tprotected workletOptions: Partial<AudioWorkletNodeOptions> = {};\n\n\t/**\n\t * Get the name of the audio worklet\n\t */\n\tprotected abstract _audioWorkletName(): string;\n\n\t/**\n\t * Invoked when the module is loaded and the node is created\n\t */\n\tprotected abstract onReady(node: AudioWorkletNode): void;\n\n\t/**\n\t * Callback which is invoked when there is an error in the processing\n\t */\n\tonprocessorerror: (e: string) => void = noOp;\n\n\tconstructor(options: Options) {\n\t\tsuper(options);\n\n\t\tconst blobUrl = URL.createObjectURL(new Blob([getWorkletGlobalScope()], { type: \"text/javascript\" }));\n\t\tconst name = this._audioWorkletName();\n\n\t\tthis._dummyGain = this.context.createGain();\n\t\tthis._dummyParam = this._dummyGain.gain;\n\n\t\t// Register the processor\n\t\tthis.context.addAudioWorkletModule(blobUrl, name).then(() => {\n\t\t\t// create the worklet when it's read\n\t\t\tif (!this.disposed) {\n\t\t\t\tthis._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);\n\t\t\t\tthis._worklet.onprocessorerror = this.onprocessorerror.bind(this);\n\t\t\t\tthis.onReady(this._worklet);\n\t\t\t}\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._dummyGain.disconnect();\n\t\tif (this._worklet) {\n\t\t\tthis._worklet.port.postMessage(\"dispose\");\n\t\t\tthis._worklet.disconnect();\n\t\t}\n\t\treturn this;\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}