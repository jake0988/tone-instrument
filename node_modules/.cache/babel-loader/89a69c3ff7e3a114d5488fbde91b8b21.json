{"ast":null,"code":"import { StereoXFeedbackEffect } from \"./StereoXFeedbackEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\n\nexport class PingPongDelay extends StereoXFeedbackEffect {\n  constructor() {\n    super(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n    this.name = \"PingPongDelay\";\n    const options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n    this._leftDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this._rightPreDelay = new Delay({\n      context: this.context,\n      maxDelay: options.maxDelay\n    });\n    this.delayTime = new Signal({\n      context: this.context,\n      units: \"time\",\n      value: options.delayTime\n    }); // connect it up\n\n    this.connectEffectLeft(this._leftDelay);\n    this.connectEffectRight(this._rightPreDelay, this._rightDelay);\n    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay\n\n    this._feedbackL.disconnect();\n\n    this._feedbackL.connect(this._rightDelay);\n\n    readOnly(this, [\"delayTime\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoXFeedbackEffect.getDefaults(), {\n      delayTime: 0.25,\n      maxDelay: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._leftDelay.dispose();\n\n    this._rightDelay.dispose();\n\n    this._rightPreDelay.dispose();\n\n    this.delayTime.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,qBAAT,QAAoE,yBAApE;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAOA;;;;;;;;;;;;;;;AAcA,OAAM,MAAOC,aAAP,SAA6BL,qBAA7B,CAAwE;EA8B7EM;IAEC,MAAML,oBAAoB,CAACI,aAAa,CAACE,WAAd,EAAD,EAA8BC,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAA1B;IA9BQ,YAAe,eAAf;IA+BR,MAAMC,OAAO,GAAGR,oBAAoB,CAACI,aAAa,CAACE,WAAd,EAAD,EAA8BC,SAA9B,EAAyC,CAAC,WAAD,EAAc,UAAd,CAAzC,CAApC;IAEA,KAAKE,UAAL,GAAkB,IAAIR,KAAJ,CAAU;MAC3BS,OAAO,EAAE,KAAKA,OADa;MAE3BC,QAAQ,EAAEH,OAAO,CAACG;IAFS,CAAV,CAAlB;IAIA,KAAKC,WAAL,GAAmB,IAAIX,KAAJ,CAAU;MAC5BS,OAAO,EAAE,KAAKA,OADc;MAE5BC,QAAQ,EAAEH,OAAO,CAACG;IAFU,CAAV,CAAnB;IAIA,KAAKE,cAAL,GAAsB,IAAIZ,KAAJ,CAAU;MAC/BS,OAAO,EAAE,KAAKA,OADiB;MAE/BC,QAAQ,EAAEH,OAAO,CAACG;IAFa,CAAV,CAAtB;IAIA,KAAKG,SAAL,GAAiB,IAAIZ,MAAJ,CAAW;MAC3BQ,OAAO,EAAE,KAAKA,OADa;MAE3BK,KAAK,EAAE,MAFoB;MAG3BC,KAAK,EAAER,OAAO,CAACM;IAHY,CAAX,CAAjB,CAjBD,CAuBC;;IACA,KAAKG,iBAAL,CAAuB,KAAKR,UAA5B;IACA,KAAKS,kBAAL,CAAwB,KAAKL,cAA7B,EAA6C,KAAKD,WAAlD;IACA,KAAKE,SAAL,CAAeK,GAAf,CAAmB,KAAKV,UAAL,CAAgBK,SAAnC,EAA8C,KAAKF,WAAL,CAAiBE,SAA/D,EAA0E,KAAKD,cAAL,CAAoBC,SAA9F,EA1BD,CA2BC;;IACA,KAAKM,UAAL,CAAgBC,UAAhB;;IACA,KAAKD,UAAL,CAAgBE,OAAhB,CAAwB,KAAKV,WAA7B;;IACAT,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,CAAP,CAAR;EACA;;EAEiB,OAAXG,WAAW;IACjB,OAAOiB,MAAM,CAACC,MAAP,CAAczB,qBAAqB,CAACO,WAAtB,EAAd,EAAmD;MACzDQ,SAAS,EAAE,IAD8C;MAEzDH,QAAQ,EAAE;IAF+C,CAAnD,CAAP;EAIA;;EAEDc,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKhB,UAAL,CAAgBgB,OAAhB;;IACA,KAAKb,WAAL,CAAiBa,OAAjB;;IACA,KAAKZ,cAAL,CAAoBY,OAApB;;IACA,KAAKX,SAAL,CAAeW,OAAf;IACA,OAAO,IAAP;EACA;;AA7E4E","names":["StereoXFeedbackEffect","optionsFromArguments","Delay","Signal","readOnly","PingPongDelay","constructor","getDefaults","arguments","options","_leftDelay","context","maxDelay","_rightDelay","_rightPreDelay","delayTime","units","value","connectEffectLeft","connectEffectRight","fan","_feedbackL","disconnect","connect","Object","assign","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/PingPongDelay.ts"],"sourcesContent":["import { StereoXFeedbackEffect, StereoXFeedbackEffectOptions } from \"./StereoXFeedbackEffect\";\nimport { NormalRange, Seconds, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Delay } from \"../core/context/Delay\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface PingPongDelayOptions extends StereoXFeedbackEffectOptions {\n\tdelayTime: Time;\n\tmaxDelay: Seconds;\n}\n\n/**\n * PingPongDelay is a feedback delay effect where the echo is heard\n * first in one channel and next in the opposite channel. In a stereo\n * system these are the right and left channels.\n * PingPongDelay in more simplified terms is two Tone.FeedbackDelays\n * with independent delay values. Each delay is routed to one channel\n * (left or right), and the channel triggered second will always\n * trigger at the same interval after the first.\n * @example\n * const pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toDestination();\n * const drum = new Tone.MembraneSynth().connect(pingPong);\n * drum.triggerAttackRelease(\"C4\", \"32n\");\n * @category Effect\n */\nexport class PingPongDelay extends StereoXFeedbackEffect<PingPongDelayOptions> {\n\n\treadonly name: string = \"PingPongDelay\";\n\n\t/**\n\t * the delay node on the left side\n\t */\n\tprivate _leftDelay: Delay;\n\n\t/**\n\t * the delay node on the right side\n\t */\n\tprivate _rightDelay: Delay;\n\n\t/**\n\t * the predelay on the right side\n\t */\n\tprivate _rightPreDelay: Delay;\n\n\t/**\n\t * the delay time signal\n\t */\n\treadonly delayTime: Signal<\"time\">;\n\n\t/**\n\t * @param delayTime The delayTime between consecutive echos.\n\t * @param feedback The amount of the effected signal which is fed back through the delay.\n\t */\n\tconstructor(delayTime?: Time, feedback?: NormalRange);\n\tconstructor(options?: Partial<PingPongDelayOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]));\n\t\tconst options = optionsFromArguments(PingPongDelay.getDefaults(), arguments, [\"delayTime\", \"feedback\"]);\n\n\t\tthis._leftDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay,\n\t\t});\n\t\tthis._rightDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis._rightPreDelay = new Delay({\n\t\t\tcontext: this.context,\n\t\t\tmaxDelay: options.maxDelay\n\t\t});\n\t\tthis.delayTime = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"time\",\n\t\t\tvalue: options.delayTime,\n\t\t});\n\n\t\t// connect it up\n\t\tthis.connectEffectLeft(this._leftDelay);\n\t\tthis.connectEffectRight(this._rightPreDelay, this._rightDelay);\n\t\tthis.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t\t// rearranged the feedback to be after the rightPreDelay\n\t\tthis._feedbackL.disconnect();\n\t\tthis._feedbackL.connect(this._rightDelay);\n\t\treadOnly(this, [\"delayTime\"]);\n\t}\n\n\tstatic getDefaults(): PingPongDelayOptions {\n\t\treturn Object.assign(StereoXFeedbackEffect.getDefaults(), {\n\t\t\tdelayTime: 0.25,\n\t\t\tmaxDelay: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._leftDelay.dispose();\n\t\tthis._rightDelay.dispose();\n\t\tthis._rightPreDelay.dispose();\n\t\tthis.delayTime.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}