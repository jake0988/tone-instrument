{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\n\nexport class OnePoleFilter extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    this.name = \"OnePoleFilter\";\n    const options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    this._frequency = options.frequency;\n    this._type = options.type;\n    this.input = new Gain({\n      context: this.context\n    });\n    this.output = new Gain({\n      context: this.context\n    });\n\n    this._createFilter();\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      frequency: 880,\n      type: \"lowpass\"\n    });\n  }\n  /**\n   * Create a filter and dispose the old one\n   */\n\n\n  _createFilter() {\n    const oldFilter = this._filter;\n    const freq = this.toFrequency(this._frequency);\n    const t = 1 / (2 * Math.PI * freq);\n\n    if (this._type === \"lowpass\") {\n      const a0 = 1 / (t * this.context.sampleRate);\n      const b1 = a0 - 1;\n      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n    } else {\n      const b1 = 1 / (t * this.context.sampleRate) - 1;\n      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n    }\n\n    this.input.chain(this._filter, this.output);\n\n    if (oldFilter) {\n      // dispose it on the next block\n      this.context.setTimeout(() => {\n        if (!this.disposed) {\n          this.input.disconnect(oldFilter);\n          oldFilter.disconnect();\n        }\n      }, this.blockTime);\n    }\n  }\n  /**\n   * The frequency value.\n   */\n\n\n  get frequency() {\n    return this._frequency;\n  }\n\n  set frequency(fq) {\n    this._frequency = fq;\n\n    this._createFilter();\n  }\n  /**\n   * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n   */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(t) {\n    this._type = t;\n\n    this._createFilter();\n  }\n  /**\n   * Get the frequency response curve. This curve represents how the filter\n   * responses to frequencies between 20hz-20khz.\n   * @param  len The number of values to return\n   * @return The frequency response curve between 20-20kHz\n   */\n\n\n  getFrequencyResponse() {\n    let len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n    const freqValues = new Float32Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const norm = Math.pow(i / len, 2);\n      const freq = norm * (20000 - 20) + 20;\n      freqValues[i] = freq;\n    }\n\n    const magValues = new Float32Array(len);\n    const phaseValues = new Float32Array(len);\n\n    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\n    return magValues;\n  }\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.output.dispose();\n\n    this._filter.disconnect();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ToneAudioNode","optionsFromArguments","Gain","OnePoleFilter","constructor","getDefaults","arguments","options","_frequency","frequency","_type","type","input","context","output","_createFilter","Object","assign","oldFilter","_filter","freq","toFrequency","t","Math","PI","a0","sampleRate","b1","createIIRFilter","chain","setTimeout","disposed","disconnect","blockTime","fq","getFrequencyResponse","len","freqValues","Float32Array","i","norm","pow","magValues","phaseValues","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/filter/OnePoleFilter.ts"],"sourcesContent":["import { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Frequency } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n\nexport type OnePoleFilterType = \"highpass\" | \"lowpass\";\n\nexport interface OnePoleFilterOptions extends ToneAudioNodeOptions {\n\tfrequency: Frequency;\n\ttype: OnePoleFilterType;\n}\n\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\". \n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop. \n * References: \n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/  \n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\nexport class OnePoleFilter extends ToneAudioNode<OnePoleFilterOptions> {\n\t\n\treadonly name: string = \"OnePoleFilter\";\n\n\t/**\n\t * Hold the current frequency\n\t */\n\tprivate _frequency: Frequency;\n\n\t/**\n\t * the current one pole type\n\t */\n\tprivate _type: OnePoleFilterType;\n\n\t/**\n\t * the current one pole filter\n\t */\n\tprivate _filter!: IIRFilterNode;\n\n\treadonly input: Gain;\n\treadonly output: Gain;\n\n\t/**\n\t * @param frequency The frequency\n\t * @param type The  filter type, either \"lowpass\" or \"highpass\"\n\t */\n\tconstructor(frequency?: Frequency, type?: OnePoleFilterType);\n\tconstructor(options?: Partial<OnePoleFilterOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n\t\tconst options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n\n\t\tthis._frequency = options.frequency;\n\t\tthis._type = options.type;\n\t\tthis.input = new Gain({ context: this.context });\n\t\tthis.output = new Gain({ context: this.context });\n\t\tthis._createFilter();\n\t}\n\n\tstatic getDefaults(): OnePoleFilterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tfrequency: 880,\n\t\t\ttype: \"lowpass\" as OnePoleFilterType\n\t\t});\n\t}\n\n\t/**\n\t * Create a filter and dispose the old one\n\t */\n\tprivate _createFilter() {\n\t\tconst oldFilter = this._filter;\n\t\tconst freq = this.toFrequency(this._frequency);\n\t\tconst t = 1 / (2 * Math.PI * freq);\n\t\tif (this._type === \"lowpass\") {\n\t\t\tconst a0 = 1 / (t * this.context.sampleRate);\n\t\t\tconst b1 = a0 - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n\t\t} else {\n\t\t\tconst b1 = 1 / (t * this.context.sampleRate) - 1;\n\t\t\tthis._filter = this.context.createIIRFilter([1, -1], [1, b1]);\n\t\t}\n\t\t\n\t\tthis.input.chain(this._filter, this.output);\n\t\tif (oldFilter) {\n\t\t\t// dispose it on the next block\n\t\t\tthis.context.setTimeout(() => {\n\t\t\t\tif (!this.disposed) {\n\t\t\t\t\tthis.input.disconnect(oldFilter);\n\t\t\t\t\toldFilter.disconnect();\n\t\t\t\t}\n\t\t\t}, this.blockTime);\n\t\t}\n\t}\n\n\t/**\n\t * The frequency value. \n\t */\n\tget frequency(): Frequency {\n\t\treturn this._frequency;\n\t}\n\tset frequency(fq) {\n\t\tthis._frequency = fq;\n\t\tthis._createFilter();\n\t}\n\t\n\t/**\n\t * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n\t */\n\tget type(): OnePoleFilterType {\n\t\treturn this._type;\n\t}\n\tset type(t) {\n\t\tthis._type = t;\n\t\tthis._createFilter();\n\t}\n\n\t/**\n\t * Get the frequency response curve. This curve represents how the filter\n\t * responses to frequencies between 20hz-20khz.\n\t * @param  len The number of values to return\n\t * @return The frequency response curve between 20-20kHz\n\t */\n\tgetFrequencyResponse(len = 128): Float32Array {\n\t\tconst freqValues = new Float32Array(len);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst norm = Math.pow(i / len, 2);\n\t\t\tconst freq = norm * (20000 - 20) + 20;\n\t\t\tfreqValues[i] = freq;\n\t\t}\n\t\tconst magValues = new Float32Array(len);\n\t\tconst phaseValues = new Float32Array(len);\n\t\tthis._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\t\treturn magValues;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.output.dispose();\n\t\tthis._filter.disconnect();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}