{"ast":null,"code":"import { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\n\nexport class Volume extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n    this.name = \"Volume\";\n    const options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n    this.input = this.output = new Gain({\n      context: this.context,\n      gain: options.volume,\n      units: \"decibels\"\n    });\n    this.volume = this.output.gain;\n    readOnly(this, \"volume\");\n    this._unmutedVolume = options.volume; // set the mute initially\n\n    this.mute = options.mute;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const vol = new Tone.Volume(-12).toDestination();\n   * const osc = new Tone.Oscillator().connect(vol).start();\n   * // mute the output\n   * vol.mute = true;\n   */\n\n\n  get mute() {\n    return this.volume.value === -Infinity;\n  }\n\n  set mute(mute) {\n    if (!this.mute && mute) {\n      this._unmutedVolume = this.volume.value; // maybe it should ramp here?\n\n      this.volume.value = -Infinity;\n    } else if (this.mute && !mute) {\n      this.volume.value = this._unmutedVolume;\n    }\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.input.dispose();\n    this.volume.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,yBAArB;AAEA,SAASC,aAAT,QAAoD,kCAApD;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAOA;;;;;;;;;AAQA,OAAM,MAAOC,MAAP,SAAsBH,aAAtB,CAAkD;EAiCvDI;IAEC,MAAMH,oBAAoB,CAACE,MAAM,CAACE,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,QAAD,CAAlC,CAA1B;IAjCQ,YAAe,QAAf;IAkCR,MAAMC,OAAO,GAAGN,oBAAoB,CAACE,MAAM,CAACE,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,QAAD,CAAlC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,MAAL,GAAc,IAAIV,IAAJ,CAAS;MACnCW,OAAO,EAAE,KAAKA,OADqB;MAEnCC,IAAI,EAAEJ,OAAO,CAACK,MAFqB;MAGnCC,KAAK,EAAE;IAH4B,CAAT,CAA3B;IAKA,KAAKD,MAAL,GAAc,KAAKH,MAAL,CAAYE,IAA1B;IACAT,QAAQ,CAAC,IAAD,EAAO,QAAP,CAAR;IACA,KAAKY,cAAL,GAAsBP,OAAO,CAACK,MAA9B,CAZD,CAcC;;IACA,KAAKG,IAAL,GAAYR,OAAO,CAACQ,IAApB;EACA;;EAEiB,OAAXV,WAAW;IACjB,OAAOW,MAAM,CAACC,MAAP,CAAcjB,aAAa,CAACK,WAAd,EAAd,EAA2C;MACjDU,IAAI,EAAE,KAD2C;MAEjDH,MAAM,EAAE;IAFyC,CAA3C,CAAP;EAIA;EAED;;;;;;;;;;EAQQ,IAAJG,IAAI;IACP,OAAO,KAAKH,MAAL,CAAYM,KAAZ,KAAsB,CAACC,QAA9B;EACA;;EACO,IAAJJ,IAAI,CAACA,IAAD,EAAc;IACrB,IAAI,CAAC,KAAKA,IAAN,IAAcA,IAAlB,EAAwB;MACvB,KAAKD,cAAL,GAAsB,KAAKF,MAAL,CAAYM,KAAlC,CADuB,CAEvB;;MACA,KAAKN,MAAL,CAAYM,KAAZ,GAAoB,CAACC,QAArB;IACA,CAJD,MAIO,IAAI,KAAKJ,IAAL,IAAa,CAACA,IAAlB,EAAwB;MAC9B,KAAKH,MAAL,CAAYM,KAAZ,GAAoB,KAAKJ,cAAzB;IACA;EACD;EAED;;;;;EAGAM,OAAO;IACN,MAAMA,OAAN;IACA,KAAKZ,KAAL,CAAWY,OAAX;IACA,KAAKR,MAAL,CAAYQ,OAAZ;IACA,OAAO,IAAP;EACA;;AAvFsD","names":["Gain","ToneAudioNode","optionsFromArguments","readOnly","Volume","constructor","getDefaults","arguments","options","input","output","context","gain","volume","units","_unmutedVolume","mute","Object","assign","value","Infinity","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/Volume.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n\ninterface VolumeOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode<VolumeOptions> {\n\n\treadonly name: string = \"Volume\";\n\n\t/**\n\t * the output node\n\t */\n\toutput: Gain<\"decibels\">;\n\n\t/**\n\t * Input and output are the same\n\t */\n\tinput: Gain<\"decibels\">;\n\n\t/**\n\t * The unmuted volume\n\t */\n\tprivate _unmutedVolume: Decibels;\n\n\t/**\n\t * The volume control in decibels.\n\t * @example\n\t * const vol = new Tone.Volume().toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * vol.volume.value = -20;\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume the initial volume in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<VolumeOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(Volume.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis.input = this.output = new Gain({\n\t\t\tcontext: this.context,\n\t\t\tgain: options.volume,\n\t\t\tunits: \"decibels\",\n\t\t});\n\t\tthis.volume = this.output.gain;\n\t\treadOnly(this, \"volume\");\n\t\tthis._unmutedVolume = options.volume;\n\n\t\t// set the mute initially\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): VolumeOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const vol = new Tone.Volume(-12).toDestination();\n\t * const osc = new Tone.Oscillator().connect(vol).start();\n\t * // mute the output\n\t * vol.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this.volume.value === -Infinity;\n\t}\n\tset mute(mute: boolean) {\n\t\tif (!this.mute && mute) {\n\t\t\tthis._unmutedVolume = this.volume.value;\n\t\t\t// maybe it should ramp here?\n\t\t\tthis.volume.value = -Infinity;\n\t\t} else if (this.mute && !mute) {\n\t\t\tthis.volume.value = this._unmutedVolume;\n\t\t}\n\t}\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.input.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}