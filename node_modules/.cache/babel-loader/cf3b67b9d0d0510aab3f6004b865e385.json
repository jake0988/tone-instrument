{"ast":null,"code":"import { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\n\nexport class MidSideEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"MidSideEffect\";\n    this._midSideMerge = new MidSideMerge({\n      context: this.context\n    });\n    this._midSideSplit = new MidSideSplit({\n      context: this.context\n    });\n    this._midSend = this._midSideSplit.mid;\n    this._sideSend = this._midSideSplit.side;\n    this._midReturn = this._midSideMerge.mid;\n    this._sideReturn = this._midSideMerge.side; // the connections\n\n    this.effectSend.connect(this._midSideSplit);\n\n    this._midSideMerge.connect(this.effectReturn);\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  connectEffectMid() {\n    for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n      nodes[_key] = arguments[_key];\n    }\n\n    this._midSend.chain(...nodes, this._midReturn);\n  }\n  /**\n   * Connect the side chain of the effect\n   */\n\n\n  connectEffectSide() {\n    for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      nodes[_key2] = arguments[_key2];\n    }\n\n    this._sideSend.chain(...nodes, this._sideReturn);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._midSideSplit.dispose();\n\n    this._midSideMerge.dispose();\n\n    this._midSend.dispose();\n\n    this._sideSend.dispose();\n\n    this._midReturn.dispose();\n\n    this._sideReturn.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAsC,UAAtC;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA,SAASC,YAAT,QAA6B,mCAA7B;AAKA;;;;;;;;;;;AAUA,OAAM,MAAgBC,aAAhB,SAA4EH,MAA5E,CAA2F;EAkChGI,YAAYC,OAAZ,EAAyC;IAExC,MAAMA,OAAN;IAlCQ,YAAe,eAAf;IAoCR,KAAKC,aAAL,GAAqB,IAAIJ,YAAJ,CAAiB;MAAEK,OAAO,EAAE,KAAKA;IAAhB,CAAjB,CAArB;IACA,KAAKC,aAAL,GAAqB,IAAIP,YAAJ,CAAiB;MAAEM,OAAO,EAAE,KAAKA;IAAhB,CAAjB,CAArB;IACA,KAAKE,QAAL,GAAgB,KAAKD,aAAL,CAAmBE,GAAnC;IACA,KAAKC,SAAL,GAAiB,KAAKH,aAAL,CAAmBI,IAApC;IACA,KAAKC,UAAL,GAAkB,KAAKP,aAAL,CAAmBI,GAArC;IACA,KAAKI,WAAL,GAAmB,KAAKR,aAAL,CAAmBM,IAAtC,CATwC,CAWxC;;IACA,KAAKG,UAAL,CAAgBC,OAAhB,CAAwB,KAAKR,aAA7B;;IACA,KAAKF,aAAL,CAAmBU,OAAnB,CAA2B,KAAKC,YAAhC;EACA;EAED;;;;;EAGUC,gBAAgB,GAAuB;IAAA,kCAAnBC,KAAmB;MAAnBA,KAAmB;IAAA;;IAChD,KAAKV,QAAL,CAAcW,KAAd,CAAoB,GAAGD,KAAvB,EAA8B,KAAKN,UAAnC;EACA;EAED;;;;;EAGUQ,iBAAiB,GAAuB;IAAA,mCAAnBF,KAAmB;MAAnBA,KAAmB;IAAA;;IACjD,KAAKR,SAAL,CAAeS,KAAf,CAAqB,GAAGD,KAAxB,EAA+B,KAAKL,WAApC;EACA;;EAEDQ,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKd,aAAL,CAAmBc,OAAnB;;IACA,KAAKhB,aAAL,CAAmBgB,OAAnB;;IACA,KAAKb,QAAL,CAAca,OAAd;;IACA,KAAKX,SAAL,CAAeW,OAAf;;IACA,KAAKT,UAAL,CAAgBS,OAAhB;;IACA,KAAKR,WAAL,CAAiBQ,OAAjB;;IACA,OAAO,IAAP;EACA;;AAzE+F","names":["Effect","MidSideSplit","MidSideMerge","MidSideEffect","constructor","options","_midSideMerge","context","_midSideSplit","_midSend","mid","_sideSend","side","_midReturn","_sideReturn","effectSend","connect","effectReturn","connectEffectMid","nodes","chain","connectEffectSide","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/MidSideEffect.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\nimport { OutputNode, ToneAudioNode } from \"../core/context/ToneAudioNode\";\n\nexport type MidSideEffectOptions = EffectOptions;\n\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\nexport abstract class MidSideEffect<Options extends MidSideEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"MidSideEffect\";\n\n\t/**\n\t * The mid/side split\n\t */\n\tprivate _midSideSplit: MidSideSplit;\n\t\n\t/**\n\t * The mid/side merge\n\t */\n\tprivate _midSideMerge: MidSideMerge;\n\t\n\t/**\n\t * The mid send. Connect to mid processing\n\t */\n\tprotected _midSend: ToneAudioNode;\n\t\n\t/**\n\t * The side send. Connect to side processing\n\t */\n\tprotected _sideSend: ToneAudioNode;\n\t\n\t/**\n\t * The mid return connection\n\t */\n\tprotected _midReturn: ToneAudioNode;\n\t\n\t/**\n\t * The side return connection\n\t */\n\tprotected _sideReturn: ToneAudioNode;\n\n\tconstructor(options: MidSideEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._midSideMerge = new MidSideMerge({ context: this.context });\n\t\tthis._midSideSplit = new MidSideSplit({ context: this.context });\n\t\tthis._midSend = this._midSideSplit.mid;\n\t\tthis._sideSend = this._midSideSplit.side;\n\t\tthis._midReturn = this._midSideMerge.mid;\n\t\tthis._sideReturn = this._midSideMerge.side;\n\n\t\t// the connections\n\t\tthis.effectSend.connect(this._midSideSplit);\n\t\tthis._midSideMerge.connect(this.effectReturn);\n\t}\n\n\t/**\n\t * Connect the mid chain of the effect\n\t */\n\tprotected connectEffectMid(...nodes: OutputNode[]): void{\n\t\tthis._midSend.chain(...nodes, this._midReturn);\n\t}\n\t\n\t/**\n\t * Connect the side chain of the effect\n\t */\n\tprotected connectEffectSide(...nodes: OutputNode[]): void{\n\t\tthis._sideSend.chain(...nodes, this._sideReturn);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._midSideSplit.dispose();\n\t\tthis._midSideMerge.dispose();\n\t\tthis._midSend.dispose();\n\t\tthis._sideSend.dispose();\n\t\tthis._midReturn.dispose();\n\t\tthis._sideReturn.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}