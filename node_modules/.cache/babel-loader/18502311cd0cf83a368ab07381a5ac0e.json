{"ast":null,"code":"import { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\n\nexport class Negate extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Negate\";\n    /**\n     * negation is done by multiplying by -1\n     */\n\n    this._multiply = new Multiply({\n      context: this.context,\n      value: -1\n    });\n    /**\n     * The input and output are equal to the multiply node\n     */\n\n    this.input = this._multiply;\n    this.output = this._multiply;\n  }\n  /**\n   * clean up\n   * @returns {Negate} this\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._multiply.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAEA;;;;;;;;;;AASA,OAAM,MAAOC,MAAP,SAAsBD,cAAtB,CAA0D;EAAhEE;;IAEU,YAAe,QAAf;IAET;;;;IAGQ,iBAAsB,IAAIH,QAAJ,CAAa;MAC1CI,OAAO,EAAE,KAAKA,OAD4B;MAE1CC,KAAK,EAAE,CAAC;IAFkC,CAAb,CAAtB;IAKR;;;;IAGA,aAAQ,KAAKC,SAAb;IACA,cAAS,KAAKA,SAAd;EAWA;EATA;;;;;;EAIAC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKD,SAAL,CAAeC,OAAf;;IACA,OAAO,IAAP;EACA;;AA1B8D","names":["Multiply","SignalOperator","Negate","constructor","context","value","_multiply","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/Negate.ts"],"sourcesContent":["import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\n/**\n * Negate the incoming signal. i.e. an input signal of 10 will output -10\n *\n * @example\n * const neg = new Tone.Negate();\n * const sig = new Tone.Signal(-2).connect(neg);\n * // output of neg is positive 2.\n * @category Signal\n */\nexport class Negate extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Negate\";\n\n\t/**\n\t * negation is done by multiplying by -1\n\t */\n\tprivate _multiply: Multiply = new Multiply({\n\t\tcontext: this.context,\n\t\tvalue: -1,\n\t});\n\n\t/**\n\t * The input and output are equal to the multiply node\n\t */\n\tinput = this._multiply;\n\toutput = this._multiply;\n\n\t/**\n\t * clean up\n\t * @returns {Negate} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._multiply.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}