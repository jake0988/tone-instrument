{"ast":null,"code":"//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\n\nexport function onContextInit(cb) {\n  notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\n\nexport function initializeContext(ctx) {\n  // add any additional modules\n  notifyNewContext.forEach(cb => cb(ctx));\n}\n/**\n * Array of callbacks to invoke when a new context is created\n */\n\nconst notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\n\nexport function onContextClose(cb) {\n  notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n  // add any additional modules\n  notifyCloseContext.forEach(cb => cb(ctx));\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;;AAIA;;;AAGA,MAAMA,gBAAgB,GAAkC,EAAxD;AAEA;;;;AAGA,OAAM,SAAUC,aAAV,CAAwBC,EAAxB,EAAkD;EACvDF,gBAAgB,CAACG,IAAjB,CAAsBD,EAAtB;AACA;AAED;;;;AAGA,OAAM,SAAUE,iBAAV,CAA4BC,GAA5B,EAAwC;EAC7C;EACAL,gBAAgB,CAACM,OAAjB,CAAyBJ,EAAE,IAAIA,EAAE,CAACG,GAAD,CAAjC;AACA;AAED;;;;AAGA,MAAME,kBAAkB,GAAkC,EAA1D;AAEA;;;;AAGA,OAAM,SAAUC,cAAV,CAAyBN,EAAzB,EAAmD;EACxDK,kBAAkB,CAACJ,IAAnB,CAAwBD,EAAxB;AACA;AAED,OAAM,SAAUO,YAAV,CAAuBJ,GAAvB,EAAmC;EACxC;EACAE,kBAAkB,CAACD,OAAnB,CAA2BJ,EAAE,IAAIA,EAAE,CAACG,GAAD,CAAnC;AACA","names":["notifyNewContext","onContextInit","cb","push","initializeContext","ctx","forEach","notifyCloseContext","onContextClose","closeContext"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/ContextInitialization.ts"],"sourcesContent":["//-------------------------------------\n// INITIALIZING NEW CONTEXT\n//-------------------------------------\n\ntype Context = import(\"./Context\").Context;\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb: (ctx: Context) => void): void {\n\tnotifyNewContext.push(cb);\n}\n\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyNewContext.forEach(cb => cb(ctx));\n}\n\n/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyCloseContext: Array<(ctx: Context) => void> = [];\n\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb: (ctx: Context) => void): void {\n\tnotifyCloseContext.push(cb);\n}\n\nexport function closeContext(ctx: Context): void {\n\t// add any additional modules\n\tnotifyCloseContext.forEach(cb => cb(ctx));\n}\n"]},"metadata":{},"sourceType":"module"}