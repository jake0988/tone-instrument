{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { readOnly } from \"../../core/util/Interface\";\n;\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio.\n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\n\nexport class Limiter extends ToneAudioNode {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n    this.name = \"Limiter\";\n    const options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n    this._compressor = this.input = this.output = new Compressor({\n      context: this.context,\n      ratio: 20,\n      attack: 0.003,\n      release: 0.01,\n      threshold: options.threshold\n    });\n    this.threshold = this._compressor.threshold;\n    readOnly(this, \"threshold\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      threshold: -12\n    });\n  }\n  /**\n   * A read-only decibel value for metering purposes, representing the current amount of gain\n   * reduction that the compressor is applying to the signal.\n   */\n\n\n  get reduction() {\n    return this._compressor.reduction;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._compressor.dispose();\n\n    this.threshold.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAAgCA,aAAhC,QAA2E,kCAA3E;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,SAASC,QAAT,QAAyB,2BAAzB;AAIC;AAED;;;;;;;;;;;;AAWA,OAAM,MAAOC,OAAP,SAAuBJ,aAAvB,CAAoD;EAmBzDK;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcN,oBAAoB,CAACG,OAAO,CAACI,WAAR,EAAD,EAAwBC,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAAlC,CAAN;IAlBQ,YAAe,SAAf;IAmBR,MAAMC,OAAO,GAAGT,oBAAoB,CAACG,OAAO,CAACI,WAAR,EAAD,EAAwBC,SAAxB,EAAmC,CAAC,WAAD,CAAnC,CAApC;IAEA,KAAKE,WAAL,GAAmB,KAAKC,KAAL,GAAa,KAAKC,MAAL,GAAc,IAAIX,UAAJ,CAAe;MAC5DY,OAAO,EAAE,KAAKA,OAD8C;MAE5DC,KAAK,EAAE,EAFqD;MAG5DC,MAAM,EAAE,KAHoD;MAI5DC,OAAO,EAAE,IAJmD;MAK5DC,SAAS,EAAER,OAAO,CAACQ;IALyC,CAAf,CAA9C;IAQA,KAAKA,SAAL,GAAiB,KAAKP,WAAL,CAAiBO,SAAlC;IACAf,QAAQ,CAAC,IAAD,EAAO,WAAP,CAAR;EACA;;EAEiB,OAAXK,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcP,aAAa,CAACQ,WAAd,EAAd,EAA2C;MACjDU,SAAS,EAAE,CAAC;IADqC,CAA3C,CAAP;EAGA;EAED;;;;;;EAIa,IAATC,SAAS;IACZ,OAAO,KAAKR,WAAL,CAAiBQ,SAAxB;EACA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKT,WAAL,CAAiBS,OAAjB;;IACA,KAAKF,SAAL,CAAeE,OAAf;IACA,OAAO,IAAP;EACA;;AAtDwD","names":["ToneAudioNode","optionsFromArguments","Compressor","readOnly","Limiter","constructor","Object","assign","getDefaults","arguments","options","_compressor","input","output","context","ratio","attack","release","threshold","reduction","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/dynamics/Limiter.ts"],"sourcesContent":["import { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Compressor } from \"./Compressor\";\nimport { Param } from \"../../core/context/Param\";\nimport { readOnly } from \"../../core/util/Interface\";\n\nexport interface LimiterOptions extends ToneAudioNodeOptions {\n\tthreshold: Decibels;\n};\n\n/**\n * Limiter will limit the loudness of an incoming signal.\n * Under the hood it's composed of a [[Compressor]] with a fast attack\n * and release and max compression ratio. \n *\n * @example\n * const limiter = new Tone.Limiter(-20).toDestination();\n * const oscillator = new Tone.Oscillator().connect(limiter);\n * oscillator.start();\n * @category Component\n */\nexport class Limiter extends ToneAudioNode<LimiterOptions> {\n\n\treadonly name: string = \"Limiter\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The compressor which does the limiting\n\t */\n\tprivate _compressor: Compressor;\n\n\treadonly threshold: Param<\"decibels\">\n\n\t/**\n\t * @param threshold The threshold above which the gain reduction is applied.\n\t */\n\tconstructor(threshold?: Decibels);\n\tconstructor(options?: Partial<LimiterOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"])));\n\t\tconst options = optionsFromArguments(Limiter.getDefaults(), arguments, [\"threshold\"]);\n\n\t\tthis._compressor = this.input = this.output = new Compressor({\n\t\t\tcontext: this.context,\n\t\t\tratio: 20,\n\t\t\tattack: 0.003,\n\t\t\trelease: 0.01,\n\t\t\tthreshold: options.threshold\n\t\t});\n\n\t\tthis.threshold = this._compressor.threshold;\n\t\treadOnly(this, \"threshold\");\n\t}\n\n\tstatic getDefaults(): LimiterOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tthreshold: -12\n\t\t});\n\t}\n\n\t/**\n\t * A read-only decibel value for metering purposes, representing the current amount of gain\n\t * reduction that the compressor is applying to the signal. \n\t */\n\tget reduction(): Decibels {\n\t\treturn this._compressor.reduction;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._compressor.dispose();\n\t\tthis.threshold.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}