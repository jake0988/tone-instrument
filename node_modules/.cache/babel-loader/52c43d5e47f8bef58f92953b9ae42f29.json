{"ast":null,"code":"import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.\n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\n\nexport class AutoPanner extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n    this.name = \"AutoPanner\";\n    const options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n    this._panner = new Panner({\n      context: this.context,\n      channelCount: options.channelCount\n    }); // connections\n\n    this.connectEffect(this._panner);\n\n    this._lfo.connect(this._panner.pan);\n\n    this._lfo.min = -1;\n    this._lfo.max = 1;\n  }\n\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      channelCount: 1\n    });\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,6BAAvB;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AAOA;;;;;;;;;;;;AAWA,OAAM,MAAOC,UAAP,SAA0BD,SAA1B,CAAsD;EAc3DE;IAEC,MAAMH,oBAAoB,CAACE,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,WAAD,CAAtC,CAA1B;IAdQ,YAAe,YAAf;IAeR,MAAMC,OAAO,GAAGN,oBAAoB,CAACE,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,WAAD,CAAtC,CAApC;IAEA,KAAKE,OAAL,GAAe,IAAIR,MAAJ,CAAW;MACzBS,OAAO,EAAE,KAAKA,OADW;MAEzBC,YAAY,EAAEH,OAAO,CAACG;IAFG,CAAX,CAAf,CALD,CASC;;IACA,KAAKC,aAAL,CAAmB,KAAKH,OAAxB;;IACA,KAAKI,IAAL,CAAUC,OAAV,CAAkB,KAAKL,OAAL,CAAaM,GAA/B;;IACA,KAAKF,IAAL,CAAUG,GAAV,GAAgB,CAAC,CAAjB;IACA,KAAKH,IAAL,CAAUI,GAAV,GAAgB,CAAhB;EACA;;EAEiB,OAAXX,WAAW;IACjB,OAAOY,MAAM,CAACC,MAAP,CAAchB,SAAS,CAACG,WAAV,EAAd,EAAuC;MAC7CK,YAAY,EAAE;IAD+B,CAAvC,CAAP;EAGA;;EAEDS,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKX,OAAL,CAAaW,OAAb;;IACA,OAAO,IAAP;EACA;;AAxC0D","names":["Panner","optionsFromArguments","LFOEffect","AutoPanner","constructor","getDefaults","arguments","options","_panner","context","channelCount","connectEffect","_lfo","connect","pan","min","max","Object","assign","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/AutoPanner.ts"],"sourcesContent":["import { Panner } from \"../component/channel/Panner\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\nimport { Frequency } from \"../core/type/Units\";\n\nexport interface AutoPannerOptions extends LFOEffectOptions {\n\tchannelCount: number;\n}\n\n/**\n * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount. \n * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n *\n * @example\n * // create an autopanner and start it\n * const autoPanner = new Tone.AutoPanner(\"4n\").toDestination().start();\n * // route an oscillator through the panner and start it\n * const oscillator = new Tone.Oscillator().connect(autoPanner).start();\n * @category Effect\n */\nexport class AutoPanner extends LFOEffect<AutoPannerOptions> {\n\n\treadonly name: string = \"AutoPanner\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly _panner: Panner;\n\n\t/**\n\t * @param frequency Rate of left-right oscillation. \n\t */\n\tconstructor(frequency?: Frequency);\n\tconstructor(options?: Partial<AutoPannerOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]));\n\t\tconst options = optionsFromArguments(AutoPanner.getDefaults(), arguments, [\"frequency\"]);\n\n\t\tthis._panner = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tchannelCount: options.channelCount\n\t\t});\n\t\t// connections\n\t\tthis.connectEffect(this._panner);\n\t\tthis._lfo.connect(this._panner.pan);\n\t\tthis._lfo.min = -1;\n\t\tthis._lfo.max = 1;\n\t}\n\n\tstatic getDefaults(): AutoPannerOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tchannelCount: 1\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\treturn this;\n\t}\n}\n\n"]},"metadata":{},"sourceType":"module"}