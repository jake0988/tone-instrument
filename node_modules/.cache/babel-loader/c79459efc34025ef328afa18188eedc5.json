{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\n\nexport class MembraneSynth extends Synth {\n  constructor() {\n    super(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n    this.name = \"MembraneSynth\";\n    /**\n     * Portamento is ignored in this synth. use pitch decay instead.\n     */\n\n    this.portamento = 0;\n    const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n    this.pitchDecay = options.pitchDecay;\n    this.octaves = options.octaves;\n    readOnly(this, [\"oscillator\", \"envelope\"]);\n  }\n\n  static getDefaults() {\n    return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n      envelope: {\n        attack: 0.001,\n        attackCurve: \"exponential\",\n        decay: 0.4,\n        release: 1.4,\n        sustain: 0.01\n      },\n      octaves: 10,\n      oscillator: {\n        type: \"sine\"\n      },\n      pitchDecay: 0.05\n    });\n  }\n\n  setNote(note, time) {\n    const seconds = this.toSeconds(time);\n    const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n    const maxNote = hertz * this.octaves;\n    this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n    return this;\n  }\n\n  dispose() {\n    super.dispose();\n    return this;\n  }\n\n}\n\n__decorate([range(0)], MembraneSynth.prototype, \"octaves\", void 0);\n\n__decorate([timeRange(0)], MembraneSynth.prototype, \"pitchDecay\", void 0);","map":{"version":3,"mappings":";AAAA,SAASA,cAAT,QAA+B,wBAA/B;AAEA,SAASC,SAAT,EAAoBC,oBAApB,QAAgD,uBAAhD;AACA,SAASC,QAAT,QAA2C,wBAA3C;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,KAAT,QAAoC,SAApC;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,wBAAjC;AAOA;;;;;;;;;;;;;;AAaA,OAAM,MAAOC,aAAP,SAA6BH,KAA7B,CAAwD;EA6B7DI;IAEC,MAAMP,oBAAoB,CAACM,aAAa,CAACE,WAAd,EAAD,EAA8BC,SAA9B,CAA1B;IA7BQ,YAAe,eAAf;IAkBT;;;;IAGS,kBAAa,CAAb;IASR,MAAMC,OAAO,GAAGV,oBAAoB,CAACM,aAAa,CAACE,WAAd,EAAD,EAA8BC,SAA9B,CAApC;IAEA,KAAKE,UAAL,GAAkBD,OAAO,CAACC,UAA1B;IACA,KAAKC,OAAL,GAAeF,OAAO,CAACE,OAAvB;IACAX,QAAQ,CAAC,IAAD,EAAO,CAAC,YAAD,EAAe,UAAf,CAAP,CAAR;EACA;;EAEiB,OAAXO,WAAW;IACjB,OAAOT,SAAS,CAACG,UAAU,CAACM,WAAX,EAAD,EAA2BL,KAAK,CAACK,WAAN,EAA3B,EAAgD;MAC/DK,QAAQ,EAAE;QACTC,MAAM,EAAE,KADC;QAETC,WAAW,EAAE,aAFJ;QAGTC,KAAK,EAAE,GAHE;QAITC,OAAO,EAAE,GAJA;QAKTC,OAAO,EAAE;MALA,CADqD;MAQ/DN,OAAO,EAAE,EARsD;MAS/DO,UAAU,EAAE;QACXC,IAAI,EAAE;MADK,CATmD;MAY/DT,UAAU,EAAE;IAZmD,CAAhD,CAAhB;EAcA;;EAEDU,OAAO,CAACC,IAAD,EAAmCC,IAAnC,EAA8C;IACpD,MAAMC,OAAO,GAAG,KAAKC,SAAL,CAAeF,IAAf,CAAhB;IACA,MAAMG,KAAK,GAAG,KAAKC,WAAL,CAAiBL,IAAI,YAAYxB,cAAhB,GAAiCwB,IAAI,CAACK,WAAL,EAAjC,GAAsDL,IAAvE,CAAd;IACA,MAAMM,OAAO,GAAGF,KAAK,GAAG,KAAKd,OAA7B;IACA,KAAKO,UAAL,CAAgBU,SAAhB,CAA0BC,cAA1B,CAAyCF,OAAzC,EAAkDJ,OAAlD;IACA,KAAKL,UAAL,CAAgBU,SAAhB,CAA0BE,4BAA1B,CAAuDL,KAAvD,EAA8DF,OAAO,GAAG,KAAKC,SAAL,CAAe,KAAKd,UAApB,CAAxE;IACA,OAAO,IAAP;EACA;;EAEDqB,OAAO;IACN,MAAMA,OAAN;IACA,OAAO,IAAP;EACA;;AApE4D;;AAU7DC,YADC7B,KAAK,CAAC,CAAD,CACN;;AAQA6B,YADC5B,SAAS,CAAC,CAAD,CACV","names":["FrequencyClass","deepMerge","optionsFromArguments","readOnly","Monophonic","Synth","range","timeRange","MembraneSynth","constructor","getDefaults","arguments","options","pitchDecay","octaves","envelope","attack","attackCurve","decay","release","sustain","oscillator","type","setNote","note","time","seconds","toSeconds","hertz","toFrequency","maxNote","frequency","setValueAtTime","exponentialRampToValueAtTime","dispose","__decorate"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/instrument/MembraneSynth.ts"],"sourcesContent":["import { FrequencyClass } from \"../core/type/Frequency\";\nimport { Frequency, Positive, Time } from \"../core/type/Units\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly, RecursivePartial } from \"../core/util/Interface\";\nimport { Monophonic } from \"./Monophonic\";\nimport { Synth, SynthOptions } from \"./Synth\";\nimport { range, timeRange } from \"../core/util/Decorator\";\n\nexport interface MembraneSynthOptions extends SynthOptions {\n\tpitchDecay: Time;\n\toctaves: Positive;\n}\n\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth<MembraneSynthOptions> {\n\n\treadonly name: string = \"MembraneSynth\";\n\n\t/**\n\t * The number of octaves the pitch envelope ramps.\n\t * @min 0.5\n\t * @max 8\n\t */\n\t@range(0)\n\toctaves: Positive;\n\n\t/**\n\t * The amount of time the frequency envelope takes.\n\t * @min 0\n\t * @max 0.5\n\t */\n\t@timeRange(0)\n\tpitchDecay: Time;\n\n\t/**\n\t * Portamento is ignored in this synth. use pitch decay instead.\n\t */\n\treadonly portamento = 0;\n\n\t/**\n\t * @param options the options available for the synth see defaults\n\t */\n\tconstructor(options?: RecursivePartial<MembraneSynthOptions>)\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(MembraneSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n\n\t\tthis.pitchDecay = options.pitchDecay;\n\t\tthis.octaves = options.octaves;\n\t\treadOnly(this, [\"oscillator\", \"envelope\"]);\n\t}\n\n\tstatic getDefaults(): MembraneSynthOptions {\n\t\treturn deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n\t\t\tenvelope: {\n\t\t\t\tattack: 0.001,\n\t\t\t\tattackCurve: \"exponential\",\n\t\t\t\tdecay: 0.4,\n\t\t\t\trelease: 1.4,\n\t\t\t\tsustain: 0.01,\n\t\t\t},\n\t\t\toctaves: 10,\n\t\t\toscillator: {\n\t\t\t\ttype: \"sine\",\n\t\t\t},\n\t\t\tpitchDecay: 0.05,\n\t\t});\n\t}\n\n\tsetNote(note: Frequency | FrequencyClass, time?: Time): this {\n\t\tconst seconds = this.toSeconds(time);\n\t\tconst hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n\t\tconst maxNote = hertz * this.octaves;\n\t\tthis.oscillator.frequency.setValueAtTime(maxNote, seconds);\n\t\tthis.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n\t\treturn this;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}