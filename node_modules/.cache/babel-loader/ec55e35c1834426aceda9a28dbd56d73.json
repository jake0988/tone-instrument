{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport { createAudioContext, createAudioWorkletNode } from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\n\nexport class Context extends BaseContext {\n  constructor() {\n    super();\n    this.name = \"Context\";\n    /**\n     * An object containing all of the constants AudioBufferSourceNodes\n     */\n\n    this._constants = new Map();\n    /**\n     * All of the setTimeout events.\n     */\n\n    this._timeouts = new Timeline();\n    /**\n     * The timeout id counter\n     */\n\n    this._timeoutIds = 0;\n    /**\n     * Private indicator if the context has been initialized\n     */\n\n    this._initialized = false;\n    /**\n     * Indicates if the context is an OfflineAudioContext or an AudioContext\n     */\n\n    this.isOffline = false; //--------------------------------------------\n    // AUDIO WORKLET\n    //--------------------------------------------\n\n    /**\n     * Maps a module name to promise of the addModule method\n     */\n\n    this._workletModules = new Map();\n    const options = optionsFromArguments(Context.getDefaults(), arguments, [\"context\"]);\n\n    if (options.context) {\n      this._context = options.context;\n    } else {\n      this._context = createAudioContext({\n        latencyHint: options.latencyHint\n      });\n    }\n\n    this._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval);\n    this.on(\"tick\", this._timeoutLoop.bind(this)); // fwd events from the context\n\n    this._context.onstatechange = () => {\n      this.emit(\"statechange\", this.state);\n    };\n\n    this._setLatencyHint(options.latencyHint);\n\n    this.lookAhead = options.lookAhead;\n  }\n\n  static getDefaults() {\n    return {\n      clockSource: \"worker\",\n      latencyHint: \"interactive\",\n      lookAhead: 0.1,\n      updateInterval: 0.05\n    };\n  }\n  /**\n   * Finish setting up the context. **You usually do not need to do this manually.**\n   */\n\n\n  initialize() {\n    if (!this._initialized) {\n      // add any additional modules\n      initializeContext(this);\n      this._initialized = true;\n    }\n\n    return this;\n  } //---------------------------\n  // BASE AUDIO CONTEXT METHODS\n  //---------------------------\n\n\n  createAnalyser() {\n    return this._context.createAnalyser();\n  }\n\n  createOscillator() {\n    return this._context.createOscillator();\n  }\n\n  createBufferSource() {\n    return this._context.createBufferSource();\n  }\n\n  createBiquadFilter() {\n    return this._context.createBiquadFilter();\n  }\n\n  createBuffer(numberOfChannels, length, sampleRate) {\n    return this._context.createBuffer(numberOfChannels, length, sampleRate);\n  }\n\n  createChannelMerger(numberOfInputs) {\n    return this._context.createChannelMerger(numberOfInputs);\n  }\n\n  createChannelSplitter(numberOfOutputs) {\n    return this._context.createChannelSplitter(numberOfOutputs);\n  }\n\n  createConstantSource() {\n    return this._context.createConstantSource();\n  }\n\n  createConvolver() {\n    return this._context.createConvolver();\n  }\n\n  createDelay(maxDelayTime) {\n    return this._context.createDelay(maxDelayTime);\n  }\n\n  createDynamicsCompressor() {\n    return this._context.createDynamicsCompressor();\n  }\n\n  createGain() {\n    return this._context.createGain();\n  }\n\n  createIIRFilter(feedForward, feedback) {\n    // @ts-ignore\n    return this._context.createIIRFilter(feedForward, feedback);\n  }\n\n  createPanner() {\n    return this._context.createPanner();\n  }\n\n  createPeriodicWave(real, imag, constraints) {\n    return this._context.createPeriodicWave(real, imag, constraints);\n  }\n\n  createStereoPanner() {\n    return this._context.createStereoPanner();\n  }\n\n  createWaveShaper() {\n    return this._context.createWaveShaper();\n  }\n\n  createMediaStreamSource(stream) {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamSource(stream);\n  }\n\n  createMediaElementSource(element) {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaElementSource(element);\n  }\n\n  createMediaStreamDestination() {\n    assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n    const context = this._context;\n    return context.createMediaStreamDestination();\n  }\n\n  decodeAudioData(audioData) {\n    return this._context.decodeAudioData(audioData);\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get currentTime() {\n    return this._context.currentTime;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get state() {\n    return this._context.state;\n  }\n  /**\n   * The current time in seconds of the AudioContext.\n   */\n\n\n  get sampleRate() {\n    return this._context.sampleRate;\n  }\n  /**\n   * The listener\n   */\n\n\n  get listener() {\n    this.initialize();\n    return this._listener;\n  }\n\n  set listener(l) {\n    assert(!this._initialized, \"The listener cannot be set after initialization.\");\n    this._listener = l;\n  }\n  /**\n   * There is only one Transport per Context. It is created on initialization.\n   */\n\n\n  get transport() {\n    this.initialize();\n    return this._transport;\n  }\n\n  set transport(t) {\n    assert(!this._initialized, \"The transport cannot be set after initialization.\");\n    this._transport = t;\n  }\n  /**\n   * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n   */\n\n\n  get draw() {\n    this.initialize();\n    return this._draw;\n  }\n\n  set draw(d) {\n    assert(!this._initialized, \"Draw cannot be set after initialization.\");\n    this._draw = d;\n  }\n  /**\n   * A reference to the Context's destination node.\n   */\n\n\n  get destination() {\n    this.initialize();\n    return this._destination;\n  }\n\n  set destination(d) {\n    assert(!this._initialized, \"The destination cannot be set after initialization.\");\n    this._destination = d;\n  }\n  /**\n   * Create an audio worklet node from a name and options. The module\n   * must first be loaded using [[addAudioWorkletModule]].\n   */\n\n\n  createAudioWorkletNode(name, options) {\n    return createAudioWorkletNode(this.rawContext, name, options);\n  }\n  /**\n   * Add an AudioWorkletProcessor module\n   * @param url The url of the module\n   * @param name The name of the module\n   */\n\n\n  addAudioWorkletModule(url, name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n\n      if (!this._workletModules.has(name)) {\n        this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));\n      }\n\n      yield this._workletModules.get(name);\n    });\n  }\n  /**\n   * Returns a promise which resolves when all of the worklets have been loaded on this context\n   */\n\n\n  workletsAreReady() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const promises = [];\n\n      this._workletModules.forEach(promise => promises.push(promise));\n\n      yield Promise.all(promises);\n    });\n  } //---------------------------\n  // TICKER\n  //---------------------------\n\n  /**\n   * How often the interval callback is invoked.\n   * This number corresponds to how responsive the scheduling\n   * can be. context.updateInterval + context.lookAhead gives you the\n   * total latency between scheduling an event and hearing it.\n   */\n\n\n  get updateInterval() {\n    return this._ticker.updateInterval;\n  }\n\n  set updateInterval(interval) {\n    this._ticker.updateInterval = interval;\n  }\n  /**\n   * What the source of the clock is, either \"worker\" (default),\n   * \"timeout\", or \"offline\" (none).\n   */\n\n\n  get clockSource() {\n    return this._ticker.type;\n  }\n\n  set clockSource(type) {\n    this._ticker.type = type;\n  }\n  /**\n   * The type of playback, which affects tradeoffs between audio\n   * output latency and responsiveness.\n   * In addition to setting the value in seconds, the latencyHint also\n   * accepts the strings \"interactive\" (prioritizes low latency),\n   * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n   * latency and performance).\n   * @example\n   * // prioritize sustained playback\n   * const context = new Tone.Context({ latencyHint: \"playback\" });\n   * // set this context as the global Context\n   * Tone.setContext(context);\n   * // the global context is gettable with Tone.getContext()\n   * console.log(Tone.getContext().latencyHint);\n   */\n\n\n  get latencyHint() {\n    return this._latencyHint;\n  }\n  /**\n   * Update the lookAhead and updateInterval based on the latencyHint\n   */\n\n\n  _setLatencyHint(hint) {\n    let lookAheadValue = 0;\n    this._latencyHint = hint;\n\n    if (isString(hint)) {\n      switch (hint) {\n        case \"interactive\":\n          lookAheadValue = 0.1;\n          break;\n\n        case \"playback\":\n          lookAheadValue = 0.5;\n          break;\n\n        case \"balanced\":\n          lookAheadValue = 0.25;\n          break;\n      }\n    }\n\n    this.lookAhead = lookAheadValue;\n    this.updateInterval = lookAheadValue / 2;\n  }\n  /**\n   * The unwrapped AudioContext or OfflineAudioContext\n   */\n\n\n  get rawContext() {\n    return this._context;\n  }\n  /**\n   * The current audio context time plus a short [[lookAhead]].\n   */\n\n\n  now() {\n    return this._context.currentTime + this.lookAhead;\n  }\n  /**\n   * The current audio context time without the [[lookAhead]].\n   * In most cases it is better to use [[now]] instead of [[immediate]] since\n   * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n   * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n   * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n   */\n\n\n  immediate() {\n    return this._context.currentTime;\n  }\n  /**\n   * Starts the audio context from a suspended state. This is required\n   * to initially start the AudioContext. See [[Tone.start]]\n   */\n\n\n  resume() {\n    if (isAudioContext(this._context)) {\n      return this._context.resume();\n    } else {\n      return Promise.resolve();\n    }\n  }\n  /**\n   * Close the context. Once closed, the context can no longer be used and\n   * any AudioNodes created from the context will be silent.\n   */\n\n\n  close() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (isAudioContext(this._context)) {\n        yield this._context.close();\n      }\n\n      if (this._initialized) {\n        closeContext(this);\n      }\n    });\n  }\n  /**\n   * **Internal** Generate a looped buffer at some constant value.\n   */\n\n\n  getConstant(val) {\n    if (this._constants.has(val)) {\n      return this._constants.get(val);\n    } else {\n      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\n      const arr = buffer.getChannelData(0);\n\n      for (let i = 0; i < arr.length; i++) {\n        arr[i] = val;\n      }\n\n      const constant = this._context.createBufferSource();\n\n      constant.channelCount = 1;\n      constant.channelCountMode = \"explicit\";\n      constant.buffer = buffer;\n      constant.loop = true;\n      constant.start(0);\n\n      this._constants.set(val, constant);\n\n      return constant;\n    }\n  }\n  /**\n   * Clean up. Also closes the audio context.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._ticker.dispose();\n\n    this._timeouts.dispose();\n\n    Object.keys(this._constants).map(val => this._constants[val].disconnect());\n    return this;\n  } //---------------------------\n  // TIMEOUTS\n  //---------------------------\n\n  /**\n   * The private loop which keeps track of the context scheduled timeouts\n   * Is invoked from the clock source\n   */\n\n\n  _timeoutLoop() {\n    const now = this.now();\n\n    let firstEvent = this._timeouts.peek();\n\n    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n      // invoke the callback\n      firstEvent.callback(); // shift the first event off\n\n      this._timeouts.shift(); // get the next one\n\n\n      firstEvent = this._timeouts.peek();\n    }\n  }\n  /**\n   * A setTimeout which is guaranteed by the clock source.\n   * Also runs in the offline context.\n   * @param  fn       The callback to invoke\n   * @param  timeout  The timeout in seconds\n   * @returns ID to use when invoking Context.clearTimeout\n   */\n\n\n  setTimeout(fn, timeout) {\n    this._timeoutIds++;\n    const now = this.now();\n\n    this._timeouts.add({\n      callback: fn,\n      id: this._timeoutIds,\n      time: now + timeout\n    });\n\n    return this._timeoutIds;\n  }\n  /**\n   * Clears a previously scheduled timeout with Tone.context.setTimeout\n   * @param  id  The ID returned from setTimeout\n   */\n\n\n  clearTimeout(id) {\n    this._timeouts.forEach(event => {\n      if (event.id === id) {\n        this._timeouts.remove(event);\n      }\n    });\n\n    return this;\n  }\n  /**\n   * Clear the function scheduled by [[setInterval]]\n   */\n\n\n  clearInterval(id) {\n    return this.clearTimeout(id);\n  }\n  /**\n   * Adds a repeating event to the context's callback clock\n   */\n\n\n  setInterval(fn, interval) {\n    const id = ++this._timeoutIds;\n\n    const intervalFn = () => {\n      const now = this.now();\n\n      this._timeouts.add({\n        callback: () => {\n          // invoke the callback\n          fn(); // invoke the event to repeat it\n\n          intervalFn();\n        },\n        id,\n        time: now + interval\n      });\n    }; // kick it off\n\n\n    intervalFn();\n    return id;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Ticker","isAudioContext","optionsFromArguments","Timeline","isDefined","isString","createAudioContext","createAudioWorkletNode","closeContext","initializeContext","BaseContext","assert","Context","constructor","Map","options","getDefaults","arguments","context","_context","latencyHint","_ticker","emit","bind","clockSource","updateInterval","on","_timeoutLoop","onstatechange","state","_setLatencyHint","lookAhead","initialize","_initialized","createAnalyser","createOscillator","createBufferSource","createBiquadFilter","createBuffer","numberOfChannels","length","sampleRate","createChannelMerger","numberOfInputs","createChannelSplitter","numberOfOutputs","createConstantSource","createConvolver","createDelay","maxDelayTime","createDynamicsCompressor","createGain","createIIRFilter","feedForward","feedback","createPanner","createPeriodicWave","real","imag","constraints","createStereoPanner","createWaveShaper","createMediaStreamSource","stream","createMediaElementSource","element","createMediaStreamDestination","decodeAudioData","audioData","currentTime","listener","_listener","l","transport","_transport","t","draw","_draw","d","destination","_destination","name","rawContext","addAudioWorkletModule","url","audioWorklet","_workletModules","has","set","addModule","get","workletsAreReady","promises","forEach","promise","push","Promise","all","interval","type","_latencyHint","hint","lookAheadValue","now","immediate","resume","resolve","close","getConstant","val","_constants","buffer","arr","getChannelData","i","constant","channelCount","channelCountMode","loop","start","dispose","_timeouts","Object","keys","map","disconnect","firstEvent","peek","time","callback","shift","setTimeout","fn","timeout","_timeoutIds","add","id","clearTimeout","event","remove","clearInterval","setInterval","intervalFn"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/context/Context.ts"],"sourcesContent":["import { Ticker, TickerClockSource } from \"../clock/Ticker\";\nimport { Seconds } from \"../type/Units\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { Timeline } from \"../util/Timeline\";\nimport { isDefined, isString } from \"../util/TypeCheck\";\nimport {\n\tAnyAudioContext,\n\tcreateAudioContext,\n\tcreateAudioWorkletNode,\n} from \"./AudioContext\";\nimport { closeContext, initializeContext } from \"./ContextInitialization\";\nimport { BaseContext, ContextLatencyHint } from \"./BaseContext\";\nimport { assert } from \"../util/Debug\";\n\ntype Transport = import(\"../clock/Transport\").Transport;\ntype Destination = import(\"./Destination\").Destination;\ntype Listener = import(\"./Listener\").Listener;\ntype Draw = import(\"../util/Draw\").Draw;\n\nexport interface ContextOptions {\n\tclockSource: TickerClockSource;\n\tlatencyHint: ContextLatencyHint;\n\tlookAhead: Seconds;\n\tupdateInterval: Seconds;\n\tcontext: AnyAudioContext;\n}\n\nexport interface ContextTimeoutEvent {\n\tcallback: (...args: any[]) => void;\n\tid: number;\n\ttime: Seconds;\n}\n\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n\treadonly name: string = \"Context\";\n\n\t/**\n\t * The amount of time into the future events are scheduled. Giving Web Audio\n\t * a short amount of time into the future to schedule events can reduce clicks and\n\t * improve performance. This value can be set to 0 to get the lowest latency.\n\t */\n\tlookAhead: Seconds;\n\n\t/**\n\t * private reference to the BaseAudioContext\n\t */\n\tprotected readonly _context: AnyAudioContext;\n\n\t/**\n\t * A reliable callback method\n\t */\n\tprivate readonly _ticker: Ticker;\n\n\t/**\n\t * The default latency hint\n\t */\n\tprivate _latencyHint!: ContextLatencyHint | Seconds;\n\n\t/**\n\t * An object containing all of the constants AudioBufferSourceNodes\n\t */\n\tprivate _constants = new Map<number, AudioBufferSourceNode>();\n\n\t/**\n\t * All of the setTimeout events.\n\t */\n\tprivate _timeouts: Timeline<ContextTimeoutEvent> = new Timeline();\n\n\t/**\n\t * The timeout id counter\n\t */\n\tprivate _timeoutIds = 0;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _transport!: Transport;\n\n\t/**\n\t * A reference the Listener singleton belonging to this context\n\t */\n\tprivate _listener!: Listener;\n\n\t/**\n\t * A reference the Destination singleton belonging to this context\n\t */\n\tprivate _destination!: Destination;\n\n\t/**\n\t * A reference the Transport singleton belonging to this context\n\t */\n\tprivate _draw!: Draw;\n\n\t/**\n\t * Private indicator if the context has been initialized\n\t */\n\tprivate _initialized = false;\n\n\t/**\n\t * Indicates if the context is an OfflineAudioContext or an AudioContext\n\t */\n\treadonly isOffline: boolean = false;\n\n\tconstructor(context?: AnyAudioContext);\n\tconstructor(options?: Partial<ContextOptions>);\n\tconstructor() {\n\t\tsuper();\n\t\tconst options = optionsFromArguments(Context.getDefaults(), arguments, [\n\t\t\t\"context\",\n\t\t]);\n\n\t\tif (options.context) {\n\t\t\tthis._context = options.context;\n\t\t} else {\n\t\t\tthis._context = createAudioContext({\n\t\t\t\tlatencyHint: options.latencyHint,\n\t\t\t});\n\t\t}\n\n\t\tthis._ticker = new Ticker(\n\t\t\tthis.emit.bind(this, \"tick\"),\n\t\t\toptions.clockSource,\n\t\t\toptions.updateInterval\n\t\t);\n\t\tthis.on(\"tick\", this._timeoutLoop.bind(this));\n\n\t\t// fwd events from the context\n\t\tthis._context.onstatechange = () => {\n\t\t\tthis.emit(\"statechange\", this.state);\n\t\t};\n\n\t\tthis._setLatencyHint(options.latencyHint);\n\t\tthis.lookAhead = options.lookAhead;\n\t}\n\n\tstatic getDefaults(): ContextOptions {\n\t\treturn {\n\t\t\tclockSource: \"worker\",\n\t\t\tlatencyHint: \"interactive\",\n\t\t\tlookAhead: 0.1,\n\t\t\tupdateInterval: 0.05,\n\t\t} as ContextOptions;\n\t}\n\n\t/**\n\t * Finish setting up the context. **You usually do not need to do this manually.**\n\t */\n\tprivate initialize(): this {\n\t\tif (!this._initialized) {\n\t\t\t// add any additional modules\n\t\t\tinitializeContext(this);\n\t\t\tthis._initialized = true;\n\t\t}\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// BASE AUDIO CONTEXT METHODS\n\t//---------------------------\n\n\tcreateAnalyser(): AnalyserNode {\n\t\treturn this._context.createAnalyser();\n\t}\n\tcreateOscillator(): OscillatorNode {\n\t\treturn this._context.createOscillator();\n\t}\n\tcreateBufferSource(): AudioBufferSourceNode {\n\t\treturn this._context.createBufferSource();\n\t}\n\tcreateBiquadFilter(): BiquadFilterNode {\n\t\treturn this._context.createBiquadFilter();\n\t}\n\tcreateBuffer(\n\t\tnumberOfChannels: number,\n\t\tlength: number,\n\t\tsampleRate: number\n\t): AudioBuffer {\n\t\treturn this._context.createBuffer(numberOfChannels, length, sampleRate);\n\t}\n\tcreateChannelMerger(\n\t\tnumberOfInputs?: number | undefined\n\t): ChannelMergerNode {\n\t\treturn this._context.createChannelMerger(numberOfInputs);\n\t}\n\tcreateChannelSplitter(\n\t\tnumberOfOutputs?: number | undefined\n\t): ChannelSplitterNode {\n\t\treturn this._context.createChannelSplitter(numberOfOutputs);\n\t}\n\tcreateConstantSource(): ConstantSourceNode {\n\t\treturn this._context.createConstantSource();\n\t}\n\tcreateConvolver(): ConvolverNode {\n\t\treturn this._context.createConvolver();\n\t}\n\tcreateDelay(maxDelayTime?: number | undefined): DelayNode {\n\t\treturn this._context.createDelay(maxDelayTime);\n\t}\n\tcreateDynamicsCompressor(): DynamicsCompressorNode {\n\t\treturn this._context.createDynamicsCompressor();\n\t}\n\tcreateGain(): GainNode {\n\t\treturn this._context.createGain();\n\t}\n\tcreateIIRFilter(\n\t\tfeedForward: number[] | Float32Array,\n\t\tfeedback: number[] | Float32Array\n\t): IIRFilterNode {\n\t\t// @ts-ignore\n\t\treturn this._context.createIIRFilter(feedForward, feedback);\n\t}\n\tcreatePanner(): PannerNode {\n\t\treturn this._context.createPanner();\n\t}\n\tcreatePeriodicWave(\n\t\treal: number[] | Float32Array,\n\t\timag: number[] | Float32Array,\n\t\tconstraints?: PeriodicWaveConstraints | undefined\n\t): PeriodicWave {\n\t\treturn this._context.createPeriodicWave(real, imag, constraints);\n\t}\n\tcreateStereoPanner(): StereoPannerNode {\n\t\treturn this._context.createStereoPanner();\n\t}\n\tcreateWaveShaper(): WaveShaperNode {\n\t\treturn this._context.createWaveShaper();\n\t}\n\tcreateMediaStreamSource(stream: MediaStream): MediaStreamAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamSource(stream);\n\t}\n\tcreateMediaElementSource(\n\t\telement: HTMLMediaElement\n\t): MediaElementAudioSourceNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaElementSource(element);\n\t}\n\tcreateMediaStreamDestination(): MediaStreamAudioDestinationNode {\n\t\tassert(\n\t\t\tisAudioContext(this._context),\n\t\t\t\"Not available if OfflineAudioContext\"\n\t\t);\n\t\tconst context = this._context as AudioContext;\n\t\treturn context.createMediaStreamDestination();\n\t}\n\tdecodeAudioData(audioData: ArrayBuffer): Promise<AudioBuffer> {\n\t\treturn this._context.decodeAudioData(audioData);\n\t}\n\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget currentTime(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget state(): AudioContextState {\n\t\treturn this._context.state;\n\t}\n\t/**\n\t * The current time in seconds of the AudioContext.\n\t */\n\tget sampleRate(): number {\n\t\treturn this._context.sampleRate;\n\t}\n\n\t/**\n\t * The listener\n\t */\n\tget listener(): Listener {\n\t\tthis.initialize();\n\t\treturn this._listener;\n\t}\n\tset listener(l) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The listener cannot be set after initialization.\"\n\t\t);\n\t\tthis._listener = l;\n\t}\n\n\t/**\n\t * There is only one Transport per Context. It is created on initialization.\n\t */\n\tget transport(): Transport {\n\t\tthis.initialize();\n\t\treturn this._transport;\n\t}\n\tset transport(t: Transport) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The transport cannot be set after initialization.\"\n\t\t);\n\t\tthis._transport = t;\n\t}\n\n\t/**\n\t * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n\t */\n\tget draw(): Draw {\n\t\tthis.initialize();\n\t\treturn this._draw;\n\t}\n\tset draw(d) {\n\t\tassert(!this._initialized, \"Draw cannot be set after initialization.\");\n\t\tthis._draw = d;\n\t}\n\n\t/**\n\t * A reference to the Context's destination node.\n\t */\n\tget destination(): Destination {\n\t\tthis.initialize();\n\t\treturn this._destination;\n\t}\n\tset destination(d: Destination) {\n\t\tassert(\n\t\t\t!this._initialized,\n\t\t\t\"The destination cannot be set after initialization.\"\n\t\t);\n\t\tthis._destination = d;\n\t}\n\n\t//--------------------------------------------\n\t// AUDIO WORKLET\n\t//--------------------------------------------\n\n\t/**\n\t * Maps a module name to promise of the addModule method\n\t */\n\tprivate _workletModules: Map<string, Promise<void>> = new Map();\n\n\t/**\n\t * Create an audio worklet node from a name and options. The module\n\t * must first be loaded using [[addAudioWorkletModule]].\n\t */\n\tcreateAudioWorkletNode(\n\t\tname: string,\n\t\toptions?: Partial<AudioWorkletNodeOptions>\n\t): AudioWorkletNode {\n\t\treturn createAudioWorkletNode(this.rawContext, name, options);\n\t}\n\n\t/**\n\t * Add an AudioWorkletProcessor module\n\t * @param url The url of the module\n\t * @param name The name of the module\n\t */\n\tasync addAudioWorkletModule(url: string, name: string): Promise<void> {\n\t\tassert(\n\t\t\tisDefined(this.rawContext.audioWorklet),\n\t\t\t\"AudioWorkletNode is only available in a secure context (https or localhost)\"\n\t\t);\n\t\tif (!this._workletModules.has(name)) {\n\t\t\tthis._workletModules.set(\n\t\t\t\tname,\n\t\t\t\tthis.rawContext.audioWorklet.addModule(url)\n\t\t\t);\n\t\t}\n\t\tawait this._workletModules.get(name);\n\t}\n\n\t/**\n\t * Returns a promise which resolves when all of the worklets have been loaded on this context\n\t */\n\tprotected async workletsAreReady(): Promise<void> {\n\t\tconst promises: Promise<void>[] = [];\n\t\tthis._workletModules.forEach((promise) => promises.push(promise));\n\t\tawait Promise.all(promises);\n\t}\n\n\t//---------------------------\n\t// TICKER\n\t//---------------------------\n\n\t/**\n\t * How often the interval callback is invoked.\n\t * This number corresponds to how responsive the scheduling\n\t * can be. context.updateInterval + context.lookAhead gives you the\n\t * total latency between scheduling an event and hearing it.\n\t */\n\tget updateInterval(): Seconds {\n\t\treturn this._ticker.updateInterval;\n\t}\n\tset updateInterval(interval: Seconds) {\n\t\tthis._ticker.updateInterval = interval;\n\t}\n\n\t/**\n\t * What the source of the clock is, either \"worker\" (default),\n\t * \"timeout\", or \"offline\" (none).\n\t */\n\tget clockSource(): TickerClockSource {\n\t\treturn this._ticker.type;\n\t}\n\tset clockSource(type: TickerClockSource) {\n\t\tthis._ticker.type = type;\n\t}\n\n\t/**\n\t * The type of playback, which affects tradeoffs between audio\n\t * output latency and responsiveness.\n\t * In addition to setting the value in seconds, the latencyHint also\n\t * accepts the strings \"interactive\" (prioritizes low latency),\n\t * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t * latency and performance).\n\t * @example\n\t * // prioritize sustained playback\n\t * const context = new Tone.Context({ latencyHint: \"playback\" });\n\t * // set this context as the global Context\n\t * Tone.setContext(context);\n\t * // the global context is gettable with Tone.getContext()\n\t * console.log(Tone.getContext().latencyHint);\n\t */\n\tget latencyHint(): ContextLatencyHint | Seconds {\n\t\treturn this._latencyHint;\n\t}\n\n\t/**\n\t * Update the lookAhead and updateInterval based on the latencyHint\n\t */\n\tprivate _setLatencyHint(hint: ContextLatencyHint | Seconds): void {\n\t\tlet lookAheadValue = 0;\n\t\tthis._latencyHint = hint;\n\t\tif (isString(hint)) {\n\t\t\tswitch (hint) {\n\t\t\t\tcase \"interactive\":\n\t\t\t\t\tlookAheadValue = 0.1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"playback\":\n\t\t\t\t\tlookAheadValue = 0.5;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"balanced\":\n\t\t\t\t\tlookAheadValue = 0.25;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.lookAhead = lookAheadValue;\n\t\tthis.updateInterval = lookAheadValue / 2;\n\t}\n\n\t/**\n\t * The unwrapped AudioContext or OfflineAudioContext\n\t */\n\tget rawContext(): AnyAudioContext {\n\t\treturn this._context;\n\t}\n\n\t/**\n\t * The current audio context time plus a short [[lookAhead]].\n\t */\n\tnow(): Seconds {\n\t\treturn this._context.currentTime + this.lookAhead;\n\t}\n\n\t/**\n\t * The current audio context time without the [[lookAhead]].\n\t * In most cases it is better to use [[now]] instead of [[immediate]] since\n\t * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,\n\t * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]\n\t * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.\n\t */\n\timmediate(): Seconds {\n\t\treturn this._context.currentTime;\n\t}\n\n\t/**\n\t * Starts the audio context from a suspended state. This is required\n\t * to initially start the AudioContext. See [[Tone.start]]\n\t */\n\tresume(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\treturn this._context.resume();\n\t\t} else {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t}\n\n\t/**\n\t * Close the context. Once closed, the context can no longer be used and\n\t * any AudioNodes created from the context will be silent.\n\t */\n\tasync close(): Promise<void> {\n\t\tif (isAudioContext(this._context)) {\n\t\t\tawait this._context.close();\n\t\t}\n\t\tif (this._initialized) {\n\t\t\tcloseContext(this);\n\t\t}\n\t}\n\n\t/**\n\t * **Internal** Generate a looped buffer at some constant value.\n\t */\n\tgetConstant(val: number): AudioBufferSourceNode {\n\t\tif (this._constants.has(val)) {\n\t\t\treturn this._constants.get(val) as AudioBufferSourceNode;\n\t\t} else {\n\t\t\tconst buffer = this._context.createBuffer(\n\t\t\t\t1,\n\t\t\t\t128,\n\t\t\t\tthis._context.sampleRate\n\t\t\t);\n\t\t\tconst arr = buffer.getChannelData(0);\n\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\tarr[i] = val;\n\t\t\t}\n\t\t\tconst constant = this._context.createBufferSource();\n\t\t\tconstant.channelCount = 1;\n\t\t\tconstant.channelCountMode = \"explicit\";\n\t\t\tconstant.buffer = buffer;\n\t\t\tconstant.loop = true;\n\t\t\tconstant.start(0);\n\t\t\tthis._constants.set(val, constant);\n\t\t\treturn constant;\n\t\t}\n\t}\n\n\t/**\n\t * Clean up. Also closes the audio context.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._ticker.dispose();\n\t\tthis._timeouts.dispose();\n\t\tObject.keys(this._constants).map((val) =>\n\t\t\tthis._constants[val].disconnect()\n\t\t);\n\t\treturn this;\n\t}\n\n\t//---------------------------\n\t// TIMEOUTS\n\t//---------------------------\n\n\t/**\n\t * The private loop which keeps track of the context scheduled timeouts\n\t * Is invoked from the clock source\n\t */\n\tprivate _timeoutLoop(): void {\n\t\tconst now = this.now();\n\t\tlet firstEvent = this._timeouts.peek();\n\t\twhile (this._timeouts.length && firstEvent && firstEvent.time <= now) {\n\t\t\t// invoke the callback\n\t\t\tfirstEvent.callback();\n\t\t\t// shift the first event off\n\t\t\tthis._timeouts.shift();\n\t\t\t// get the next one\n\t\t\tfirstEvent = this._timeouts.peek();\n\t\t}\n\t}\n\n\t/**\n\t * A setTimeout which is guaranteed by the clock source.\n\t * Also runs in the offline context.\n\t * @param  fn       The callback to invoke\n\t * @param  timeout  The timeout in seconds\n\t * @returns ID to use when invoking Context.clearTimeout\n\t */\n\tsetTimeout(fn: (...args: any[]) => void, timeout: Seconds): number {\n\t\tthis._timeoutIds++;\n\t\tconst now = this.now();\n\t\tthis._timeouts.add({\n\t\t\tcallback: fn,\n\t\t\tid: this._timeoutIds,\n\t\t\ttime: now + timeout,\n\t\t});\n\t\treturn this._timeoutIds;\n\t}\n\n\t/**\n\t * Clears a previously scheduled timeout with Tone.context.setTimeout\n\t * @param  id  The ID returned from setTimeout\n\t */\n\tclearTimeout(id: number): this {\n\t\tthis._timeouts.forEach((event) => {\n\t\t\tif (event.id === id) {\n\t\t\t\tthis._timeouts.remove(event);\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Clear the function scheduled by [[setInterval]]\n\t */\n\tclearInterval(id: number): this {\n\t\treturn this.clearTimeout(id);\n\t}\n\n\t/**\n\t * Adds a repeating event to the context's callback clock\n\t */\n\tsetInterval(fn: (...args: any[]) => void, interval: Seconds): number {\n\t\tconst id = ++this._timeoutIds;\n\t\tconst intervalFn = () => {\n\t\t\tconst now = this.now();\n\t\t\tthis._timeouts.add({\n\t\t\t\tcallback: () => {\n\t\t\t\t\t// invoke the callback\n\t\t\t\t\tfn();\n\t\t\t\t\t// invoke the event to repeat it\n\t\t\t\t\tintervalFn();\n\t\t\t\t},\n\t\t\t\tid,\n\t\t\t\ttime: now + interval,\n\t\t\t});\n\t\t};\n\t\t// kick it off\n\t\tintervalFn();\n\t\treturn id;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}