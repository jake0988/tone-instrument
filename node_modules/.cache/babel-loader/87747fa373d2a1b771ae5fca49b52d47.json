{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * const scale = new Tone.Scale(50, 100);\n * const signal = new Tone.Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\n\nexport class Scale extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n    this.name = \"Scale\";\n    const options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n    this._mult = this.input = new Multiply({\n      context: this.context,\n      value: options.max - options.min\n    });\n    this._add = this.output = new Add({\n      context: this.context,\n      value: options.min\n    });\n    this._min = options.min;\n    this._max = options.max;\n    this.input.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      max: 1,\n      min: 0\n    });\n  }\n  /**\n   * The minimum output value. This number is output when the value input value is 0.\n   */\n\n\n  get min() {\n    return this._min;\n  }\n\n  set min(min) {\n    this._min = min;\n\n    this._setRange();\n  }\n  /**\n   * The maximum output value. This number is output when the value input value is 1.\n   */\n\n\n  get max() {\n    return this._max;\n  }\n\n  set max(max) {\n    this._max = max;\n\n    this._setRange();\n  }\n  /**\n   * set the values\n   */\n\n\n  _setRange() {\n    this._add.value = this._min;\n    this._mult.value = this._max - this._min;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._add.dispose();\n\n    this._mult.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,oBAAT,QAAqC,uBAArC;AACA,SAASC,GAAT,QAAoB,OAApB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAOA;;;;;;;;;;;;AAWA,OAAM,MAAOC,KAAP,SAAkED,cAAlE,CAAyF;EAiC9FE;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcP,oBAAoB,CAACI,KAAK,CAACI,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,KAAD,EAAQ,KAAR,CAAjC,CAAlC,CAAN;IAhCQ,YAAe,OAAf;IAiCR,MAAMC,OAAO,GAAGV,oBAAoB,CAACI,KAAK,CAACI,WAAN,EAAD,EAAsBC,SAAtB,EAAiC,CAAC,KAAD,EAAQ,KAAR,CAAjC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,KAAL,GAAa,IAAIV,QAAJ,CAAa;MACtCW,OAAO,EAAE,KAAKA,OADwB;MAEtCC,KAAK,EAAEJ,OAAO,CAACK,GAAR,GAAcL,OAAO,CAACM;IAFS,CAAb,CAA1B;IAKA,KAAKC,IAAL,GAAY,KAAKC,MAAL,GAAc,IAAIjB,GAAJ,CAAQ;MACjCY,OAAO,EAAE,KAAKA,OADmB;MAEjCC,KAAK,EAAEJ,OAAO,CAACM;IAFkB,CAAR,CAA1B;IAKA,KAAKG,IAAL,GAAYT,OAAO,CAACM,GAApB;IACA,KAAKI,IAAL,GAAYV,OAAO,CAACK,GAApB;IAEA,KAAKH,KAAL,CAAWS,OAAX,CAAmB,KAAKH,MAAxB;EACA;;EAEiB,OAAXV,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcJ,cAAc,CAACK,WAAf,EAAd,EAA4C;MAClDO,GAAG,EAAE,CAD6C;MAElDC,GAAG,EAAE;IAF6C,CAA5C,CAAP;EAIA;EAED;;;;;EAGO,IAAHA,GAAG;IACN,OAAO,KAAKG,IAAZ;EACA;;EACM,IAAHH,GAAG,CAACA,GAAD,EAAI;IACV,KAAKG,IAAL,GAAYH,GAAZ;;IACA,KAAKM,SAAL;EACA;EAED;;;;;EAGO,IAAHP,GAAG;IACN,OAAO,KAAKK,IAAZ;EACA;;EACM,IAAHL,GAAG,CAACA,GAAD,EAAI;IACV,KAAKK,IAAL,GAAYL,GAAZ;;IACA,KAAKO,SAAL;EACA;EAED;;;;;EAGQA,SAAS;IAChB,KAAKL,IAAL,CAAUH,KAAV,GAAkB,KAAKK,IAAvB;IACA,KAAKR,KAAL,CAAWG,KAAX,GAAmB,KAAKM,IAAL,GAAY,KAAKD,IAApC;EACA;;EAEDI,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKN,IAAL,CAAUM,OAAV;;IACA,KAAKZ,KAAL,CAAWY,OAAX;;IACA,OAAO,IAAP;EACA;;AA/F6F","names":["optionsFromArguments","Add","Multiply","SignalOperator","Scale","constructor","Object","assign","getDefaults","arguments","options","_mult","input","context","value","max","min","_add","output","_min","_max","connect","_setRange","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/Scale.ts"],"sourcesContent":["import { InputNode, OutputNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Add } from \"./Add\";\nimport { Multiply } from \"./Multiply\";\nimport { SignalOperator } from \"./SignalOperator\";\n\nexport interface ScaleOptions extends ToneAudioNodeOptions {\n\tmin: number;\n\tmax: number;\n}\n\n/**\n * Performs a linear scaling on an input signal.\n * Scales a NormalRange input to between\n * outputMin and outputMax.\n *\n * @example\n * const scale = new Tone.Scale(50, 100);\n * const signal = new Tone.Signal(0.5).connect(scale);\n * // the output of scale equals 75\n * @category Signal\n */\nexport class Scale<Options extends ScaleOptions = ScaleOptions> extends SignalOperator<Options> {\n\n\treadonly name: string = \"Scale\";\n\n\tinput: InputNode;\n\toutput: OutputNode;\n\n\t/**\n\t * Hold the multiple\n\t */\n\tprotected _mult: Multiply;\n\n\t/**\n\t * Hold the adder\n\t */\n\tprotected _add: Add;\n\n\t/**\n\t * Private reference to the min value\n\t */\n\tprivate _min: number;\n\n\t/**\n\t * Private reference to the max value\n\t */\n\tprivate _max: number;\n\n\t/**\n\t * @param min The output value when the input is 0.\n\t * @param max The output value when the input is 1.\n\t */\n\tconstructor(min?: number, max?: number);\n\tconstructor(options?: Partial<ScaleOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"])));\n\t\tconst options = optionsFromArguments(Scale.getDefaults(), arguments, [\"min\", \"max\"]);\n\n\t\tthis._mult = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.max - options.min,\n\t\t});\n\n\t\tthis._add = this.output = new Add({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.min,\n\t\t});\n\n\t\tthis._min = options.min;\n\t\tthis._max = options.max;\n\n\t\tthis.input.connect(this.output);\n\t}\n\n\tstatic getDefaults(): ScaleOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tmax: 1,\n\t\t\tmin: 0,\n\t\t});\n\t}\n\n\t/**\n\t * The minimum output value. This number is output when the value input value is 0.\n\t */\n\tget min(): number {\n\t\treturn this._min;\n\t}\n\tset min(min) {\n\t\tthis._min = min;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * The maximum output value. This number is output when the value input value is 1.\n\t */\n\tget max(): number {\n\t\treturn this._max;\n\t}\n\tset max(max) {\n\t\tthis._max = max;\n\t\tthis._setRange();\n\t}\n\n\t/**\n\t * set the values\n\t */\n\tprivate _setRange(): void {\n\t\tthis._add.value = this._min;\n\t\tthis._mult.value = this._max - this._min;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._add.dispose();\n\t\tthis._mult.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}