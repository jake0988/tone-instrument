{"ast":null,"code":"import { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth } from \"./ModulationSynth\";\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n *\n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth {\n  constructor() {\n    super(optionsFromArguments(FMSynth.getDefaults(), arguments));\n    this.name = \"FMSynth\";\n    const options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n    this.modulationIndex = new Multiply({\n      context: this.context,\n      value: options.modulationIndex\n    }); // control the two voices frequency\n\n    this.frequency.connect(this._carrier.frequency);\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n    this.frequency.chain(this.modulationIndex, this._modulationNode);\n    this.detune.fan(this._carrier.detune, this._modulator.detune);\n\n    this._modulator.connect(this._modulationNode.gain);\n\n    this._modulationNode.connect(this._carrier.frequency);\n\n    this._carrier.connect(this.output);\n  }\n\n  static getDefaults() {\n    return Object.assign(ModulationSynth.getDefaults(), {\n      modulationIndex: 10\n    });\n  }\n\n  dispose() {\n    super.dispose();\n    this.modulationIndex.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,oBAAT,QAAqC,uBAArC;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,eAAT,QAAwD,mBAAxD;AAMA;;;;;;;;;;;;;AAaA,OAAM,MAAOC,OAAP,SAAuBD,eAAvB,CAAsD;EAW3DE;IACC,MAAMJ,oBAAoB,CAACG,OAAO,CAACE,WAAR,EAAD,EAAwBC,SAAxB,CAA1B;IAXQ,YAAe,SAAf;IAYR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,OAAO,CAACE,WAAR,EAAD,EAAwBC,SAAxB,CAApC;IAEA,KAAKE,eAAL,GAAuB,IAAIP,QAAJ,CAAa;MACnCQ,OAAO,EAAE,KAAKA,OADqB;MAEnCC,KAAK,EAAEH,OAAO,CAACC;IAFoB,CAAb,CAAvB,CAJD,CASC;;IACA,KAAKG,SAAL,CAAeC,OAAf,CAAuB,KAAKC,QAAL,CAAcF,SAArC;IACA,KAAKA,SAAL,CAAeG,KAAf,CAAqB,KAAKC,WAA1B,EAAuC,KAAKC,UAAL,CAAgBL,SAAvD;IACA,KAAKA,SAAL,CAAeG,KAAf,CAAqB,KAAKN,eAA1B,EAA2C,KAAKS,eAAhD;IACA,KAAKC,MAAL,CAAYC,GAAZ,CAAgB,KAAKN,QAAL,CAAcK,MAA9B,EAAsC,KAAKF,UAAL,CAAgBE,MAAtD;;IACA,KAAKF,UAAL,CAAgBJ,OAAhB,CAAwB,KAAKK,eAAL,CAAqBG,IAA7C;;IACA,KAAKH,eAAL,CAAqBL,OAArB,CAA6B,KAAKC,QAAL,CAAcF,SAA3C;;IACA,KAAKE,QAAL,CAAcD,OAAd,CAAsB,KAAKS,MAA3B;EACA;;EAEiB,OAAXhB,WAAW;IACjB,OAAOiB,MAAM,CAACC,MAAP,CAAcrB,eAAe,CAACG,WAAhB,EAAd,EAA6C;MACnDG,eAAe,EAAE;IADkC,CAA7C,CAAP;EAGA;;EAEDgB,OAAO;IACN,MAAMA,OAAN;IACA,KAAKhB,eAAL,CAAqBgB,OAArB;IACA,OAAO,IAAP;EACA;;AAxC0D","names":["optionsFromArguments","Multiply","ModulationSynth","FMSynth","constructor","getDefaults","arguments","options","modulationIndex","context","value","frequency","connect","_carrier","chain","harmonicity","_modulator","_modulationNode","detune","fan","gain","output","Object","assign","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/instrument/FMSynth.ts"],"sourcesContent":["import { Positive } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { RecursivePartial } from \"../core/util/Interface\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { ModulationSynth, ModulationSynthOptions } from \"./ModulationSynth\";\n\nexport interface FMSynthOptions extends ModulationSynthOptions {\n\tmodulationIndex: Positive;\n}\n\n/**\n * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n * the frequency of a second Tone.Synth. A lot of spectral content\n * can be explored using the modulationIndex parameter. Read more about\n * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n *\n * @example\n * const fmSynth = new Tone.FMSynth().toDestination();\n * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n * \n * @category Instrument\n */\n\nexport class FMSynth extends ModulationSynth<FMSynthOptions> {\n\treadonly name: string = \"FMSynth\";\n\n\t/**\n\t * The modulation index which essentially the depth or amount of the modulation. It is the\n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t * modulating signal (ma) -- as in ma/mf.\n\t */\n\treadonly modulationIndex: Multiply;\n\n\tconstructor(options?: RecursivePartial<FMSynthOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(FMSynth.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(FMSynth.getDefaults(), arguments);\n\n\t\tthis.modulationIndex = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.modulationIndex,\n\t\t});\n\n\t\t// control the two voices frequency\n\t\tthis.frequency.connect(this._carrier.frequency);\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis.frequency.chain(this.modulationIndex, this._modulationNode);\n\t\tthis.detune.fan(this._carrier.detune, this._modulator.detune);\n\t\tthis._modulator.connect(this._modulationNode.gain);\n\t\tthis._modulationNode.connect(this._carrier.frequency);\n\t\tthis._carrier.connect(this.output);\n\t}\n\n\tstatic getDefaults(): FMSynthOptions {\n\t\treturn Object.assign(ModulationSynth.getDefaults(), {\n\t\t\tmodulationIndex: 10,\n\t\t});\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.modulationIndex.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}