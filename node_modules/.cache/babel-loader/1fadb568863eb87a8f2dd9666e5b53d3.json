{"ast":null,"code":"import { Signal } from \"../../signal/Signal\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\n\nexport class TickSignal extends Signal {\n  constructor() {\n    super(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n    this.name = \"TickSignal\";\n    const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n    this.input = this._param = new TickParam({\n      context: this.context,\n      convert: options.convert,\n      multiplier: options.multiplier,\n      param: this._constantSource.offset,\n      units: options.units,\n      value: options.value\n    });\n  }\n\n  static getDefaults() {\n    return Object.assign(Signal.getDefaults(), {\n      multiplier: 1,\n      units: \"hertz\",\n      value: 1\n    });\n  }\n\n  ticksToTime(ticks, when) {\n    return this._param.ticksToTime(ticks, when);\n  }\n\n  timeToTicks(duration, when) {\n    return this._param.timeToTicks(duration, when);\n  }\n\n  getTimeOfTick(tick) {\n    return this._param.getTimeOfTick(tick);\n  }\n\n  getDurationOfTicks(ticks, time) {\n    return this._param.getDurationOfTicks(ticks, time);\n  }\n\n  getTicksAtTime(time) {\n    return this._param.getTicksAtTime(time);\n  }\n  /**\n   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n   */\n\n\n  get multiplier() {\n    return this._param.multiplier;\n  }\n\n  set multiplier(m) {\n    this._param.multiplier = m;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._param.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAsC,qBAAtC;AAGA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAOA;;;;;;;;;;AASA,OAAM,MAAOC,UAAP,SAA4DH,MAA5D,CAA4E;EAejFI;IAEC,MAAMH,oBAAoB,CAACE,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,OAAD,CAAtC,CAA1B;IAfQ,YAAe,YAAf;IAgBR,MAAMC,OAAO,GAAGN,oBAAoB,CAACE,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,OAAD,CAAtC,CAApC;IAEA,KAAKE,KAAL,GAAa,KAAKC,MAAL,GAAc,IAAIP,SAAJ,CAAc;MACxCQ,OAAO,EAAE,KAAKA,OAD0B;MAExCC,OAAO,EAAEJ,OAAO,CAACI,OAFuB;MAGxCC,UAAU,EAAEL,OAAO,CAACK,UAHoB;MAIxCC,KAAK,EAAE,KAAKC,eAAL,CAAqBC,MAJY;MAKxCC,KAAK,EAAET,OAAO,CAACS,KALyB;MAMxCC,KAAK,EAAEV,OAAO,CAACU;IANyB,CAAd,CAA3B;EAQA;;EAEiB,OAAXZ,WAAW;IACjB,OAAOa,MAAM,CAACC,MAAP,CAAcnB,MAAM,CAACK,WAAP,EAAd,EAAoC;MAC1CO,UAAU,EAAE,CAD8B;MAE1CI,KAAK,EAAE,OAFmC;MAG1CC,KAAK,EAAE;IAHmC,CAApC,CAAP;EAKA;;EAEDG,WAAW,CAACC,KAAD,EAAeC,IAAf,EAAyB;IACnC,OAAO,KAAKb,MAAL,CAAYW,WAAZ,CAAwBC,KAAxB,EAA+BC,IAA/B,CAAP;EACA;;EAEDC,WAAW,CAACC,QAAD,EAAiBF,IAAjB,EAA2B;IACrC,OAAO,KAAKb,MAAL,CAAYc,WAAZ,CAAwBC,QAAxB,EAAkCF,IAAlC,CAAP;EACA;;EAEDG,aAAa,CAACC,IAAD,EAAY;IACxB,OAAO,KAAKjB,MAAL,CAAYgB,aAAZ,CAA0BC,IAA1B,CAAP;EACA;;EAEDC,kBAAkB,CAACN,KAAD,EAAeO,IAAf,EAAyB;IAC1C,OAAO,KAAKnB,MAAL,CAAYkB,kBAAZ,CAA+BN,KAA/B,EAAsCO,IAAtC,CAAP;EACA;;EAEDC,cAAc,CAACD,IAAD,EAAW;IACxB,OAAO,KAAKnB,MAAL,CAAYoB,cAAZ,CAA2BD,IAA3B,CAAP;EACA;EAED;;;;;EAGc,IAAVhB,UAAU;IACb,OAAO,KAAKH,MAAL,CAAYG,UAAnB;EACA;;EACa,IAAVA,UAAU,CAACkB,CAAD,EAAU;IACvB,KAAKrB,MAAL,CAAYG,UAAZ,GAAyBkB,CAAzB;EACA;;EAEDC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKtB,MAAL,CAAYsB,OAAZ;;IACA,OAAO,IAAP;EACA;;AAxEgF","names":["Signal","optionsFromArguments","TickParam","TickSignal","constructor","getDefaults","arguments","options","input","_param","context","convert","multiplier","param","_constantSource","offset","units","value","Object","assign","ticksToTime","ticks","when","timeToTicks","duration","getTimeOfTick","tick","getDurationOfTicks","time","getTicksAtTime","m","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/clock/TickSignal.ts"],"sourcesContent":["import { Signal, SignalOptions } from \"../../signal/Signal\";\nimport { InputNode } from \"../context/ToneAudioNode\";\nimport { Seconds, Ticks, Time, UnitMap, UnitName } from \"../type/Units\";\nimport { optionsFromArguments } from \"../util/Defaults\";\nimport { TickParam } from \"./TickParam\";\n\ninterface TickSignalOptions<TypeName extends UnitName> extends SignalOptions<TypeName> {\n\tvalue: UnitMap[TypeName];\n\tmultiplier: number;\n}\n\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal<TypeName extends \"hertz\" | \"bpm\"> extends Signal<TypeName> {\n\n\treadonly name: string = \"TickSignal\";\n\n\t/**\n\t * The param which controls the output signal value\n\t */\n\tprotected _param: TickParam<TypeName>;\n\treadonly input: InputNode;\n\n\t/**\n\t * @param value The initial value of the signal\n\t */\n\tconstructor(value?: UnitMap[TypeName]);\n\tconstructor(options: Partial<TickSignalOptions<TypeName>>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]));\n\t\tconst options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis.input = this._param = new TickParam({\n\t\t\tcontext: this.context,\n\t\t\tconvert: options.convert,\n\t\t\tmultiplier: options.multiplier,\n\t\t\tparam: this._constantSource.offset,\n\t\t\tunits: options.units,\n\t\t\tvalue: options.value,\n\t\t});\n\t}\n\n\tstatic getDefaults(): TickSignalOptions<any> {\n\t\treturn Object.assign(Signal.getDefaults(), {\n\t\t\tmultiplier: 1,\n\t\t\tunits: \"hertz\",\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\tticksToTime(ticks: Ticks, when: Time): Seconds {\n\t\treturn this._param.ticksToTime(ticks, when);\n\t}\n\n\ttimeToTicks(duration: Time, when: Time): Ticks {\n\t\treturn this._param.timeToTicks(duration, when);\n\t}\n\n\tgetTimeOfTick(tick: Ticks): Seconds {\n\t\treturn this._param.getTimeOfTick(tick);\n\t}\n\n\tgetDurationOfTicks(ticks: Ticks, time: Time): Seconds {\n\t\treturn this._param.getDurationOfTicks(ticks, time);\n\t}\n\n\tgetTicksAtTime(time: Time): Ticks {\n\t\treturn this._param.getTicksAtTime(time);\n\t}\n\n\t/**\n\t * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n\t */\n\tget multiplier(): number {\n\t\treturn this._param.multiplier;\n\t}\n\tset multiplier(m: number) {\n\t\tthis._param.multiplier = m;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._param.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}