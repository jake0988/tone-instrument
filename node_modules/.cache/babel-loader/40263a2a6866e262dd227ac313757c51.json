{"ast":null,"code":"import { assertRange } from \"./Debug\";\n/**\n * Assert that the number is in the given range.\n */\n\nexport function range(min) {\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(newValue, min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\n\nexport function timeRange(min) {\n  let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const valueMap = new WeakMap();\n  return function (target, propertyKey) {\n    Reflect.defineProperty(target, propertyKey, {\n      configurable: true,\n      enumerable: true,\n      get: function () {\n        return valueMap.get(this);\n      },\n      set: function (newValue) {\n        assertRange(this.toSeconds(newValue), min, max);\n        valueMap.set(this, newValue);\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AAGA;;;;AAGA,OAAM,SAAUC,KAAV,CAAgBC,GAAhB,EAA2C;EAAA,IAAdC,GAAc,uEAARC,QAAQ;EAChD,MAAMC,QAAQ,GAAyB,IAAIC,OAAJ,EAAvC;EACA,OAAO,UAASC,MAAT,EAAsBC,WAAtB,EAAkD;IACxDC,OAAO,CAACC,cAAR,CACCH,MADD,EAECC,WAFD,EAGC;MACCG,YAAY,EAAE,IADf;MAECC,UAAU,EAAE,IAFb;MAGCC,GAAG,EAAE;QACJ,OAAOR,QAAQ,CAACQ,GAAT,CAAa,IAAb,CAAP;MACA,CALF;MAMCC,GAAG,EAAE,UAASC,QAAT,EAAyB;QAC7Bf,WAAW,CAACe,QAAD,EAAWb,GAAX,EAAgBC,GAAhB,CAAX;QACAE,QAAQ,CAACS,GAAT,CAAa,IAAb,EAAmBC,QAAnB;MACA;IATF,CAHD;EAeA,CAhBD;AAiBA;AAED;;;;;AAIA,OAAM,SAAUC,SAAV,CAAoBd,GAApB,EAA+C;EAAA,IAAdC,GAAc,uEAARC,QAAQ;EACpD,MAAMC,QAAQ,GAAuB,IAAIC,OAAJ,EAArC;EACA,OAAO,UAASC,MAAT,EAAsBC,WAAtB,EAAyC;IAC/CC,OAAO,CAACC,cAAR,CACCH,MADD,EAECC,WAFD,EAGC;MACCG,YAAY,EAAE,IADf;MAECC,UAAU,EAAE,IAFb;MAGCC,GAAG,EAAE;QACJ,OAAOR,QAAQ,CAACQ,GAAT,CAAa,IAAb,CAAP;MACA,CALF;MAMCC,GAAG,EAAE,UAASC,QAAT,EAAuB;QAC3Bf,WAAW,CAAC,KAAKiB,SAAL,CAAeF,QAAf,CAAD,EAA2Bb,GAA3B,EAAgCC,GAAhC,CAAX;QACAE,QAAQ,CAACS,GAAT,CAAa,IAAb,EAAmBC,QAAnB;MACA;IATF,CAHD;EAeA,CAhBD;AAiBA","names":["assertRange","range","min","max","Infinity","valueMap","WeakMap","target","propertyKey","Reflect","defineProperty","configurable","enumerable","get","set","newValue","timeRange","toSeconds"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/util/Decorator.ts"],"sourcesContent":["import { assertRange } from \"./Debug\";\nimport { Time } from \"../type/Units\";\n\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, number> = new WeakMap();\n\treturn function(target: any, propertyKey: string | symbol) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: number) {\n\t\t\t\t\tassertRange(newValue, min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min: number, max = Infinity) {\n\tconst valueMap: WeakMap<any, Time> = new WeakMap();\n\treturn function(target: any, propertyKey: string) {\n\t\tReflect.defineProperty(\n\t\t\ttarget,\n\t\t\tpropertyKey,\n\t\t\t{\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function() {\n\t\t\t\t\treturn valueMap.get(this);\n\t\t\t\t},\n\t\t\t\tset: function(newValue: Time) {\n\t\t\t\t\tassertRange(this.toSeconds(newValue), min, max);\n\t\t\t\t\tvalueMap.set(this, newValue);\n\t\t\t\t}\n\t\t\t},\n\t\t);\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}