{"ast":null,"code":"import { isArray } from \"./TypeCheck\";\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\n\nexport function readOnly(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => readOnly(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      enumerable: true,\n      writable: false\n    });\n  }\n}\n/**\n * Make an attribute writeable. Internal use only.\n */\n\nexport function writable(target, property) {\n  if (isArray(property)) {\n    property.forEach(str => writable(target, str));\n  } else {\n    Object.defineProperty(target, property, {\n      writable: true\n    });\n  }\n}\nexport const noOp = () => {// no operation here!\n};","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAKA;;;;AAGA,OAAM,SAAUC,QAAV,CAAmBC,MAAnB,EAAmCC,QAAnC,EAA8D;EACnE,IAAIH,OAAO,CAACG,QAAD,CAAX,EAAuB;IACtBA,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAAIJ,QAAQ,CAACC,MAAD,EAASG,GAAT,CAAhC;EACA,CAFD,MAEO;IACNC,MAAM,CAACC,cAAP,CAAsBL,MAAtB,EAA8BC,QAA9B,EAAwC;MACvCK,UAAU,EAAE,IAD2B;MAEvCC,QAAQ,EAAE;IAF6B,CAAxC;EAIA;AACD;AAED;;;;AAGA,OAAM,SAAUA,QAAV,CAAmBP,MAAnB,EAAmCC,QAAnC,EAA8D;EACnE,IAAIH,OAAO,CAACG,QAAD,CAAX,EAAuB;IACtBA,QAAQ,CAACC,OAAT,CAAiBC,GAAG,IAAII,QAAQ,CAACP,MAAD,EAASG,GAAT,CAAhC;EACA,CAFD,MAEO;IACNC,MAAM,CAACC,cAAP,CAAsBL,MAAtB,EAA8BC,QAA9B,EAAwC;MACvCM,QAAQ,EAAE;IAD6B,CAAxC;EAGA;AACD;AAED,OAAO,MAAMC,IAAI,GAA4B,MAAK,CACjD;AACA,CAFM","names":["isArray","readOnly","target","property","forEach","str","Object","defineProperty","enumerable","writable","noOp"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/util/Interface.ts"],"sourcesContent":["import { isArray } from \"./TypeCheck\";\n\n// return an interface which excludes certain keys\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => readOnly(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\tenumerable: true,\n\t\t\twritable: false,\n\t\t});\n\t}\n}\n\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target: object, property: string | string[]): void {\n\tif (isArray(property)) {\n\t\tproperty.forEach(str => writable(target, str));\n\t} else {\n\t\tObject.defineProperty(target, property, {\n\t\t\twritable: true,\n\t\t});\n\t}\n}\n\nexport const noOp: (...args: any[]) => any = () => {\n\t// no operation here!\n};\n\n/**\n * Recursive Partial taken from here: https://stackoverflow.com/a/51365037\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?:\n\tT[P] extends Array<infer U> ? Array<RecursivePartial<U>> :\n\t\tT[P] extends object ? RecursivePartial<T[P]> :\n\t\t\tT[P];\n};\n"]},"metadata":{},"sourceType":"module"}