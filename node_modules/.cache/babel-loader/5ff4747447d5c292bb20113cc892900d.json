{"ast":null,"code":"import { readOnly } from \"../../core/util/Interface\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\n\nexport class PanVol extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n    this.name = \"PanVol\";\n    const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n    this._panner = this.input = new Panner({\n      context: this.context,\n      pan: options.pan,\n      channelCount: options.channelCount\n    });\n    this.pan = this._panner.pan;\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume; // connections\n\n    this._panner.connect(this._volume);\n\n    this.mute = options.mute;\n    readOnly(this, [\"pan\", \"volume\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      pan: 0,\n      volume: 0,\n      channelCount: 1\n    });\n  }\n  /**\n   * Mute/unmute the volume\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._panner.dispose();\n\n    this.pan.dispose();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,2BAAzB;AAEA,SAAgCC,aAAhC,QAA2E,kCAA3E;AAEA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,MAAT,QAAuB,UAAvB;AASA;;;;;;;;;AAQA,OAAM,MAAOC,MAAP,SAAsBJ,aAAtB,CAAkD;EAmCvDK;IAEC,MAAMJ,oBAAoB,CAACG,MAAM,CAACE,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAA1B;IAnCQ,YAAe,QAAf;IAoCR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,MAAM,CAACE,WAAP,EAAD,EAAuBC,SAAvB,EAAkC,CAAC,KAAD,EAAQ,QAAR,CAAlC,CAApC;IAEA,KAAKE,OAAL,GAAe,KAAKC,KAAL,GAAa,IAAIR,MAAJ,CAAW;MACtCS,OAAO,EAAE,KAAKA,OADwB;MAEtCC,GAAG,EAAEJ,OAAO,CAACI,GAFyB;MAGtCC,YAAY,EAAEL,OAAO,CAACK;IAHgB,CAAX,CAA5B;IAKA,KAAKD,GAAL,GAAW,KAAKH,OAAL,CAAaG,GAAxB;IACA,KAAKE,OAAL,GAAe,KAAKC,MAAL,GAAc,IAAIZ,MAAJ,CAAW;MACvCQ,OAAO,EAAE,KAAKA,OADyB;MAEvCK,MAAM,EAAER,OAAO,CAACQ;IAFuB,CAAX,CAA7B;IAIA,KAAKA,MAAL,GAAc,KAAKF,OAAL,CAAaE,MAA3B,CAfD,CAiBC;;IACA,KAAKP,OAAL,CAAaQ,OAAb,CAAqB,KAAKH,OAA1B;;IACA,KAAKI,IAAL,GAAYV,OAAO,CAACU,IAApB;IAEAnB,QAAQ,CAAC,IAAD,EAAO,CAAC,KAAD,EAAQ,QAAR,CAAP,CAAR;EACA;;EAEiB,OAAXO,WAAW;IACjB,OAAOa,MAAM,CAACC,MAAP,CAAcpB,aAAa,CAACM,WAAd,EAAd,EAA2C;MACjDY,IAAI,EAAE,KAD2C;MAEjDN,GAAG,EAAE,CAF4C;MAGjDI,MAAM,EAAE,CAHyC;MAIjDH,YAAY,EAAE;IAJmC,CAA3C,CAAP;EAMA;EAED;;;;;EAGQ,IAAJK,IAAI;IACP,OAAO,KAAKJ,OAAL,CAAaI,IAApB;EACA;;EACO,IAAJA,IAAI,CAACA,IAAD,EAAK;IACZ,KAAKJ,OAAL,CAAaI,IAAb,GAAoBA,IAApB;EACA;;EAEDG,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKZ,OAAL,CAAaY,OAAb;;IACA,KAAKT,GAAL,CAASS,OAAT;;IACA,KAAKP,OAAL,CAAaO,OAAb;;IACA,KAAKL,MAAL,CAAYK,OAAZ;IACA,OAAO,IAAP;EACA;;AArFsD","names":["readOnly","ToneAudioNode","optionsFromArguments","Panner","Volume","PanVol","constructor","getDefaults","arguments","options","_panner","input","context","pan","channelCount","_volume","output","volume","connect","mute","Object","assign","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/channel/PanVol.ts"],"sourcesContent":["import { readOnly } from \"../../core/util/Interface\";\nimport { Param } from \"../../core/context/Param\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { AudioRange, Decibels } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Panner } from \"./Panner\";\nimport { Volume } from \"./Volume\";\n\nexport interface PanVolOptions extends ToneAudioNodeOptions {\n\tpan: AudioRange;\n\tvolume: Decibels;\n\tmute: boolean;\n\tchannelCount: number;\n}\n\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode<PanVolOptions> {\n\n\treadonly name: string = \"PanVol\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The panning node\n\t */\n\tprivate _panner: Panner;\n\n\t/**\n\t * The L/R panning control. -1 = hard left, 1 = hard right.\n\t * @min -1\n\t * @max 1\n\t */\n\treadonly pan: Param<\"audioRange\">;\n\n\t/**\n\t * The volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume control in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param pan the initial pan\n\t * @param volume The output volume.\n\t */\n\tconstructor(pan?: AudioRange, volume?: Decibels);\n\tconstructor(options?: Partial<PanVolOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]));\n\t\tconst options = optionsFromArguments(PanVol.getDefaults(), arguments, [\"pan\", \"volume\"]);\n\n\t\tthis._panner = this.input = new Panner({\n\t\t\tcontext: this.context,\n\t\t\tpan: options.pan,\n\t\t\tchannelCount: options.channelCount,\n\t\t});\n\t\tthis.pan = this._panner.pan;\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\n\t\t// connections\n\t\tthis._panner.connect(this._volume);\n\t\tthis.mute = options.mute;\n\n\t\treadOnly(this, [\"pan\", \"volume\"]);\n\t}\n\n\tstatic getDefaults(): PanVolOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tpan: 0,\n\t\t\tvolume: 0,\n\t\t\tchannelCount: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Mute/unmute the volume\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._panner.dispose();\n\t\tthis.pan.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}