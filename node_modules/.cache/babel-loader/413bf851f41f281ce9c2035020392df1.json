{"ast":null,"code":"import { Effect } from \"../effect/Effect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base class for LFO-based effects.\n */\n\nexport class LFOEffect extends Effect {\n  constructor(options) {\n    super(options);\n    this.name = \"LFOEffect\";\n    this._lfo = new LFO({\n      context: this.context,\n      frequency: options.frequency,\n      amplitude: options.depth\n    });\n    this.depth = this._lfo.amplitude;\n    this.frequency = this._lfo.frequency;\n    this.type = options.type;\n    readOnly(this, [\"frequency\", \"depth\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Effect.getDefaults(), {\n      frequency: 1,\n      type: \"sine\",\n      depth: 1\n    });\n  }\n  /**\n   * Start the effect.\n   */\n\n\n  start(time) {\n    this._lfo.start(time);\n\n    return this;\n  }\n  /**\n   * Stop the lfo\n   */\n\n\n  stop(time) {\n    this._lfo.stop(time);\n\n    return this;\n  }\n  /**\n   * Sync the filter to the transport. See [[LFO.sync]]\n   */\n\n\n  sync() {\n    this._lfo.sync();\n\n    return this;\n  }\n  /**\n   * Unsync the filter from the transport.\n   */\n\n\n  unsync() {\n    this._lfo.unsync();\n\n    return this;\n  }\n  /**\n   * The type of the LFO's oscillator: See [[Oscillator.type]]\n   * @example\n   * const autoFilter = new Tone.AutoFilter().start().toDestination();\n   * const noise = new Tone.Noise().start().connect(autoFilter);\n   * autoFilter.type = \"square\";\n   */\n\n\n  get type() {\n    return this._lfo.type;\n  }\n\n  set type(type) {\n    this._lfo.type = type;\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._lfo.dispose();\n\n    this.frequency.dispose();\n    this.depth.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAsC,kBAAtC;AAEA,SAASC,GAAT,QAAoB,0BAApB;AAGA,SAASC,QAAT,QAAyB,wBAAzB;AASA;;;;AAGA,OAAM,MAAgBC,SAAhB,SAAoEH,MAApE,CAAmF;EAoBxFI,YAAYC,OAAZ,EAAqC;IAEpC,MAAMA,OAAN;IApBQ,YAAe,WAAf;IAsBR,KAAKC,IAAL,GAAY,IAAIL,GAAJ,CAAQ;MACnBM,OAAO,EAAE,KAAKA,OADK;MAEnBC,SAAS,EAAEH,OAAO,CAACG,SAFA;MAGnBC,SAAS,EAAEJ,OAAO,CAACK;IAHA,CAAR,CAAZ;IAKA,KAAKA,KAAL,GAAa,KAAKJ,IAAL,CAAUG,SAAvB;IACA,KAAKD,SAAL,GAAiB,KAAKF,IAAL,CAAUE,SAA3B;IAEA,KAAKG,IAAL,GAAYN,OAAO,CAACM,IAApB;IACAT,QAAQ,CAAC,IAAD,EAAO,CAAC,WAAD,EAAc,OAAd,CAAP,CAAR;EACA;;EAEiB,OAAXU,WAAW;IACjB,OAAOC,MAAM,CAACC,MAAP,CAAcd,MAAM,CAACY,WAAP,EAAd,EAAoC;MAC1CJ,SAAS,EAAE,CAD+B;MAE1CG,IAAI,EAAE,MAFoC;MAG1CD,KAAK,EAAE;IAHmC,CAApC,CAAP;EAKA;EAED;;;;;EAGAK,KAAK,CAACC,IAAD,EAAY;IAChB,KAAKV,IAAL,CAAUS,KAAV,CAAgBC,IAAhB;;IACA,OAAO,IAAP;EACA;EAED;;;;;EAGAC,IAAI,CAACD,IAAD,EAAY;IACf,KAAKV,IAAL,CAAUW,IAAV,CAAeD,IAAf;;IACA,OAAO,IAAP;EACA;EAED;;;;;EAGAE,IAAI;IACH,KAAKZ,IAAL,CAAUY,IAAV;;IACA,OAAO,IAAP;EACA;EAED;;;;;EAGAC,MAAM;IACL,KAAKb,IAAL,CAAUa,MAAV;;IACA,OAAO,IAAP;EACA;EAED;;;;;;;;;EAOQ,IAAJR,IAAI;IACP,OAAO,KAAKL,IAAL,CAAUK,IAAjB;EACA;;EACO,IAAJA,IAAI,CAACA,IAAD,EAAK;IACZ,KAAKL,IAAL,CAAUK,IAAV,GAAiBA,IAAjB;EACA;;EAEDS,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKd,IAAL,CAAUc,OAAV;;IACA,KAAKZ,SAAL,CAAeY,OAAf;IACA,KAAKV,KAAL,CAAWU,OAAX;IACA,OAAO,IAAP;EACA;;AAhGuF","names":["Effect","LFO","readOnly","LFOEffect","constructor","options","_lfo","context","frequency","amplitude","depth","type","getDefaults","Object","assign","start","time","stop","sync","unsync","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/LFOEffect.ts"],"sourcesContent":["import { Effect, EffectOptions } from \"../effect/Effect\";\nimport { Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { ToneOscillatorType } from \"../source/oscillator/OscillatorInterface\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Param } from \"../core/context/Param\";\n\nexport interface LFOEffectOptions extends EffectOptions {\n\tfrequency: Frequency;\n\ttype: ToneOscillatorType;\n\tdepth: NormalRange;\n}\n\n/**\n * Base class for LFO-based effects.\n */\nexport abstract class LFOEffect<Options extends LFOEffectOptions> extends Effect<Options> {\n\n\treadonly name: string = \"LFOEffect\";\n\n\t/**\n\t * the lfo which drives the filter cutoff\n\t */\n\tprotected _lfo: LFO;\n\n\t/**\n\t * The range of the filter modulating between the min and max frequency. \n\t * 0 = no modulation. 1 = full modulation.\n\t */\n\treadonly depth: Param<\"normalRange\">;\n\n\t/**\n\t * How fast the filter modulates between min and max. \n\t */\n\treadonly frequency: Signal<\"frequency\">;\n\n\tconstructor(options: LFOEffectOptions) {\n\n\t\tsuper(options);\n\n\t\tthis._lfo = new LFO({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: options.frequency,\n\t\t\tamplitude: options.depth,\n\t\t});\n\t\tthis.depth = this._lfo.amplitude;\n\t\tthis.frequency = this._lfo.frequency;\n\n\t\tthis.type = options.type;\n\t\treadOnly(this, [\"frequency\", \"depth\"]);\n\t}\n\n\tstatic getDefaults(): LFOEffectOptions {\n\t\treturn Object.assign(Effect.getDefaults(), {\n\t\t\tfrequency: 1,\n\t\t\ttype: \"sine\" as ToneOscillatorType,\n\t\t\tdepth: 1,\n\t\t});\n\t}\n\n\t/**\n\t * Start the effect.\n\t */\n\tstart(time?: Time): this {\n\t\tthis._lfo.start(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stop the lfo\n\t */\n\tstop(time?: Time): this {\n\t\tthis._lfo.stop(time);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sync the filter to the transport. See [[LFO.sync]]\n\t */\n\tsync(): this {\n\t\tthis._lfo.sync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsync the filter from the transport.\n\t */\n\tunsync(): this {\n\t\tthis._lfo.unsync();\n\t\treturn this;\n\t}\n\n\t/**\n\t * The type of the LFO's oscillator: See [[Oscillator.type]]\n\t * @example\n\t * const autoFilter = new Tone.AutoFilter().start().toDestination();\n\t * const noise = new Tone.Noise().start().connect(autoFilter);\n\t * autoFilter.type = \"square\";\n\t */\n\tget type() {\n\t\treturn this._lfo.type;\n\t}\n\tset type(type) {\n\t\tthis._lfo.type = type;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._lfo.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.depth.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}