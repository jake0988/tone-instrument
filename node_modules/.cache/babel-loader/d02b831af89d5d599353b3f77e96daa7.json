{"ast":null,"code":"/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertRange(value, gte) {\n  let lte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\n\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n  }\n}\n/**\n * The default logger is the console\n */\n\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\n\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\n\nexport function log() {\n  defaultLogger.log(...arguments);\n}\n/**\n * Warn anything\n */\n\nexport function warn() {\n  defaultLogger.warn(...arguments);\n}","map":{"version":3,"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,MAAV,CAAiBC,SAAjB,EAAqCC,KAArC,EAAkD;EACvD,IAAI,CAACD,SAAL,EAAgB;IACf,MAAM,IAAIE,KAAJ,CAAUD,KAAV,CAAN;EACA;AACD;AAED;;;;AAGA,OAAM,SAAUE,WAAV,CAAsBC,KAAtB,EAAqCC,GAArC,EAAgE;EAAA,IAAdC,GAAc,uEAARC,QAAQ;;EACrE,IAAI,EAAEF,GAAG,IAAID,KAAP,IAAgBA,KAAK,IAAIE,GAA3B,CAAJ,EAAqC;IACpC,MAAM,IAAIE,UAAJ,CAAe,yBAAyBH,GAAG,KAAKC,GAAG,WAAWF,KAAK,EAAnE,CAAN;EACA;AACD;AAED;;;;AAGA,OAAM,SAAUK,oBAAV,CAA+BC,OAA/B,EAAoF;EACzF;EACA,IAAI,CAACA,OAAO,CAACC,SAAT,IAAsBD,OAAO,CAACE,KAAR,KAAkB,SAA5C,EAAuD;IACtDC,IAAI,CAAC,+FAAD,CAAJ;EACA;AACD;AAUD;;;;AAGA,IAAIC,aAAa,GAAWC,OAA5B;AAEA;;;;AAGA,OAAM,SAAUC,SAAV,CAAoBC,MAApB,EAAkC;EACvCH,aAAa,GAAGG,MAAhB;AACA;AAED;;;;AAGA,OAAM,SAAUC,GAAV,GAA4B;EACjCJ,aAAa,CAACI,GAAd,CAAkB,YAAlB;AACA;AAED;;;;AAGA,OAAM,SAAUL,IAAV,GAA6B;EAClCC,aAAa,CAACD,IAAd,CAAmB,YAAnB;AACA","names":["assert","statement","error","Error","assertRange","value","gte","lte","Infinity","RangeError","assertContextRunning","context","isOffline","state","warn","defaultLogger","console","setLogger","logger","log"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/util/Debug.ts"],"sourcesContent":["/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context: import(\"../context/BaseContext\").BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n"]},"metadata":{},"sourceType":"module"}