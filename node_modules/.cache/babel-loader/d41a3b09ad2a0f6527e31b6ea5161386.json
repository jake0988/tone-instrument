{"ast":null,"code":"/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg) {\n  return typeof arg === \"undefined\";\n}\n/**\n * Test if the arg is not undefined\n */\n\nexport function isDefined(arg) {\n  return !isUndef(arg);\n}\n/**\n * Test if the arg is a function\n */\n\nexport function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n/**\n * Test if the argument is a number.\n */\n\nexport function isNumber(arg) {\n  return typeof arg === \"number\";\n}\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\n\nexport function isObject(arg) {\n  return Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object;\n}\n/**\n * Test if the argument is a boolean.\n */\n\nexport function isBoolean(arg) {\n  return typeof arg === \"boolean\";\n}\n/**\n * Test if the argument is an Array\n */\n\nexport function isArray(arg) {\n  return Array.isArray(arg);\n}\n/**\n * Test if the argument is a string.\n */\n\nexport function isString(arg) {\n  return typeof arg === \"string\";\n}\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\n\nexport function isNote(arg) {\n  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}","map":{"version":3,"mappings":"AAEA;;;AAGA,OAAM,SAAUA,OAAV,CAAkBC,GAAlB,EAA0B;EAC/B,OAAO,OAAOA,GAAP,KAAe,WAAtB;AACA;AAED;;;;AAGA,OAAM,SAAUC,SAAV,CAAuBD,GAAvB,EAAyC;EAC9C,OAAO,CAACD,OAAO,CAACC,GAAD,CAAf;AACA;AAED;;;;AAGA,OAAM,SAAUE,UAAV,CAAqBF,GAArB,EAA6B;EAClC,OAAO,OAAOA,GAAP,KAAe,UAAtB;AACA;AAED;;;;AAGA,OAAM,SAAUG,QAAV,CAAmBH,GAAnB,EAA2B;EAChC,OAAQ,OAAOA,GAAP,KAAe,QAAvB;AACA;AAED;;;;AAGA,OAAM,SAAUI,QAAV,CAAmBJ,GAAnB,EAA2B;EAChC,OAAQK,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BR,GAA/B,MAAwC,iBAAxC,IAA6DA,GAAG,CAACS,WAAJ,KAAoBJ,MAAzF;AACA;AAED;;;;AAGA,OAAM,SAAUK,SAAV,CAAoBV,GAApB,EAA4B;EACjC,OAAQ,OAAOA,GAAP,KAAe,SAAvB;AACA;AAED;;;;AAGA,OAAM,SAAUW,OAAV,CAAkBX,GAAlB,EAA0B;EAC/B,OAAQY,KAAK,CAACD,OAAN,CAAcX,GAAd,CAAR;AACA;AAED;;;;AAGA,OAAM,SAAUa,QAAV,CAAmBb,GAAnB,EAA2B;EAChC,OAAQ,OAAOA,GAAP,KAAe,QAAvB;AACA;AAED;;;;;AAIA,OAAM,SAAUc,MAAV,CAAiBd,GAAjB,EAAyB;EAC9B,OAAOa,QAAQ,CAACb,GAAD,CAAR,IAAiB,sCAAsCe,IAAtC,CAA2Cf,GAA3C,CAAxB;AACA","names":["isUndef","arg","isDefined","isFunction","isNumber","isObject","Object","prototype","toString","call","constructor","isBoolean","isArray","Array","isString","isNote","test"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/util/TypeCheck.ts"],"sourcesContent":["import { Note } from \"../type/Units\";\n\n/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg: any): arg is undefined {\n\treturn typeof arg === \"undefined\";\n}\n\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined<T>(arg: T | undefined): arg is T {\n\treturn !isUndef(arg);\n}\n\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg: any): arg is (a: any) => any {\n\treturn typeof arg === \"function\";\n}\n\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg: any): arg is number {\n\treturn (typeof arg === \"number\");\n}\n\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg: any): arg is object {\n\treturn (Object.prototype.toString.call(arg) === \"[object Object]\" && arg.constructor === Object);\n}\n\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg: any): arg is boolean {\n\treturn (typeof arg === \"boolean\");\n}\n\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg: any): arg is any[] {\n\treturn (Array.isArray(arg));\n}\n\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg: any): arg is string {\n\treturn (typeof arg === \"string\");\n}\n\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg: any): arg is Note {\n\treturn isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n"]},"metadata":{},"sourceType":"module"}