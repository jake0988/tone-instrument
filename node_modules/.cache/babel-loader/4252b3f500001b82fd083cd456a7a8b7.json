{"ast":null,"code":"import { version } from \"../version\";\nimport { hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\n\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\n\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\n\nexport function getContext() {\n  if (globalContext === dummyContext && hasAudioContext) {\n    setContext(new Context());\n  }\n\n  return globalContext;\n}\n/**\n * Set the default audio context\n * @category Core\n */\n\nexport function setContext(context) {\n  if (isAudioContext(context)) {\n    globalContext = new Context(context);\n  } else if (isOfflineAudioContext(context)) {\n    globalContext = new OfflineContext(context);\n  } else {\n    globalContext = context;\n  }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\n\nexport function start() {\n  return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\n\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n  let prefix = \"v\";\n\n  if (version === \"dev\") {\n    prefix = \"\";\n  }\n\n  const printString = ` * Tone.js ${prefix}${version} * `; // eslint-disable-next-line no-console\n\n  console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAA0BC,eAA1B,EAA2CC,SAA3C,QAA4D,wBAA5D;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,cAAT,EAAyBC,qBAAzB,QAAsD,0BAAtD;AAEA;;;;AAGA,MAAMC,YAAY,GAAG,IAAIJ,YAAJ,EAArB;AAEA;;;;;AAIA,IAAIK,aAAa,GAAgBD,YAAjC;AAEA;;;;;AAIA,OAAM,SAAUE,UAAV,GAAoB;EACzB,IAAID,aAAa,KAAKD,YAAlB,IAAkCP,eAAtC,EAAuD;IACtDU,UAAU,CAAC,IAAIR,OAAJ,EAAD,CAAV;EACA;;EACD,OAAOM,aAAP;AACA;AAED;;;;;AAIA,OAAM,SAAUE,UAAV,CAAqBC,OAArB,EAA2D;EAChE,IAAIN,cAAc,CAACM,OAAD,CAAlB,EAA6B;IAC5BH,aAAa,GAAG,IAAIN,OAAJ,CAAYS,OAAZ,CAAhB;EACA,CAFD,MAEO,IAAIL,qBAAqB,CAACK,OAAD,CAAzB,EAAoC;IAC1CH,aAAa,GAAG,IAAIJ,cAAJ,CAAmBO,OAAnB,CAAhB;EACA,CAFM,MAEA;IACNH,aAAa,GAAGG,OAAhB;EACA;AACD;AAED;;;;;;;;;;;;;;AAaA,OAAM,SAAUC,KAAV,GAAe;EACpB,OAAOJ,aAAa,CAACK,MAAd,EAAP;AACA;AAED;;;;AAGA,IAAIZ,SAAS,IAAI,CAACA,SAAS,CAACa,oBAA5B,EAAkD;EACjD,IAAIC,MAAM,GAAG,GAAb;;EACA,IAAIhB,OAAO,KAAK,KAAhB,EAAuB;IACtBgB,MAAM,GAAG,EAAT;EACA;;EACD,MAAMC,WAAW,GAAG,cAAcD,MAAM,GAAGhB,OAAO,KAAlD,CALiD,CAMjD;;EACAkB,OAAO,CAACC,GAAR,CAAY,KAAKF,WAAW,EAA5B,EAAgC,+BAAhC;AACA","names":["version","hasAudioContext","theWindow","Context","DummyContext","OfflineContext","isAudioContext","isOfflineAudioContext","dummyContext","globalContext","getContext","setContext","context","start","resume","TONE_SILENCE_LOGGING","prefix","printString","console","log"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/Global.ts"],"sourcesContent":["import { version } from \"../version\";\nimport { AnyAudioContext, hasAudioContext, theWindow } from \"./context/AudioContext\";\nimport { Context } from \"./context/Context\";\nimport { DummyContext } from \"./context/DummyContext\";\nimport { BaseContext } from \"./context/BaseContext\";\nimport { OfflineContext } from \"./context/OfflineContext\";\nimport { isAudioContext, isOfflineAudioContext } from \"./util/AdvancedTypeCheck\";\n\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext: BaseContext = dummyContext;\n\n/**\n * Returns the default system-wide [[Context]]\n * @category Core\n */\nexport function getContext(): BaseContext {\n\tif (globalContext === dummyContext && hasAudioContext) {\n\t\tsetContext(new Context());\n\t}\n\treturn globalContext;\n}\n\n/**\n * Set the default audio context\n * @category Core\n */\nexport function setContext(context: BaseContext | AnyAudioContext): void {\n\tif (isAudioContext(context)) {\n\t\tglobalContext = new Context(context);\n\t} else if (isOfflineAudioContext(context)) {\n\t\tglobalContext = new OfflineContext(context);\n\t} else {\n\t\tglobalContext = context;\n\t}\n}\n\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start(): Promise<void> {\n\treturn globalContext.resume();\n}\n\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n\tlet prefix = \"v\";\n\tif (version === \"dev\") {\n\t\tprefix = \"\";\n\t}\n\tconst printString = ` * Tone.js ${prefix}${version} * `;\n\t// eslint-disable-next-line no-console\n\tconsole.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n"]},"metadata":{},"sourceType":"module"}