{"ast":null,"code":"/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\n\nexport function addToWorklet(classOrFunction) {\n  workletContext.add(classOrFunction);\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\n\nexport function registerProcessor(name, classDesc) {\n  const processor =\n  /* javascript */\n  `registerProcessor(\"${name}\", ${classDesc})`;\n  workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\n\nexport function getWorkletGlobalScope() {\n  return Array.from(workletContext).join(\"\\n\");\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,MAAMA,cAAc,GAAgB,IAAIC,GAAJ,EAApC;AAEA;;;;AAGA,OAAM,SAAUC,YAAV,CAAuBC,eAAvB,EAA8C;EACnDH,cAAc,CAACI,GAAf,CAAmBD,eAAnB;AACA;AAED;;;;AAGA,OAAM,SAAUE,iBAAV,CAA4BC,IAA5B,EAA0CC,SAA1C,EAA2D;EAChE,MAAMC,SAAS;EAAG;EAAgB,sBAAsBF,IAAI,MAAMC,SAAS,GAA3E;EACAP,cAAc,CAACI,GAAf,CAAmBI,SAAnB;AACA;AAED;;;;AAGA,OAAM,SAAUC,qBAAV,GAA+B;EACpC,OAAOC,KAAK,CAACC,IAAN,CAAWX,cAAX,EAA2BY,IAA3B,CAAgC,IAAhC,CAAP;AACA","names":["workletContext","Set","addToWorklet","classOrFunction","add","registerProcessor","name","classDesc","processor","getWorkletGlobalScope","Array","from","join"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/core/worklet/WorkletGlobalScope.ts"],"sourcesContent":["/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext: Set<string> = new Set();\n\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\nexport function addToWorklet(classOrFunction: string) {\n\tworkletContext.add(classOrFunction);\n}\n\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\nexport function registerProcessor(name: string, classDesc: string) {\n\tconst processor = /* javascript */`registerProcessor(\"${name}\", ${classDesc})`;\n\tworkletContext.add(processor);\n}\n\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\nexport function getWorkletGlobalScope(): string {\n\treturn Array.from(workletContext).join(\"\\n\");\n}\n"]},"metadata":{},"sourceType":"module"}