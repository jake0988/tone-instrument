{"ast":null,"code":"import { SignalOperator } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\n\nexport class GreaterThanZero extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n    this.name = \"GreaterThanZero\";\n    this._thresh = this.output = new WaveShaper({\n      context: this.context,\n      length: 127,\n      mapping: val => {\n        if (val <= 0) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    });\n    this._scale = this.input = new Multiply({\n      context: this.context,\n      value: 10000\n    }); // connections\n\n    this._scale.connect(this._thresh);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._scale.dispose();\n\n    this._thresh.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAAsD,kBAAtD;AACA,SAASC,QAAT,QAAyB,YAAzB;AAEA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,oBAAT,QAAqC,uBAArC;AAIA;;;;;;;;;;;AAUA,OAAM,MAAOC,eAAP,SAA+BJ,cAA/B,CAAqE;EAmB1EK;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcJ,oBAAoB,CAACC,eAAe,CAACI,WAAhB,EAAD,EAAgCC,SAAhC,CAAlC,CAAN;IAlBQ,YAAe,iBAAf;IAoBR,KAAKC,OAAL,GAAe,KAAKC,MAAL,GAAc,IAAIT,UAAJ,CAAe;MAC3CU,OAAO,EAAE,KAAKA,OAD6B;MAE3CC,MAAM,EAAE,GAFmC;MAG3CC,OAAO,EAAGC,GAAD,IAAQ;QAChB,IAAIA,GAAG,IAAI,CAAX,EAAc;UACb,OAAO,CAAP;QACA,CAFD,MAEO;UACN,OAAO,CAAP;QACA;MACD;IAT0C,CAAf,CAA7B;IAWA,KAAKC,MAAL,GAAc,KAAKC,KAAL,GAAa,IAAIhB,QAAJ,CAAa;MACvCW,OAAO,EAAE,KAAKA,OADyB;MAEvCM,KAAK,EAAE;IAFgC,CAAb,CAA3B,CAdD,CAmBC;;IACA,KAAKF,MAAL,CAAYG,OAAZ,CAAoB,KAAKT,OAAzB;EACA;;EAEDU,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKJ,MAAL,CAAYI,OAAZ;;IACA,KAAKV,OAAL,CAAaU,OAAb;;IACA,OAAO,IAAP;EACA;;AA/CyE","names":["SignalOperator","Multiply","WaveShaper","optionsFromArguments","GreaterThanZero","constructor","Object","assign","getDefaults","arguments","_thresh","output","context","length","mapping","val","_scale","input","value","connect","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/GreaterThanZero.ts"],"sourcesContent":["import { SignalOperator, SignalOperatorOptions } from \"./SignalOperator\";\nimport { Multiply } from \"./Multiply\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\n\nexport type GreaterThanZeroOptions = SignalOperatorOptions\n\n/**\n * GreaterThanZero outputs 1 when the input is strictly greater than zero\n * @example\n * return Tone.Offline(() => {\n * \tconst gt0 = new Tone.GreaterThanZero().toDestination();\n * \tconst sig = new Tone.Signal(0.5).connect(gt0);\n * \tsig.setValueAtTime(-1, 0.05);\n * }, 0.1, 1);\n * @category Signal\n */\nexport class GreaterThanZero extends SignalOperator<GreaterThanZeroOptions> {\n\n\treadonly name: string = \"GreaterThanZero\";\n\n\t/**\n\t * The waveshaper\n\t */\n\tprivate _thresh: WaveShaper;\n\n\t/**\n\t * Scale the first thresholded signal by a large value.\n\t * this will help with values which are very close to 0\n\t */\n\tprivate _scale: Multiply;\n\n\treadonly output: ToneAudioNode;\n\treadonly input: ToneAudioNode;\n\n\tconstructor(options?: Partial<GreaterThanZeroOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(), arguments)));\n\n\t\tthis._thresh = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tlength: 127,\n\t\t\tmapping: (val) => {\n\t\t\t\tif (val <= 0) {\n\t\t\t\t\treturn 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t\tthis._scale = this.input = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tvalue: 10000\n\t\t});\n\n\t\t// connections\n\t\tthis._scale.connect(this._thresh);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._scale.dispose();\n\t\tthis._thresh.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}