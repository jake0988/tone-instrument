{"ast":null,"code":"import { WaveShaper } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\n\nexport class Pow extends SignalOperator {\n  constructor() {\n    super(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n    this.name = \"Pow\";\n    const options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n    this._exponentScaler = this.input = this.output = new WaveShaper({\n      context: this.context,\n      mapping: this._expFunc(options.value),\n      length: 8192\n    });\n    this._exponent = options.value;\n  }\n\n  static getDefaults() {\n    return Object.assign(SignalOperator.getDefaults(), {\n      value: 1\n    });\n  }\n  /**\n   * the function which maps the waveshaper\n   * @param exponent exponent value\n   */\n\n\n  _expFunc(exponent) {\n    return val => {\n      return Math.pow(Math.abs(val), exponent);\n    };\n  }\n  /**\n   * The value of the exponent.\n   */\n\n\n  get value() {\n    return this._exponent;\n  }\n\n  set value(exponent) {\n    this._exponent = exponent;\n\n    this._exponentScaler.setMap(this._expFunc(this._exponent));\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._exponentScaler.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAAgD,cAAhD;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AAOA;;;;;;;;;;AASA,OAAM,MAAOC,GAAP,SAAmBD,cAAnB,CAA6C;EAiBlDE;IACC,MAAMC,MAAM,CAACC,MAAP,CAAcL,oBAAoB,CAACE,GAAG,CAACI,WAAJ,EAAD,EAAoBC,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAAlC,CAAN;IAhBQ,YAAe,KAAf;IAiBR,MAAMC,OAAO,GAAGR,oBAAoB,CAACE,GAAG,CAACI,WAAJ,EAAD,EAAoBC,SAApB,EAA+B,CAAC,OAAD,CAA/B,CAApC;IAEA,KAAKE,eAAL,GAAuB,KAAKC,KAAL,GAAa,KAAKC,MAAL,GAAc,IAAIZ,UAAJ,CAAe;MAChEa,OAAO,EAAE,KAAKA,OADkD;MAEhEC,OAAO,EAAE,KAAKC,QAAL,CAAcN,OAAO,CAACO,KAAtB,CAFuD;MAGhEC,MAAM,EAAE;IAHwD,CAAf,CAAlD;IAMA,KAAKC,SAAL,GAAiBT,OAAO,CAACO,KAAzB;EACA;;EAEiB,OAAXT,WAAW;IACjB,OAAOF,MAAM,CAACC,MAAP,CAAcJ,cAAc,CAACK,WAAf,EAAd,EAA4C;MAClDS,KAAK,EAAE;IAD2C,CAA5C,CAAP;EAGA;EAED;;;;;;EAIQD,QAAQ,CAACI,QAAD,EAAiB;IAChC,OAAQC,GAAD,IAAgB;MACtB,OAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,GAAT,CAAT,EAAwBD,QAAxB,CAAP;IACA,CAFD;EAGA;EAED;;;;;EAGS,IAALH,KAAK;IACR,OAAO,KAAKE,SAAZ;EACA;;EACQ,IAALF,KAAK,CAACG,QAAD,EAAiB;IACzB,KAAKD,SAAL,GAAiBC,QAAjB;;IACA,KAAKT,eAAL,CAAqBc,MAArB,CAA4B,KAAKT,QAAL,CAAc,KAAKG,SAAnB,CAA5B;EACA;EAED;;;;;EAGAO,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKf,eAAL,CAAqBe,OAArB;;IACA,OAAO,IAAP;EACA;;AAhEiD","names":["WaveShaper","optionsFromArguments","SignalOperator","Pow","constructor","Object","assign","getDefaults","arguments","options","_exponentScaler","input","output","context","mapping","_expFunc","value","length","_exponent","exponent","val","Math","pow","abs","setMap","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/Pow.ts"],"sourcesContent":["import { WaveShaper, WaveShaperMappingFn } from \"./WaveShaper\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\n\nexport interface PowOptions extends ToneAudioNodeOptions {\n\tvalue: number;\n}\n\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25. \n * @category Signal\n */\nexport class Pow extends SignalOperator<PowOptions> {\n\n\treadonly name: string = \"Pow\";\n\n\tprivate _exponent: number;\n\n\tprivate _exponentScaler: WaveShaper;\n\n\tinput: WaveShaper;\n\n\toutput: WaveShaper;\n\n\t/**\n\t * @param value Constant exponent value to use\n\t */\n\tconstructor(value?: number);\n\tconstructor(options?: Partial<PowOptions>);\n\tconstructor() {\n\t\tsuper(Object.assign(optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"])));\n\t\tconst options = optionsFromArguments(Pow.getDefaults(), arguments, [\"value\"]);\n\n\t\tthis._exponentScaler = this.input = this.output = new WaveShaper({\n\t\t\tcontext: this.context,\n\t\t\tmapping: this._expFunc(options.value),\n\t\t\tlength: 8192,\n\t\t});\n\n\t\tthis._exponent = options.value;\n\t}\n\n\tstatic getDefaults(): PowOptions {\n\t\treturn Object.assign(SignalOperator.getDefaults(), {\n\t\t\tvalue: 1,\n\t\t});\n\t}\n\n\t/**\n\t * the function which maps the waveshaper\n\t * @param exponent exponent value\n\t */\n\tprivate _expFunc(exponent: number): WaveShaperMappingFn {\n\t\treturn (val: number) => {\n\t\t\treturn Math.pow(Math.abs(val), exponent);\n\t\t};\n\t}\n\n\t/**\n\t * The value of the exponent.\n\t */\n\tget value(): number {\n\t\treturn this._exponent;\n\t}\n\tset value(exponent: number) {\n\t\tthis._exponent = exponent;\n\t\tthis._exponentScaler.setMap(this._expFunc(this._exponent));\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._exponentScaler.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}