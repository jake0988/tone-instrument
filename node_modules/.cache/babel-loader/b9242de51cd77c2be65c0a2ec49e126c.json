{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { connect, ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input.\n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia().connect(meter);\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * \tconsole.log(\"mic open\");\n * \t// print the incoming mic levels in decibels\n * \tsetInterval(() => console.log(meter.getValue()), 100);\n * }).catch(e => {\n * \t// promise is rejected when the user doesn't have or allow mic access\n * \tconsole.log(\"mic not open\");\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n    this.name = \"UserMedia\";\n    const options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n    this.mute = options.mute;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      mute: false,\n      volume: 0\n    });\n  }\n  /**\n   * Open the media stream. If a string is passed in, it is assumed\n   * to be the label or id of the stream, if a number is passed in,\n   * it is the input number of the stream.\n   * @param  labelOrId The label or id of the audio input media device.\n   *                   With no argument, the default stream is opened.\n   * @return The promise is resolved when the stream is open.\n   */\n\n\n  open(labelOrId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      assert(UserMedia.supported, \"UserMedia is not supported\"); // close the previous stream\n\n      if (this.state === \"started\") {\n        this.close();\n      }\n\n      const devices = yield UserMedia.enumerateDevices();\n\n      if (isNumber(labelOrId)) {\n        this._device = devices[labelOrId];\n      } else {\n        this._device = devices.find(device => {\n          return device.label === labelOrId || device.deviceId === labelOrId;\n        }); // didn't find a matching device\n\n        if (!this._device && devices.length > 0) {\n          this._device = devices[0];\n        }\n\n        assert(isDefined(this._device), `No matching device ${labelOrId}`);\n      } // do getUserMedia\n\n\n      const constraints = {\n        audio: {\n          echoCancellation: false,\n          sampleRate: this.context.sampleRate,\n          noiseSuppression: false,\n          mozNoiseSuppression: false\n        }\n      };\n\n      if (this._device) {\n        // @ts-ignore\n        constraints.audio.deviceId = this._device.deviceId;\n      }\n\n      const stream = yield navigator.mediaDevices.getUserMedia(constraints); // start a new source only if the previous one is closed\n\n      if (!this._stream) {\n        this._stream = stream; // Wrap a MediaStreamSourceNode around the live input stream.\n\n        const mediaStreamNode = this.context.createMediaStreamSource(stream); // Connect the MediaStreamSourceNode to a gate gain node\n\n        connect(mediaStreamNode, this.output);\n        this._mediaStream = mediaStreamNode;\n      }\n\n      return this;\n    });\n  }\n  /**\n   * Close the media stream\n   */\n\n\n  close() {\n    if (this._stream && this._mediaStream) {\n      this._stream.getAudioTracks().forEach(track => {\n        track.stop();\n      });\n\n      this._stream = undefined; // remove the old media stream\n\n      this._mediaStream.disconnect();\n\n      this._mediaStream = undefined;\n    }\n\n    this._device = undefined;\n    return this;\n  }\n  /**\n   * Returns a promise which resolves with the list of audio input devices available.\n   * @return The promise that is resolved with the devices\n   * @example\n   * Tone.UserMedia.enumerateDevices().then((devices) => {\n   * \t// print the device labels\n   * \tconsole.log(devices.map(device => device.label));\n   * });\n   */\n\n\n  static enumerateDevices() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allDevices = yield navigator.mediaDevices.enumerateDevices();\n      return allDevices.filter(device => {\n        return device.kind === \"audioinput\";\n      });\n    });\n  }\n  /**\n   * Returns the playback state of the source, \"started\" when the microphone is open\n   * and \"stopped\" when the mic is closed.\n   */\n\n\n  get state() {\n    return this._stream && this._stream.active ? \"started\" : \"stopped\";\n  }\n  /**\n   * Returns an identifier for the represented device that is\n   * persisted across sessions. It is un-guessable by other applications and\n   * unique to the origin of the calling application. It is reset when the\n   * user clears cookies (for Private Browsing, a different identifier is\n   * used that is not persisted across sessions). Returns undefined when the\n   * device is not open.\n   */\n\n\n  get deviceId() {\n    if (this._device) {\n      return this._device.deviceId;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Returns a group identifier. Two devices have the\n   * same group identifier if they belong to the same physical device.\n   * Returns null  when the device is not open.\n   */\n\n\n  get groupId() {\n    if (this._device) {\n      return this._device.groupId;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Returns a label describing this device (for example \"Built-in Microphone\").\n   * Returns undefined when the device is not open or label is not available\n   * because of permissions.\n   */\n\n\n  get label() {\n    if (this._device) {\n      return this._device.label;\n    } else {\n      return undefined;\n    }\n  }\n  /**\n   * Mute the output.\n   * @example\n   * const mic = new Tone.UserMedia();\n   * mic.open().then(() => {\n   * \t// promise resolves when input is available\n   * });\n   * // mute the output\n   * mic.mute = true;\n   */\n\n\n  get mute() {\n    return this._volume.mute;\n  }\n\n  set mute(mute) {\n    this._volume.mute = mute;\n  }\n\n  dispose() {\n    super.dispose();\n    this.close();\n\n    this._volume.dispose();\n\n    this.volume.dispose();\n    return this;\n  }\n  /**\n   * If getUserMedia is supported by the browser.\n   */\n\n\n  static get supported() {\n    return isDefined(navigator.mediaDevices) && isDefined(navigator.mediaDevices.getUserMedia);\n  }\n\n}","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,EAA8BC,aAA9B,QAAyE,+BAAzE;AAEA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,SAASC,QAAT,QAAyB,wBAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,wBAApC;AAMA;;;;;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAOC,SAAP,SAAyBP,aAAzB,CAAwD;EAqC7DQ;IAEC,MAAMN,oBAAoB,CAACK,SAAS,CAACE,WAAV,EAAD,EAA0BC,SAA1B,EAAqC,CAAC,QAAD,CAArC,CAA1B;IArCQ,YAAe,WAAf;IAsCR,MAAMC,OAAO,GAAGT,oBAAoB,CAACK,SAAS,CAACE,WAAV,EAAD,EAA0BC,SAA1B,EAAqC,CAAC,QAAD,CAArC,CAApC;IAEA,KAAKE,OAAL,GAAe,KAAKC,MAAL,GAAc,IAAIZ,MAAJ,CAAW;MACvCa,OAAO,EAAE,KAAKA,OADyB;MAEvCC,MAAM,EAAEJ,OAAO,CAACI;IAFuB,CAAX,CAA7B;IAIA,KAAKA,MAAL,GAAc,KAAKH,OAAL,CAAaG,MAA3B;IACAX,QAAQ,CAAC,IAAD,EAAO,QAAP,CAAR;IACA,KAAKY,IAAL,GAAYL,OAAO,CAACK,IAApB;EACA;;EAEiB,OAAXP,WAAW;IACjB,OAAOQ,MAAM,CAACC,MAAP,CAAclB,aAAa,CAACS,WAAd,EAAd,EAA2C;MACjDO,IAAI,EAAE,KAD2C;MAEjDD,MAAM,EAAE;IAFyC,CAA3C,CAAP;EAIA;EAED;;;;;;;;;;EAQMI,IAAI,CAACC,SAAD,EAA4B;;MACrCjB,MAAM,CAACI,SAAS,CAACc,SAAX,EAAsB,4BAAtB,CAAN,EACA;;MACA,IAAI,KAAKC,KAAL,KAAe,SAAnB,EAA8B;QAC7B,KAAKC,KAAL;MACA;;MACD,MAAMC,OAAO,GAAG,MAAMjB,SAAS,CAACkB,gBAAV,EAAtB;;MACA,IAAInB,QAAQ,CAACc,SAAD,CAAZ,EAAyB;QACxB,KAAKM,OAAL,GAAeF,OAAO,CAACJ,SAAD,CAAtB;MACA,CAFD,MAEO;QACN,KAAKM,OAAL,GAAeF,OAAO,CAACG,IAAR,CAAcC,MAAD,IAAW;UACtC,OAAOA,MAAM,CAACC,KAAP,KAAiBT,SAAjB,IAA8BQ,MAAM,CAACE,QAAP,KAAoBV,SAAzD;QACA,CAFc,CAAf,CADM,CAIN;;QACA,IAAI,CAAC,KAAKM,OAAN,IAAiBF,OAAO,CAACO,MAAR,GAAiB,CAAtC,EAAyC;UACxC,KAAKL,OAAL,GAAeF,OAAO,CAAC,CAAD,CAAtB;QACA;;QACDrB,MAAM,CAACE,SAAS,CAAC,KAAKqB,OAAN,CAAV,EAA0B,sBAAsBN,SAAS,EAAzD,CAAN;MACA,EACD;;;MACA,MAAMY,WAAW,GAAG;QACnBC,KAAK,EAAE;UACNC,gBAAgB,EAAE,KADZ;UAENC,UAAU,EAAE,KAAKrB,OAAL,CAAaqB,UAFnB;UAGNC,gBAAgB,EAAE,KAHZ;UAINC,mBAAmB,EAAE;QAJf;MADY,CAApB;;MAQA,IAAI,KAAKX,OAAT,EAAkB;QACjB;QACAM,WAAW,CAACC,KAAZ,CAAkBH,QAAlB,GAA6B,KAAKJ,OAAL,CAAaI,QAA1C;MACA;;MACD,MAAMQ,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoCT,WAApC,CAArB,EACA;;MACA,IAAI,CAAC,KAAKU,OAAV,EAAmB;QAClB,KAAKA,OAAL,GAAeJ,MAAf,CADkB,CAElB;;QACA,MAAMK,eAAe,GAAG,KAAK7B,OAAL,CAAa8B,uBAAb,CAAqCN,MAArC,CAAxB,CAHkB,CAIlB;;QACAvC,OAAO,CAAC4C,eAAD,EAAkB,KAAK9B,MAAvB,CAAP;QACA,KAAKgC,YAAL,GAAoBF,eAApB;MACA;;MACD,OAAO,IAAP;IACA;EAAA;EAED;;;;;EAGApB,KAAK;IACJ,IAAI,KAAKmB,OAAL,IAAgB,KAAKG,YAAzB,EAAuC;MACtC,KAAKH,OAAL,CAAaI,cAAb,GAA8BC,OAA9B,CAAuCC,KAAD,IAAU;QAC/CA,KAAK,CAACC,IAAN;MACA,CAFD;;MAGA,KAAKP,OAAL,GAAeQ,SAAf,CAJsC,CAKtC;;MACA,KAAKL,YAAL,CAAkBM,UAAlB;;MACA,KAAKN,YAAL,GAAoBK,SAApB;IACA;;IACD,KAAKxB,OAAL,GAAewB,SAAf;IACA,OAAO,IAAP;EACA;EAED;;;;;;;;;;;EAS6B,OAAhBzB,gBAAgB;;MAC5B,MAAM2B,UAAU,GAAG,MAAMb,SAAS,CAACC,YAAV,CAAuBf,gBAAvB,EAAzB;MACA,OAAO2B,UAAU,CAACC,MAAX,CAAkBzB,MAAM,IAAG;QACjC,OAAOA,MAAM,CAAC0B,IAAP,KAAgB,YAAvB;MACA,CAFM,CAAP;IAGA;EAAA;EAED;;;;;;EAIS,IAALhC,KAAK;IACR,OAAO,KAAKoB,OAAL,IAAgB,KAAKA,OAAL,CAAaa,MAA7B,GAAsC,SAAtC,GAAkD,SAAzD;EACA;EAED;;;;;;;;;;EAQY,IAARzB,QAAQ;IACX,IAAI,KAAKJ,OAAT,EAAkB;MACjB,OAAO,KAAKA,OAAL,CAAaI,QAApB;IACA,CAFD,MAEO;MACN,OAAOoB,SAAP;IACA;EACD;EAED;;;;;;;EAKW,IAAPM,OAAO;IACV,IAAI,KAAK9B,OAAT,EAAkB;MACjB,OAAO,KAAKA,OAAL,CAAa8B,OAApB;IACA,CAFD,MAEO;MACN,OAAON,SAAP;IACA;EACD;EAED;;;;;;;EAKS,IAALrB,KAAK;IACR,IAAI,KAAKH,OAAT,EAAkB;MACjB,OAAO,KAAKA,OAAL,CAAaG,KAApB;IACA,CAFD,MAEO;MACN,OAAOqB,SAAP;IACA;EACD;EAED;;;;;;;;;;;;EAUQ,IAAJlC,IAAI;IACP,OAAO,KAAKJ,OAAL,CAAaI,IAApB;EACA;;EACO,IAAJA,IAAI,CAACA,IAAD,EAAK;IACZ,KAAKJ,OAAL,CAAaI,IAAb,GAAoBA,IAApB;EACA;;EAEDyC,OAAO;IACN,MAAMA,OAAN;IACA,KAAKlC,KAAL;;IACA,KAAKX,OAAL,CAAa6C,OAAb;;IACA,KAAK1C,MAAL,CAAY0C,OAAZ;IACA,OAAO,IAAP;EACA;EAED;;;;;EAGoB,WAATpC,SAAS;IACnB,OAAOhB,SAAS,CAACkC,SAAS,CAACC,YAAX,CAAT,IACNnC,SAAS,CAACkC,SAAS,CAACC,YAAV,CAAuBC,YAAxB,CADV;EAEA;;AAjO4D","names":["connect","ToneAudioNode","Volume","optionsFromArguments","assert","readOnly","isDefined","isNumber","UserMedia","constructor","getDefaults","arguments","options","_volume","output","context","volume","mute","Object","assign","open","labelOrId","supported","state","close","devices","enumerateDevices","_device","find","device","label","deviceId","length","constraints","audio","echoCancellation","sampleRate","noiseSuppression","mozNoiseSuppression","stream","navigator","mediaDevices","getUserMedia","_stream","mediaStreamNode","createMediaStreamSource","_mediaStream","getAudioTracks","forEach","track","stop","undefined","disconnect","allDevices","filter","kind","active","groupId","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/source/UserMedia.ts"],"sourcesContent":["import { connect, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels } from \"../core/type/Units\";\nimport { Volume } from \"../component/channel/Volume\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { assert } from \"../core/util/Debug\";\nimport { Param } from \"../core/context/Param\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { isDefined, isNumber } from \"../core/util/TypeCheck\";\n\nexport interface UserMediaOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n\tmute: boolean;\n}\n/**\n * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input. \n * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n * to see which browsers are supported. Access to an external input\n * is limited to secure (HTTPS) connections.\n * @example\n * const meter = new Tone.Meter();\n * const mic = new Tone.UserMedia().connect(meter);\n * mic.open().then(() => {\n * \t// promise resolves when input is available\n * \tconsole.log(\"mic open\");\n * \t// print the incoming mic levels in decibels\n * \tsetInterval(() => console.log(meter.getValue()), 100);\n * }).catch(e => {\n * \t// promise is rejected when the user doesn't have or allow mic access\n * \tconsole.log(\"mic not open\");\n * });\n * @category Source\n */\n\nexport class UserMedia extends ToneAudioNode<UserMediaOptions> {\n\n\treadonly name: string = \"UserMedia\";\n\n\treadonly input: undefined;\n\treadonly output: OutputNode;\n\n\t/**\n\t * The MediaStreamNode\n\t */\n\tprivate _mediaStream?: MediaStreamAudioSourceNode;\n\n\t/**\n\t * The media stream created by getUserMedia.\n\t */\n\tprivate _stream?: MediaStream;\n\n\t/**\n\t * The open device\n\t */\n\tprivate _device?: MediaDeviceInfo;\n\n\t/**\n\t * The output volume node\n\t */\n\tprivate _volume: Volume;\n\n\t/**\n\t * The volume of the output in decibels.\n\t */\n\treadonly volume: Param<\"decibels\">;\n\n\t/**\n\t * @param volume The level of the input in decibels\n\t */\n\tconstructor(volume?: Decibels);\n\tconstructor(options?: Partial<UserMediaOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]));\n\t\tconst options = optionsFromArguments(UserMedia.getDefaults(), arguments, [\"volume\"]);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t\tthis.mute = options.mute;\n\t}\n\n\tstatic getDefaults(): UserMediaOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tmute: false,\n\t\t\tvolume: 0\n\t\t});\n\t}\n\n\t/**\n\t * Open the media stream. If a string is passed in, it is assumed\n\t * to be the label or id of the stream, if a number is passed in,\n\t * it is the input number of the stream.\n\t * @param  labelOrId The label or id of the audio input media device.\n\t *                   With no argument, the default stream is opened.\n\t * @return The promise is resolved when the stream is open.\n\t */\n\tasync open(labelOrId?: string | number): Promise<this> {\n\t\tassert(UserMedia.supported, \"UserMedia is not supported\");\n\t\t// close the previous stream\n\t\tif (this.state === \"started\") {\n\t\t\tthis.close();\n\t\t}\n\t\tconst devices = await UserMedia.enumerateDevices();\n\t\tif (isNumber(labelOrId)) {\n\t\t\tthis._device = devices[labelOrId];\n\t\t} else {\n\t\t\tthis._device = devices.find((device) => {\n\t\t\t\treturn device.label === labelOrId || device.deviceId === labelOrId;\n\t\t\t});\n\t\t\t// didn't find a matching device\n\t\t\tif (!this._device && devices.length > 0) {\n\t\t\t\tthis._device = devices[0];\n\t\t\t}\n\t\t\tassert(isDefined(this._device), `No matching device ${labelOrId}`);\n\t\t}\n\t\t// do getUserMedia\n\t\tconst constraints = {\n\t\t\taudio: {\n\t\t\t\techoCancellation: false,\n\t\t\t\tsampleRate: this.context.sampleRate,\n\t\t\t\tnoiseSuppression: false,\n\t\t\t\tmozNoiseSuppression: false,\n\t\t\t}\n\t\t};\n\t\tif (this._device) {\n\t\t\t// @ts-ignore\n\t\t\tconstraints.audio.deviceId = this._device.deviceId;\n\t\t}\n\t\tconst stream = await navigator.mediaDevices.getUserMedia(constraints);\n\t\t// start a new source only if the previous one is closed\n\t\tif (!this._stream) {\n\t\t\tthis._stream = stream;\n\t\t\t// Wrap a MediaStreamSourceNode around the live input stream.\n\t\t\tconst mediaStreamNode = this.context.createMediaStreamSource(stream);\n\t\t\t// Connect the MediaStreamSourceNode to a gate gain node\n\t\t\tconnect(mediaStreamNode, this.output);\n\t\t\tthis._mediaStream = mediaStreamNode;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Close the media stream\n\t */\n\tclose(): this {\n\t\tif (this._stream && this._mediaStream) {\n\t\t\tthis._stream.getAudioTracks().forEach((track) => {\n\t\t\t\ttrack.stop();\n\t\t\t});\n\t\t\tthis._stream = undefined;\n\t\t\t// remove the old media stream\n\t\t\tthis._mediaStream.disconnect();\n\t\t\tthis._mediaStream = undefined;\n\t\t}\n\t\tthis._device = undefined;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns a promise which resolves with the list of audio input devices available.\n\t * @return The promise that is resolved with the devices\n\t * @example\n\t * Tone.UserMedia.enumerateDevices().then((devices) => {\n\t * \t// print the device labels\n\t * \tconsole.log(devices.map(device => device.label));\n\t * });\n\t */\n\tstatic async enumerateDevices(): Promise<MediaDeviceInfo[]> {\n\t\tconst allDevices = await navigator.mediaDevices.enumerateDevices();\n\t\treturn allDevices.filter(device => {\n\t\t\treturn device.kind === \"audioinput\";\n\t\t});\n\t}\n\n\t/**\n\t * Returns the playback state of the source, \"started\" when the microphone is open\n\t * and \"stopped\" when the mic is closed.\n\t */\n\tget state() {\n\t\treturn this._stream && this._stream.active ? \"started\" : \"stopped\";\n\t}\n\n\t/**\n\t * Returns an identifier for the represented device that is\n\t * persisted across sessions. It is un-guessable by other applications and\n\t * unique to the origin of the calling application. It is reset when the\n\t * user clears cookies (for Private Browsing, a different identifier is\n\t * used that is not persisted across sessions). Returns undefined when the\n\t * device is not open.\n\t */\n\tget deviceId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.deviceId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a group identifier. Two devices have the\n\t * same group identifier if they belong to the same physical device.\n\t * Returns null  when the device is not open.\n\t */\n\tget groupId(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.groupId;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Returns a label describing this device (for example \"Built-in Microphone\").\n\t * Returns undefined when the device is not open or label is not available\n\t * because of permissions.\n\t */\n\tget label(): string | undefined {\n\t\tif (this._device) {\n\t\t\treturn this._device.label;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Mute the output.\n\t * @example\n\t * const mic = new Tone.UserMedia();\n\t * mic.open().then(() => {\n\t * \t// promise resolves when input is available\n\t * });\n\t * // mute the output\n\t * mic.mute = true;\n\t */\n\tget mute(): boolean {\n\t\treturn this._volume.mute;\n\t}\n\tset mute(mute) {\n\t\tthis._volume.mute = mute;\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.close();\n\t\tthis._volume.dispose();\n\t\tthis.volume.dispose();\n\t\treturn this;\n\t}\n\n\t/**\n\t * If getUserMedia is supported by the browser.\n\t */\n\tstatic get supported(): boolean {\n\t\treturn isDefined(navigator.mediaDevices) &&\n\t\t\tisDefined(navigator.mediaDevices.getUserMedia);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}