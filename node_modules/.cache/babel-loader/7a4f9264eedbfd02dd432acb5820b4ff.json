{"ast":null,"code":"import { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n/**\n * Follower is a simple envelope follower.\n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.\n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\n\nexport class Follower extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n    this.name = \"Follower\";\n    const options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n    this._abs = this.input = new Abs({\n      context: this.context\n    });\n    this._lowpass = this.output = new OnePoleFilter({\n      context: this.context,\n      frequency: 1 / this.toSeconds(options.smoothing),\n      type: \"lowpass\"\n    });\n\n    this._abs.connect(this._lowpass);\n\n    this._smoothing = options.smoothing;\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      smoothing: 0.05\n    });\n  }\n  /**\n   * The amount of time it takes a value change to arrive at the updated value.\n   */\n\n\n  get smoothing() {\n    return this._smoothing;\n  }\n\n  set smoothing(smoothing) {\n    this._smoothing = smoothing;\n    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._abs.dispose();\n\n    this._lowpass.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAAgCA,aAAhC,QAA2E,kCAA3E;AACA,SAASC,oBAAT,QAAqC,0BAArC;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,GAAT,QAAoB,kBAApB;AAMA;;;;;;;;;;;AAUA,OAAM,MAAOC,QAAP,SAAwBJ,aAAxB,CAAsD;EA2B3DK;IACC,MAAMJ,oBAAoB,CAACG,QAAQ,CAACE,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAA1B;IA1BQ,YAAe,UAAf;IA2BR,MAAMC,OAAO,GAAGP,oBAAoB,CAACG,QAAQ,CAACE,WAAT,EAAD,EAAyBC,SAAzB,EAAoC,CAAC,WAAD,CAApC,CAApC;IAEA,KAAKE,IAAL,GAAY,KAAKC,KAAL,GAAa,IAAIP,GAAJ,CAAQ;MAAEQ,OAAO,EAAE,KAAKA;IAAhB,CAAR,CAAzB;IACA,KAAKC,QAAL,GAAgB,KAAKC,MAAL,GAAc,IAAIX,aAAJ,CAAkB;MAC/CS,OAAO,EAAE,KAAKA,OADiC;MAE/CG,SAAS,EAAE,IAAI,KAAKC,SAAL,CAAeP,OAAO,CAACQ,SAAvB,CAFgC;MAG/CC,IAAI,EAAE;IAHyC,CAAlB,CAA9B;;IAKA,KAAKR,IAAL,CAAUS,OAAV,CAAkB,KAAKN,QAAvB;;IACA,KAAKO,UAAL,GAAkBX,OAAO,CAACQ,SAA1B;EACA;;EAEiB,OAAXV,WAAW;IACjB,OAAOc,MAAM,CAACC,MAAP,CAAcrB,aAAa,CAACM,WAAd,EAAd,EAA2C;MACjDU,SAAS,EAAE;IADsC,CAA3C,CAAP;EAGA;EAED;;;;;EAGa,IAATA,SAAS;IACZ,OAAO,KAAKG,UAAZ;EACA;;EACY,IAATH,SAAS,CAACA,SAAD,EAAU;IACtB,KAAKG,UAAL,GAAkBH,SAAlB;IACA,KAAKJ,QAAL,CAAcE,SAAd,GAA0B,IAAI,KAAKC,SAAL,CAAe,KAAKC,SAApB,CAA9B;EACA;;EAEDM,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKb,IAAL,CAAUa,OAAV;;IACA,KAAKV,QAAL,CAAcU,OAAd;;IACA,OAAO,IAAP;EACA;;AA/D0D","names":["ToneAudioNode","optionsFromArguments","OnePoleFilter","Abs","Follower","constructor","getDefaults","arguments","options","_abs","input","context","_lowpass","output","frequency","toSeconds","smoothing","type","connect","_smoothing","Object","assign","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/component/analysis/Follower.ts"],"sourcesContent":["import { Time } from \"../../core/type/Units\";\nimport { InputNode, OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { OnePoleFilter } from \"../filter/OnePoleFilter\";\nimport { Abs } from \"../../signal/Abs\";\n\nexport interface FollowerOptions extends ToneAudioNodeOptions {\n\tsmoothing: Time;\n}\n\n/**\n * Follower is a simple envelope follower. \n * It's implemented by applying a lowpass filter to the absolute value of the incoming signal. \n * ```\n *          +-----+    +---------------+\n * Input +--> Abs +----> OnePoleFilter +--> Output\n *          +-----+    +---------------+\n * ```\n * @category Component\n */\nexport class Follower extends ToneAudioNode<FollowerOptions> {\n\n\treadonly name: string = \"Follower\";\n\n\treadonly input: InputNode;\n\treadonly output: OutputNode;\n\n\t/**\n\t * Private reference to the smoothing parameter\n\t */\n\tprivate _smoothing: Time;\n\n\t/**\n\t * The lowpass filter\n\t */\n\tprivate _lowpass: OnePoleFilter;\n\n\t/**\n\t * The absolute value\n\t */\n\tprivate _abs: Abs;\n\n\t/**\n\t * @param smoothing The rate of change of the follower.\n\t */\n\tconstructor(smoothing?: Time);\n\tconstructor(options?: Partial<FollowerOptions>);\n\tconstructor() {\n\t\tsuper(optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]));\n\t\tconst options = optionsFromArguments(Follower.getDefaults(), arguments, [\"smoothing\"]);\n\n\t\tthis._abs = this.input = new Abs({ context: this.context });\n\t\tthis._lowpass = this.output = new OnePoleFilter({\n\t\t\tcontext: this.context,\n\t\t\tfrequency: 1 / this.toSeconds(options.smoothing),\n\t\t\ttype: \"lowpass\"\n\t\t});\n\t\tthis._abs.connect(this._lowpass);\n\t\tthis._smoothing = options.smoothing;\n\t}\n\n\tstatic getDefaults(): FollowerOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tsmoothing: 0.05\n\t\t});\n\t}\n\n\t/**\n\t * The amount of time it takes a value change to arrive at the updated value. \n\t */\n\tget smoothing(): Time {\n\t\treturn this._smoothing;\n\t}\n\tset smoothing(smoothing) {\n\t\tthis._smoothing = smoothing;\n\t\tthis._lowpass.frequency = 1 / this.toSeconds(this.smoothing);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\tthis._lowpass.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}