{"ast":null,"code":"import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See [[GainToAudio]].\n * @category Signal\n */\n\nexport class AudioToGain extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"AudioToGain\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    this._norm = new WaveShaper({\n      context: this.context,\n      mapping: x => (x + 1) / 2\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    this.input = this._norm;\n    /**\n     * The GainRange output [0, 1]\n     */\n\n    this.output = this._norm;\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._norm.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;;;;;;AAKA,OAAM,MAAOC,WAAP,SAA2BF,cAA3B,CAA+D;EAArEG;;IAEU,YAAe,aAAf;IAET;;;;IAGQ,aAAQ,IAAIF,UAAJ,CAAe;MAC9BG,OAAO,EAAE,KAAKA,OADgB;MAE9BC,OAAO,EAAEC,CAAC,IAAI,CAACA,CAAC,GAAG,CAAL,IAAU;IAFM,CAAf,CAAR;IAKR;;;;IAGA,aAAQ,KAAKC,KAAb;IAEA;;;;IAGA,cAAS,KAAKA,KAAd;EAUA;EARA;;;;;EAGAC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKD,KAAL,CAAWC,OAAX;;IACA,OAAO,IAAP;EACA;;AA7BmE","names":["SignalOperator","WaveShaper","AudioToGain","constructor","context","mapping","x","_norm","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/AudioToGain.ts"],"sourcesContent":["import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * See [[GainToAudio]].\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"AudioToGain\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _norm = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: x => (x + 1) / 2,\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._norm;\n\n\t/**\n\t * The GainRange output [0, 1]\n\t */\n\toutput = this._norm;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._norm.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}