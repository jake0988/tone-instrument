{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport { generateWaveform } from \"./OscillatorInterface\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\n\nexport class AMOscillator extends Source {\n  constructor() {\n    super(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n    this.name = \"AMOscillator\";\n    /**\n     * convert the -1,1 output to 0,1\n     */\n\n    this._modulationScale = new AudioToGain({\n      context: this.context\n    });\n    /**\n     * the node where the modulation happens\n     */\n\n    this._modulationNode = new Gain({\n      context: this.context\n    });\n    const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n    this._carrier = new Oscillator({\n      context: this.context,\n      detune: options.detune,\n      frequency: options.frequency,\n      onstop: () => this.onstop(this),\n      phase: options.phase,\n      type: options.type\n    });\n    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;\n    this._modulator = new Oscillator({\n      context: this.context,\n      phase: options.phase,\n      type: options.modulationType\n    });\n    this.harmonicity = new Multiply({\n      context: this.context,\n      units: \"positive\",\n      value: options.harmonicity\n    }); // connections\n\n    this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\n    this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\n    this._carrier.chain(this._modulationNode, this.output);\n\n    readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(Oscillator.getDefaults(), {\n      harmonicity: 1,\n      modulationType: \"square\"\n    });\n  }\n  /**\n   * start the oscillator\n   */\n\n\n  _start(time) {\n    this._modulator.start(time);\n\n    this._carrier.start(time);\n  }\n  /**\n   * stop the oscillator\n   */\n\n\n  _stop(time) {\n    this._modulator.stop(time);\n\n    this._carrier.stop(time);\n  }\n\n  _restart(time) {\n    this._modulator.restart(time);\n\n    this._carrier.restart(time);\n  }\n  /**\n   * The type of the carrier oscillator\n   */\n\n\n  get type() {\n    return this._carrier.type;\n  }\n\n  set type(type) {\n    this._carrier.type = type;\n  }\n\n  get baseType() {\n    return this._carrier.baseType;\n  }\n\n  set baseType(baseType) {\n    this._carrier.baseType = baseType;\n  }\n\n  get partialCount() {\n    return this._carrier.partialCount;\n  }\n\n  set partialCount(partialCount) {\n    this._carrier.partialCount = partialCount;\n  }\n  /**\n   * The type of the modulator oscillator\n   */\n\n\n  get modulationType() {\n    return this._modulator.type;\n  }\n\n  set modulationType(type) {\n    this._modulator.type = type;\n  }\n\n  get phase() {\n    return this._carrier.phase;\n  }\n\n  set phase(phase) {\n    this._carrier.phase = phase;\n    this._modulator.phase = phase;\n  }\n\n  get partials() {\n    return this._carrier.partials;\n  }\n\n  set partials(partials) {\n    this._carrier.partials = partials;\n  }\n\n  asArray() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1024;\n    return __awaiter(this, void 0, void 0, function* () {\n      return generateWaveform(this, length);\n    });\n  }\n  /**\n   * Clean up.\n   */\n\n\n  dispose() {\n    super.dispose();\n    this.frequency.dispose();\n    this.detune.dispose();\n    this.harmonicity.dispose();\n\n    this._carrier.dispose();\n\n    this._modulator.dispose();\n\n    this._modulationNode.dispose();\n\n    this._modulationScale.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Gain","optionsFromArguments","readOnly","AudioToGain","Multiply","Source","Oscillator","generateWaveform","AMOscillator","constructor","getDefaults","arguments","context","options","_carrier","detune","frequency","onstop","phase","type","_modulator","modulationType","harmonicity","units","value","chain","_modulationScale","_modulationNode","gain","output","Object","assign","_start","time","start","_stop","stop","_restart","restart","baseType","partialCount","partials","asArray","length","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/source/oscillator/AMOscillator.ts"],"sourcesContent":["import { Gain } from \"../../core/context/Gain\";\nimport { Degrees, Frequency, Seconds } from \"../../core/type/Units\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { AudioToGain } from \"../../signal/AudioToGain\";\nimport { Multiply } from \"../../signal/Multiply\";\nimport { Signal } from \"../../signal/Signal\";\nimport { Source } from \"../Source\";\nimport { Oscillator } from \"./Oscillator\";\nimport {\n\tAMConstructorOptions, AMOscillatorOptions,\n\tgenerateWaveform, NonCustomOscillatorType,\n\tToneOscillatorInterface,\n\tToneOscillatorType\n} from \"./OscillatorInterface\";\n\nexport { AMOscillatorOptions } from \"./OscillatorInterface\";\n\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source<AMOscillatorOptions> implements ToneOscillatorInterface {\n\n\treadonly name: string = \"AMOscillator\";\n\n\t/**\n\t * The carrier oscillator\n\t */\n\tprivate _carrier: Oscillator;\n\n\treadonly frequency: Signal<\"frequency\">;\n\treadonly detune: Signal<\"cents\">;\n\n\t/**\n\t * The modulating oscillator\n\t */\n\tprivate _modulator: Oscillator;\n\n\t/**\n\t * convert the -1,1 output to 0,1\n\t */\n\tprivate _modulationScale = new AudioToGain({ context: this.context });\n\n\t/**\n\t * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n\t * A harmonicity of 1 gives both oscillators the same frequency.\n\t * Harmonicity = 2 means a change of an octave.\n\t * @example\n\t * const amOsc = new Tone.AMOscillator(\"D2\").toDestination().start();\n\t * Tone.Transport.scheduleRepeat(time => {\n\t * \tamOsc.harmonicity.setValueAtTime(1, time);\n\t * \tamOsc.harmonicity.setValueAtTime(0.5, time + 0.5);\n\t * \tamOsc.harmonicity.setValueAtTime(1.5, time + 1);\n\t * \tamOsc.harmonicity.setValueAtTime(1, time + 2);\n\t * \tamOsc.harmonicity.linearRampToValueAtTime(2, time + 4);\n\t * }, 4);\n\t * Tone.Transport.start();\n\t */\n\treadonly harmonicity: Signal<\"positive\">;\n\n\t/**\n\t * the node where the modulation happens\n\t */\n\tprivate _modulationNode = new Gain({\n\t\tcontext: this.context,\n\t});\n\n\t/**\n\t * @param frequency The starting frequency of the oscillator.\n\t * @param type The type of the carrier oscillator.\n\t * @param modulationType The type of the modulator oscillator.\n\t */\n\tconstructor(frequency?: Frequency, type?: ToneOscillatorType, modulationType?: ToneOscillatorType);\n\tconstructor(options?: Partial<AMConstructorOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]));\n\t\tconst options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n\n\t\tthis._carrier = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tdetune: options.detune,\n\t\t\tfrequency: options.frequency,\n\t\t\tonstop: () => this.onstop(this),\n\t\t\tphase: options.phase,\n\t\t\ttype: options.type,\n\t\t} as OscillatorOptions);\n\t\tthis.frequency = this._carrier.frequency,\n\t\tthis.detune = this._carrier.detune;\n\n\t\tthis._modulator = new Oscillator({\n\t\t\tcontext: this.context,\n\t\t\tphase: options.phase,\n\t\t\ttype: options.modulationType,\n\t\t} as OscillatorOptions);\n\n\t\tthis.harmonicity = new Multiply({\n\t\t\tcontext: this.context,\n\t\t\tunits: \"positive\",\n\t\t\tvalue: options.harmonicity,\n\t\t});\n\n\t\t// connections\n\t\tthis.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t\tthis._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t\tthis._carrier.chain(this._modulationNode, this.output);\n\n\t\treadOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n\t}\n\n\tstatic getDefaults(): AMOscillatorOptions {\n\t\treturn Object.assign(Oscillator.getDefaults(), {\n\t\t\tharmonicity: 1,\n\t\t\tmodulationType: \"square\" as NonCustomOscillatorType,\n\t\t});\n\t}\n\n\t/**\n\t * start the oscillator\n\t */\n\tprotected _start(time: Seconds): void {\n\t\tthis._modulator.start(time);\n\t\tthis._carrier.start(time);\n\t}\n\n\t/**\n\t * stop the oscillator\n\t */\n\tprotected _stop(time: Seconds): void {\n\t\tthis._modulator.stop(time);\n\t\tthis._carrier.stop(time);\n\t}\n\n\tprotected _restart(time: Seconds): void {\n\t\tthis._modulator.restart(time);\n\t\tthis._carrier.restart(time);\n\t}\n\n\t/**\n\t * The type of the carrier oscillator\n\t */\n\tget type(): ToneOscillatorType {\n\t\treturn this._carrier.type;\n\t}\n\tset type(type: ToneOscillatorType) {\n\t\tthis._carrier.type = type;\n\t}\n\n\tget baseType(): OscillatorType {\n\t\treturn this._carrier.baseType;\n\t}\n\tset baseType(baseType: OscillatorType) {\n\t\tthis._carrier.baseType = baseType;\n\t}\n\n\tget partialCount(): number {\n\t\treturn this._carrier.partialCount;\n\t}\n\tset partialCount(partialCount: number) {\n\t\tthis._carrier.partialCount = partialCount;\n\t}\n\n\t/**\n\t * The type of the modulator oscillator\n\t */\n\tget modulationType(): ToneOscillatorType {\n\t\treturn this._modulator.type;\n\t}\n\tset modulationType(type: ToneOscillatorType) {\n\t\tthis._modulator.type = type;\n\t}\n\n\tget phase(): Degrees {\n\t\treturn this._carrier.phase;\n\t}\n\tset phase(phase: Degrees) {\n\t\tthis._carrier.phase = phase;\n\t\tthis._modulator.phase = phase;\n\t}\n\n\tget partials(): number[] {\n\t\treturn this._carrier.partials;\n\t}\n\tset partials(partials: number[]) {\n\t\tthis._carrier.partials = partials;\n\t}\n\n\tasync asArray(length = 1024): Promise<Float32Array> {\n\t\treturn generateWaveform(this, length);\n\t}\n\n\t/**\n\t * Clean up.\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.frequency.dispose();\n\t\tthis.detune.dispose();\n\t\tthis.harmonicity.dispose();\n\t\tthis._carrier.dispose();\n\t\tthis._modulator.dispose();\n\t\tthis._modulationNode.dispose();\n\t\tthis._modulationScale.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}