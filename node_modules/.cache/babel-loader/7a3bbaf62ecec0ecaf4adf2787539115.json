{"ast":null,"code":"import { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\n\nexport class Abs extends SignalOperator {\n  constructor() {\n    super(...arguments);\n    this.name = \"Abs\";\n    /**\n     * The node which converts the audio ranges\n     */\n\n    this._abs = new WaveShaper({\n      context: this.context,\n      mapping: val => {\n        if (Math.abs(val) < 0.001) {\n          return 0;\n        } else {\n          return Math.abs(val);\n        }\n      }\n    });\n    /**\n     * The AudioRange input [-1, 1]\n     */\n\n    this.input = this._abs;\n    /**\n     * The output range [0, 1]\n     */\n\n    this.output = this._abs;\n  }\n  /**\n   * clean up\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._abs.dispose();\n\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;;;;;;;;;;;;;AAYA,OAAM,MAAOC,GAAP,SAAmBF,cAAnB,CAAuD;EAA7DG;;IAEU,YAAe,KAAf;IAET;;;;IAGQ,YAAO,IAAIF,UAAJ,CAAe;MAC7BG,OAAO,EAAE,KAAKA,OADe;MAE7BC,OAAO,EAAEC,GAAG,IAAG;QACd,IAAIC,IAAI,CAACC,GAAL,CAASF,GAAT,IAAgB,KAApB,EAA2B;UAC1B,OAAO,CAAP;QACA,CAFD,MAEO;UACN,OAAOC,IAAI,CAACC,GAAL,CAASF,GAAT,CAAP;QACA;MACD;IAR4B,CAAf,CAAP;IAWR;;;;IAGA,aAAQ,KAAKG,IAAb;IAEA;;;;IAGA,cAAS,KAAKA,IAAd;EAUA;EARA;;;;;EAGAC,OAAO;IACN,MAAMA,OAAN;;IACA,KAAKD,IAAL,CAAUC,OAAV;;IACA,OAAO,IAAP;EACA;;AAnC2D","names":["SignalOperator","WaveShaper","Abs","constructor","context","mapping","val","Math","abs","_abs","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/signal/Abs.ts"],"sourcesContent":["import { ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { SignalOperator } from \"./SignalOperator\";\nimport { WaveShaper } from \"./WaveShaper\";\n\n/**\n * Return the absolute value of an incoming signal.\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst abs = new Tone.Abs().toDestination();\n * \tconst signal = new Tone.Signal(1);\n * \tsignal.rampTo(-1, 0.5);\n * \tsignal.connect(abs);\n * }, 0.5, 1);\n * @category Signal\n */\nexport class Abs extends SignalOperator<ToneAudioNodeOptions> {\n\n\treadonly name: string = \"Abs\";\n\n\t/**\n\t * The node which converts the audio ranges\n\t */\n\tprivate _abs = new WaveShaper({\n\t\tcontext: this.context,\n\t\tmapping: val => {\n\t\t\tif (Math.abs(val) < 0.001) {\n\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\treturn Math.abs(val);\n\t\t\t}\n\t\t},\n\t});\n\n\t/**\n\t * The AudioRange input [-1, 1]\n\t */\n\tinput = this._abs;\n\n\t/**\n\t * The output range [0, 1]\n\t */\n\toutput = this._abs;\n\n\t/**\n\t * clean up\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._abs.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}