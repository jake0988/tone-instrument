{"ast":null,"code":"import { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\n\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\n\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\n\nexport class Freeverb extends StereoEffect {\n  constructor() {\n    super(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n    this.name = \"Freeverb\";\n    /**\n     * the comb filters\n     */\n\n    this._combFilters = [];\n    /**\n     * the allpass filters on the left\n     */\n\n    this._allpassFiltersL = [];\n    /**\n     * the allpass filters on the right\n     */\n\n    this._allpassFiltersR = [];\n    const options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n    this.roomSize = new Signal({\n      context: this.context,\n      value: options.roomSize,\n      units: \"normalRange\"\n    }); // make the allpass filters on the right\n\n    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n      const allpassL = this.context.createBiquadFilter();\n      allpassL.type = \"allpass\";\n      allpassL.frequency.value = freq;\n      return allpassL;\n    }); // make the allpass filters on the left\n\n    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n      const allpassR = this.context.createBiquadFilter();\n      allpassR.type = \"allpass\";\n      allpassR.frequency.value = freq;\n      return allpassR;\n    }); // make the comb filters\n\n    this._combFilters = combFilterTunings.map((delayTime, index) => {\n      const lfpf = new LowpassCombFilter({\n        context: this.context,\n        dampening: options.dampening,\n        delayTime\n      });\n\n      if (index < combFilterTunings.length / 2) {\n        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n      } else {\n        this.connectEffectRight(lfpf, ...this._allpassFiltersR);\n      }\n\n      this.roomSize.connect(lfpf.resonance);\n      return lfpf;\n    });\n    readOnly(this, [\"roomSize\"]);\n  }\n\n  static getDefaults() {\n    return Object.assign(StereoEffect.getDefaults(), {\n      roomSize: 0.7,\n      dampening: 3000\n    });\n  }\n  /**\n   * The amount of dampening of the reverberant signal.\n   */\n\n\n  get dampening() {\n    return this._combFilters[0].dampening;\n  }\n\n  set dampening(d) {\n    this._combFilters.forEach(c => c.dampening = d);\n  }\n\n  dispose() {\n    super.dispose();\n\n    this._allpassFiltersL.forEach(al => al.disconnect());\n\n    this._allpassFiltersR.forEach(ar => ar.disconnect());\n\n    this._combFilters.forEach(cf => cf.dispose());\n\n    this.roomSize.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["StereoEffect","optionsFromArguments","readOnly","Signal","LowpassCombFilter","combFilterTunings","allpassFilterFrequencies","Freeverb","constructor","getDefaults","arguments","options","roomSize","context","value","units","_allpassFiltersL","map","freq","allpassL","createBiquadFilter","type","frequency","_allpassFiltersR","allpassR","_combFilters","delayTime","index","lfpf","dampening","length","connectEffectLeft","connectEffectRight","connect","resonance","Object","assign","d","forEach","c","dispose","al","disconnect","ar","cf"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/Freeverb.ts"],"sourcesContent":["import { StereoEffect, StereoEffectOptions } from \"./StereoEffect\";\nimport { Frequency, NormalRange } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\nimport { Signal } from \"../signal/Signal\";\nimport { LowpassCombFilter } from \"../component/filter/LowpassCombFilter\";\n\nexport interface FreeverbOptions extends StereoEffectOptions {\n\tdampening: Frequency;\n\troomSize: NormalRange;\n}\n\n/**\n * An array of comb filter delay values from Freeverb implementation\n */\nconst combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];\n\n/**\n * An array of allpass filter frequency values from Freeverb implementation\n */\nconst allpassFilterFrequencies = [225, 556, 441, 341];\n\n/**\n * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].\n * @example\n * const freeverb = new Tone.Freeverb().toDestination();\n * freeverb.dampening = 1000;\n * // routing synth through the reverb\n * const synth = new Tone.NoiseSynth().connect(freeverb);\n * synth.triggerAttackRelease(0.05);\n * @category Effect\n */\nexport class Freeverb extends StereoEffect<FreeverbOptions> {\n\n\treadonly name: string = \"Freeverb\";\n\n\t/**\n\t * The roomSize value between 0 and 1. A larger roomSize will result in a longer decay.\n\t */\n\treadonly roomSize: Signal<\"normalRange\">;\n\n\t/**\n\t * the comb filters\n\t */\n\tprivate _combFilters: LowpassCombFilter[] = [];\n\n\t/**\n\t * the allpass filters on the left\n\t */\n\tprivate _allpassFiltersL: BiquadFilterNode[] = [];\n\n\t/**\n\t * the allpass filters on the right\n\t */\n\tprivate _allpassFiltersR: BiquadFilterNode[] = [];\n\n\t/**\n\t * @param roomSize Correlated to the decay time.\n\t * @param dampening The cutoff frequency of a lowpass filter as part of the reverb.\n\t */\n\tconstructor(roomSize?: NormalRange, dampening?: Frequency);\n\tconstructor(options?: Partial<FreeverbOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]));\n\t\tconst options = optionsFromArguments(Freeverb.getDefaults(), arguments, [\"roomSize\", \"dampening\"]);\n\n\t\tthis.roomSize = new Signal({\n\t\t\tcontext: this.context,\n\t\t\tvalue: options.roomSize,\n\t\t\tunits: \"normalRange\",\n\t\t});\n\n\t\t// make the allpass filters on the right\n\t\tthis._allpassFiltersL = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassL = this.context.createBiquadFilter();\n\t\t\tallpassL.type = \"allpass\";\n\t\t\tallpassL.frequency.value = freq;\n\t\t\treturn allpassL;\n\t\t});\n\n\t\t// make the allpass filters on the left\n\t\tthis._allpassFiltersR = allpassFilterFrequencies.map(freq => {\n\t\t\tconst allpassR = this.context.createBiquadFilter();\n\t\t\tallpassR.type = \"allpass\";\n\t\t\tallpassR.frequency.value = freq;\n\t\t\treturn allpassR;\n\t\t});\n\n\t\t// make the comb filters\n\t\tthis._combFilters = combFilterTunings.map((delayTime, index) => {\n\t\t\tconst lfpf = new LowpassCombFilter({\n\t\t\t\tcontext: this.context,\n\t\t\t\tdampening: options.dampening,\n\t\t\t\tdelayTime,\n\t\t\t});\n\t\t\tif (index < combFilterTunings.length / 2) {\n\t\t\t\tthis.connectEffectLeft(lfpf, ...this._allpassFiltersL);\n\t\t\t} else {\n\t\t\t\tthis.connectEffectRight(lfpf, ...this._allpassFiltersR);\n\t\t\t}\n\t\t\tthis.roomSize.connect(lfpf.resonance);\n\t\t\treturn lfpf;\n\t\t});\n\n\t\treadOnly(this, [\"roomSize\"]);\n\t}\n\n\tstatic getDefaults(): FreeverbOptions {\n\t\treturn Object.assign(StereoEffect.getDefaults(), {\n\t\t\troomSize: 0.7,\n\t\t\tdampening: 3000\n\t\t});\n\t}\n\n\t/**\n\t * The amount of dampening of the reverberant signal.\n\t */\n\n\tget dampening(): Frequency {\n\t\treturn this._combFilters[0].dampening;\n\t}\n\tset dampening(d) {\n\t\tthis._combFilters.forEach(c => c.dampening = d);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._allpassFiltersL.forEach(al => al.disconnect());\n\t\tthis._allpassFiltersR.forEach(ar => ar.disconnect());\n\t\tthis._combFilters.forEach(cf => cf.dispose());\n\t\tthis.roomSize.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}