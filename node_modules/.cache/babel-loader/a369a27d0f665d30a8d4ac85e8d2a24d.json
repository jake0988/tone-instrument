{"ast":null,"code":"import { Volume } from \"../component/channel/Volume\";\nimport { ToneAudioNode } from \"../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Base-class for all instruments\n */\n\nexport class Instrument extends ToneAudioNode {\n  constructor() {\n    super(optionsFromArguments(Instrument.getDefaults(), arguments));\n    /**\n     * Keep track of all events scheduled to the transport\n     * when the instrument is 'synced'\n     */\n\n    this._scheduledEvents = [];\n    /**\n     * If the instrument is currently synced\n     */\n\n    this._synced = false;\n    this._original_triggerAttack = this.triggerAttack;\n    this._original_triggerRelease = this.triggerRelease;\n    const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n    this._volume = this.output = new Volume({\n      context: this.context,\n      volume: options.volume\n    });\n    this.volume = this._volume.volume;\n    readOnly(this, \"volume\");\n  }\n\n  static getDefaults() {\n    return Object.assign(ToneAudioNode.getDefaults(), {\n      volume: 0\n    });\n  }\n  /**\n   * Sync the instrument to the Transport. All subsequent calls of\n   * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n   * @example\n   * const fmSynth = new Tone.FMSynth().toDestination();\n   * fmSynth.volume.value = -6;\n   * fmSynth.sync();\n   * // schedule 3 notes when the transport first starts\n   * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n   * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n   * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n   * // start the transport to hear the notes\n   * Tone.Transport.start();\n   */\n\n\n  sync() {\n    if (this._syncState()) {\n      this._syncMethod(\"triggerAttack\", 1);\n\n      this._syncMethod(\"triggerRelease\", 0);\n    }\n\n    return this;\n  }\n  /**\n   * set _sync\n   */\n\n\n  _syncState() {\n    let changed = false;\n\n    if (!this._synced) {\n      this._synced = true;\n      changed = true;\n    }\n\n    return changed;\n  }\n  /**\n   * Wrap the given method so that it can be synchronized\n   * @param method Which method to wrap and sync\n   * @param  timePosition What position the time argument appears in\n   */\n\n\n  _syncMethod(method, timePosition) {\n    var _this = this;\n\n    const originalMethod = this[\"_original_\" + method] = this[method];\n\n    this[method] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const time = args[timePosition];\n\n      const id = _this.context.transport.schedule(t => {\n        args[timePosition] = t;\n        originalMethod.apply(_this, args);\n      }, time);\n\n      _this._scheduledEvents.push(id);\n    };\n  }\n  /**\n   * Unsync the instrument from the Transport\n   */\n\n\n  unsync() {\n    this._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\n    this._scheduledEvents = [];\n\n    if (this._synced) {\n      this._synced = false;\n      this.triggerAttack = this._original_triggerAttack;\n      this.triggerRelease = this._original_triggerRelease;\n    }\n\n    return this;\n  }\n  /**\n   * Trigger the attack and then the release after the duration.\n   * @param  note     The note to trigger.\n   * @param  duration How long the note should be held for before\n   *                         triggering the release. This value must be greater than 0.\n   * @param time  When the note should be triggered.\n   * @param  velocity The velocity the note should be triggered at.\n   * @example\n   * const synth = new Tone.Synth().toDestination();\n   * // trigger \"C4\" for the duration of an 8th note\n   * synth.triggerAttackRelease(\"C4\", \"8n\");\n   */\n\n\n  triggerAttackRelease(note, duration, time, velocity) {\n    const computedTime = this.toSeconds(time);\n    const computedDuration = this.toSeconds(duration);\n    this.triggerAttack(note, computedTime, velocity);\n    this.triggerRelease(computedTime + computedDuration);\n    return this;\n  }\n  /**\n   * clean up\n   * @returns {Instrument} this\n   */\n\n\n  dispose() {\n    super.dispose();\n\n    this._volume.dispose();\n\n    this.unsync();\n    this._scheduledEvents = [];\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Volume","ToneAudioNode","optionsFromArguments","readOnly","Instrument","constructor","getDefaults","arguments","triggerAttack","triggerRelease","options","_volume","output","context","volume","Object","assign","sync","_syncState","_syncMethod","changed","_synced","method","timePosition","originalMethod","args","time","id","transport","schedule","t","apply","_scheduledEvents","push","unsync","forEach","clear","_original_triggerAttack","_original_triggerRelease","triggerAttackRelease","note","duration","velocity","computedTime","toSeconds","computedDuration","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/instrument/Instrument.ts"],"sourcesContent":["import { Volume } from \"../component/channel/Volume\";\nimport { Param } from \"../core/context/Param\";\nimport { OutputNode, ToneAudioNode, ToneAudioNodeOptions } from \"../core/context/ToneAudioNode\";\nimport { Decibels, Frequency, NormalRange, Time } from \"../core/type/Units\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n\nexport interface InstrumentOptions extends ToneAudioNodeOptions {\n\tvolume: Decibels;\n}\n\n/**\n * Base-class for all instruments\n */\nexport abstract class Instrument<Options extends InstrumentOptions> extends ToneAudioNode<Options> {\n\n\t/**\n\t * The output and volume triming node\n\t */\n\tprivate _volume: Volume;\n\toutput: OutputNode;\n\n\t/**\n\t * The instrument only has an output\n\t */\n\tinput: undefined;\n\n\t/**\n\t * The volume of the output in decibels.\n\t * @example\n\t * const amSynth = new Tone.AMSynth().toDestination();\n\t * amSynth.volume.value = -6;\n\t * amSynth.triggerAttackRelease(\"G#3\", 0.2);\n\t */\n\tvolume: Param<\"decibels\">;\n\n\t/**\n\t * Keep track of all events scheduled to the transport\n\t * when the instrument is 'synced'\n\t */\n\tprivate _scheduledEvents: number[] = [];\n\n\t/**\n\t * If the instrument is currently synced\n\t */\n\tprivate _synced = false;\n\n\tconstructor(options?: Partial<InstrumentOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(Instrument.getDefaults(), arguments));\n\t\tconst options = optionsFromArguments(Instrument.getDefaults(), arguments);\n\n\t\tthis._volume = this.output = new Volume({\n\t\t\tcontext: this.context,\n\t\t\tvolume: options.volume,\n\t\t});\n\t\tthis.volume = this._volume.volume;\n\t\treadOnly(this, \"volume\");\n\t}\n\n\tstatic getDefaults(): InstrumentOptions {\n\t\treturn Object.assign(ToneAudioNode.getDefaults(), {\n\t\t\tvolume: 0,\n\t\t});\n\t}\n\n\t/**\n\t * Sync the instrument to the Transport. All subsequent calls of\n\t * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.\n\t * @example\n\t * const fmSynth = new Tone.FMSynth().toDestination();\n\t * fmSynth.volume.value = -6;\n\t * fmSynth.sync();\n\t * // schedule 3 notes when the transport first starts\n\t * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n\t * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n\t * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n\t * // start the transport to hear the notes\n\t * Tone.Transport.start();\n\t */\n\tsync(): this {\n\t\tif (this._syncState()) {\n\t\t\tthis._syncMethod(\"triggerAttack\", 1);\n\t\t\tthis._syncMethod(\"triggerRelease\", 0);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * set _sync\n\t */\n\tprotected _syncState(): boolean {\n\t\tlet changed = false;\n\t\tif (!this._synced) {\n\t\t\tthis._synced = true;\n\t\t\tchanged = true;\n\t\t}\n\t\treturn changed;\n\t}\n\n\t/**\n\t * Wrap the given method so that it can be synchronized\n\t * @param method Which method to wrap and sync\n\t * @param  timePosition What position the time argument appears in\n\t */\n\tprotected _syncMethod(method: string, timePosition: number): void {\n\t\tconst originalMethod = this[\"_original_\" + method] = this[method];\n\t\tthis[method] = (...args: any[]) => {\n\t\t\tconst time = args[timePosition];\n\t\t\tconst id = this.context.transport.schedule((t) => {\n\t\t\t\targs[timePosition] = t;\n\t\t\t\toriginalMethod.apply(this, args);\n\t\t\t}, time);\n\t\t\tthis._scheduledEvents.push(id);\n\t\t};\n\t}\n\n\t/**\n\t * Unsync the instrument from the Transport\n\t */\n\tunsync(): this {\n\t\tthis._scheduledEvents.forEach(id => this.context.transport.clear(id));\n\t\tthis._scheduledEvents = [];\n\t\tif (this._synced) {\n\t\t\tthis._synced = false;\n\t\t\tthis.triggerAttack = this._original_triggerAttack;\n\t\t\tthis.triggerRelease = this._original_triggerRelease;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Trigger the attack and then the release after the duration.\n\t * @param  note     The note to trigger.\n\t * @param  duration How long the note should be held for before\n\t *                         triggering the release. This value must be greater than 0.\n\t * @param time  When the note should be triggered.\n\t * @param  velocity The velocity the note should be triggered at.\n\t * @example\n\t * const synth = new Tone.Synth().toDestination();\n\t * // trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */\n\ttriggerAttackRelease(note: Frequency, duration: Time, time?: Time, velocity?: NormalRange): this {\n\t\tconst computedTime = this.toSeconds(time);\n\t\tconst computedDuration = this.toSeconds(duration);\n\t\tthis.triggerAttack(note, computedTime, velocity);\n\t\tthis.triggerRelease(computedTime + computedDuration);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Start the instrument's note.\n\t * @param note the note to trigger\n\t * @param time the time to trigger the ntoe\n\t * @param velocity the velocity to trigger the note (betwee 0-1)\n\t */\n\tabstract triggerAttack(note: Frequency, time?: Time, velocity?: NormalRange): this;\n\tprivate _original_triggerAttack = this.triggerAttack;\n\n\t/**\n\t * Trigger the release phase of the current note.\n\t * @param time when to trigger the release\n\t */\n\tabstract triggerRelease(...args: any[]): this;\n\tprivate _original_triggerRelease = this.triggerRelease;\n\n\t/**\n\t * clean up\n\t * @returns {Instrument} this\n\t */\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis._volume.dispose();\n\t\tthis.unsync();\n\t\tthis._scheduledEvents = [];\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}