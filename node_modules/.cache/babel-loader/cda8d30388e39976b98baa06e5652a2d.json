{"ast":null,"code":"import { Filter } from \"../component/filter/Filter\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect } from \"./LFOEffect\";\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate\n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\n\nexport class AutoFilter extends LFOEffect {\n  constructor() {\n    super(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n    this.name = \"AutoFilter\";\n    const options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n    this.filter = new Filter(Object.assign(options.filter, {\n      context: this.context\n    })); // connections\n\n    this.connectEffect(this.filter);\n\n    this._lfo.connect(this.filter.frequency);\n\n    this.octaves = options.octaves;\n    this.baseFrequency = options.baseFrequency;\n  }\n\n  static getDefaults() {\n    return Object.assign(LFOEffect.getDefaults(), {\n      baseFrequency: 200,\n      octaves: 2.6,\n      filter: {\n        type: \"lowpass\",\n        rolloff: -12,\n        Q: 1\n      }\n    });\n  }\n  /**\n   * The minimum value of the filter's cutoff frequency.\n   */\n\n\n  get baseFrequency() {\n    return this._lfo.min;\n  }\n\n  set baseFrequency(freq) {\n    this._lfo.min = this.toFrequency(freq); // and set the max\n\n    this.octaves = this._octaves;\n  }\n  /**\n   * The maximum value of the filter's cutoff frequency.\n   */\n\n\n  get octaves() {\n    return this._octaves;\n  }\n\n  set octaves(oct) {\n    this._octaves = oct;\n    this._lfo.max = this._lfo.min * Math.pow(2, oct);\n  }\n\n  dispose() {\n    super.dispose();\n    this.filter.dispose();\n    return this;\n  }\n\n}","map":{"version":3,"mappings":"AACA,SAASA,MAAT,QAAsC,4BAAtC;AAEA,SAASC,oBAAT,QAAqC,uBAArC;AACA,SAASC,SAAT,QAA4C,aAA5C;AAQA;;;;;;;;;;;;;AAYA,OAAM,MAAOC,UAAP,SAA0BD,SAA1B,CAAsD;EAqB3DE;IAEC,MAAMH,oBAAoB,CAACE,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAA1B;IArBQ,YAAe,YAAf;IAsBR,MAAMC,OAAO,GAAGN,oBAAoB,CAACE,UAAU,CAACE,WAAX,EAAD,EAA2BC,SAA3B,EAAsC,CAAC,WAAD,EAAc,eAAd,EAA+B,SAA/B,CAAtC,CAApC;IAEA,KAAKE,MAAL,GAAc,IAAIR,MAAJ,CAAWS,MAAM,CAACC,MAAP,CAAcH,OAAO,CAACC,MAAtB,EAA8B;MACtDG,OAAO,EAAE,KAAKA;IADwC,CAA9B,CAAX,CAAd,CALD,CASC;;IACA,KAAKC,aAAL,CAAmB,KAAKJ,MAAxB;;IACA,KAAKK,IAAL,CAAUC,OAAV,CAAkB,KAAKN,MAAL,CAAYO,SAA9B;;IACA,KAAKC,OAAL,GAAeT,OAAO,CAACS,OAAvB;IACA,KAAKC,aAAL,GAAqBV,OAAO,CAACU,aAA7B;EACA;;EAEiB,OAAXZ,WAAW;IACjB,OAAOI,MAAM,CAACC,MAAP,CAAcR,SAAS,CAACG,WAAV,EAAd,EAAuC;MAC7CY,aAAa,EAAE,GAD8B;MAE7CD,OAAO,EAAE,GAFoC;MAG7CR,MAAM,EAAE;QACPU,IAAI,EAAE,SADC;QAEPC,OAAO,EAAE,CAAC,EAFH;QAGPC,CAAC,EAAE;MAHI;IAHqC,CAAvC,CAAP;EASA;EAED;;;;;EAGiB,IAAbH,aAAa;IAChB,OAAO,KAAKJ,IAAL,CAAUQ,GAAjB;EACA;;EACgB,IAAbJ,aAAa,CAACK,IAAD,EAAK;IACrB,KAAKT,IAAL,CAAUQ,GAAV,GAAgB,KAAKE,WAAL,CAAiBD,IAAjB,CAAhB,CADqB,CAErB;;IACA,KAAKN,OAAL,GAAe,KAAKQ,QAApB;EACA;EAED;;;;;EAGW,IAAPR,OAAO;IACV,OAAO,KAAKQ,QAAZ;EACA;;EACU,IAAPR,OAAO,CAACS,GAAD,EAAI;IACd,KAAKD,QAAL,GAAgBC,GAAhB;IACA,KAAKZ,IAAL,CAAUa,GAAV,GAAgB,KAAKb,IAAL,CAAUQ,GAAV,GAAgBM,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,GAAZ,CAAhC;EACA;;EAEDI,OAAO;IACN,MAAMA,OAAN;IACA,KAAKrB,MAAL,CAAYqB,OAAZ;IACA,OAAO,IAAP;EACA;;AA5E0D","names":["Filter","optionsFromArguments","LFOEffect","AutoFilter","constructor","getDefaults","arguments","options","filter","Object","assign","context","connectEffect","_lfo","connect","frequency","octaves","baseFrequency","type","rolloff","Q","min","freq","toFrequency","_octaves","oct","max","Math","pow","dispose"],"sources":["/Users/jakeg/code/tone-instrument/node_modules/tone/Tone/effect/AutoFilter.ts"],"sourcesContent":["import { Frequency, Positive } from \"../core/type/Units\";\nimport { Filter, FilterOptions } from \"../component/filter/Filter\";\nimport { SourceOptions } from \"../source/Source\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFOEffect, LFOEffectOptions } from \"./LFOEffect\";\n\nexport interface AutoFilterOptions extends LFOEffectOptions {\n\tbaseFrequency: Frequency;\n\toctaves: Positive;\n\tfilter: Omit<FilterOptions, keyof SourceOptions | \"frequency\" | \"detune\" | \"gain\">;\n}\n\n/**\n * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n * Setting the LFO rate and depth allows for control over the filter modulation rate \n * and depth.\n *\n * @example\n * // create an autofilter and start it's LFO\n * const autoFilter = new Tone.AutoFilter(\"4n\").toDestination().start();\n * // route an oscillator through the filter and start it\n * const oscillator = new Tone.Oscillator().connect(autoFilter).start();\n * @category Effect\n */\nexport class AutoFilter extends LFOEffect<AutoFilterOptions> {\n\n\treadonly name: string = \"AutoFilter\";\n\n\t/**\n\t * The filter node\n\t */\n\treadonly filter: Filter;\n\n\t/**\n\t * The octaves placeholder\n\t */\n\tprivate _octaves!: Positive;\n\n\t/**\n\t * @param frequency The rate of the LFO.\n\t * @param baseFrequency The lower value of the LFOs oscillation\n\t * @param octaves The number of octaves above the baseFrequency\n\t */\n\tconstructor(frequency?: Frequency, baseFrequency?: Frequency, octaves?: Positive);\n\tconstructor(options?: Partial<AutoFilterOptions>);\n\tconstructor() {\n\n\t\tsuper(optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]));\n\t\tconst options = optionsFromArguments(AutoFilter.getDefaults(), arguments, [\"frequency\", \"baseFrequency\", \"octaves\"]);\n\n\t\tthis.filter = new Filter(Object.assign(options.filter, {\n\t\t\tcontext: this.context,\n\t\t}));\n\n\t\t// connections\n\t\tthis.connectEffect(this.filter);\n\t\tthis._lfo.connect(this.filter.frequency);\n\t\tthis.octaves = options.octaves;\n\t\tthis.baseFrequency = options.baseFrequency;\n\t}\n\n\tstatic getDefaults(): AutoFilterOptions {\n\t\treturn Object.assign(LFOEffect.getDefaults(), {\n\t\t\tbaseFrequency: 200,\n\t\t\toctaves: 2.6,\n\t\t\tfilter: {\n\t\t\t\ttype: \"lowpass\" as \"lowpass\",\n\t\t\t\trolloff: -12 as -12,\n\t\t\t\tQ: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * The minimum value of the filter's cutoff frequency.\n\t */\n\tget baseFrequency(): Frequency {\n\t\treturn this._lfo.min;\n\t}\n\tset baseFrequency(freq) {\n\t\tthis._lfo.min = this.toFrequency(freq);\n\t\t// and set the max\n\t\tthis.octaves = this._octaves;\n\t}\n\n\t/**\n\t * The maximum value of the filter's cutoff frequency. \n\t */\n\tget octaves(): Positive {\n\t\treturn this._octaves;\n\t}\n\tset octaves(oct) {\n\t\tthis._octaves = oct;\n\t\tthis._lfo.max = this._lfo.min * Math.pow(2, oct);\n\t}\n\n\tdispose(): this {\n\t\tsuper.dispose();\n\t\tthis.filter.dispose();\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}